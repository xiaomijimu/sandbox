{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"file",
				"file_basename"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Root>\n  \n  <!--JY1: 项目： 济医云胶片 - 功能： 就诊人列表跳转到报告列表 -->\n  <Node>\n    <!--Service Code 服务代码-->\n    <ServiceCode>JY1</ServiceCode>\n    \n    <!--会话权限验证相关参数-->\n    <SessionParameter>\n\n      <!--是否需要验证， 1：需要验证， 0：不需要验证（等同于直接验证通过，忽略其它验证参数）-->\n      <NeedVarify>1</NeedVarify>\n\n      <!--提取验证用的参数名，即url中的查询字符串-->\n      <Name>p1</Name>\n\n      <!--验证方法： GET/POST-->\n      <Method>GET</Method>\n\n      <!-- 验证接口在成功后的期望返回值， 如true、1等 -->\n      <SuccessResult>true</SuccessResult>\n\n      <!-- 服务器响应中指示返回值的属性名 -->\n      <ResponseParameterName>data</ResponseParameterName>\n      \n      <!--参数验证地址, 其中占位符{0}可选，若提供会被替换为参数值-->      \n      <Url>http://localhost:57144/api/v1/thirdparty/sessionvalidator/{0}</Url>\n      \n      <!--指定的POST参数名称 (仅在使用POST验证时需要提供)-->\n      <PostParameterName></PostParameterName>\n    </SessionParameter>\n\n    <!--验证成功后的处理行为-->\n    <Success>\n      <!--验证成功后的跳转地址-->\n      <Url>http://localhost:7844</Url>\n      \n      <!--验证成功后，从当前URL中转发的参数列表-->\n      <Parameters>\n        <!--格式：key={原参数名} ， 值：转发参数名-->\n        <Parameter key=\"p2\">pid</Parameter>\n      </Parameters>\n\n      <!--验证成功后的附带参数（额外添加的常量参数）（可选）-->\n      <AdditionalParameters>\n        <!--格式：key={原参数名} ， 值：参数内容-->\n        <Parameter key=\"vg\">1</Parameter>\n      </AdditionalParameters>      \n    </Success>\n\n    <!--验证失败后的处理行为-->\n    <Fail>\n      <!--验证失败后的跳转地址-->\n      <Url>http://localhost:45354</Url>\n\n      <!--验证失败后，从当前URL中转发的参数列表-->\n      <Parameters>\n        <!--格式：key={原参数名} ， 值：转发参数名-->\n        <Parameter key=\"p2\">pid</Parameter>\n      </Parameters>\n\n      <!--验证失败后的附带参数（额外添加的常量参数）（可选）-->\n      <AdditionalParameters>\n        <!--格式：key={原参数名} ， 值：参数内容-->\n        <!--<Parameter key=\"vgfail\">1</Parameter>-->\n      </AdditionalParameters>\n\n    </Fail>\n  </Node>\n  \n</Root>\n",
			"file": "/D/My Cloud/My Corp Documents/HCIS/VueGateway/Forward.xml",
			"file_size": 2582,
			"file_write_time": 131709275654000000,
			"settings":
			{
				"buffer_size": 1793,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"contents": "GCRis2Order\n        Patient\n            string PatientId  ///必须\n            string GlobalId\n            string Name\n            bool  IsVip\n            string MedicareNo\n            int Gender            /// 性别 0:男  1:女 4:其他\n            decimal Height\n            decimal Weight\n            string RemotePId\n            DateTime BirthDate\n            int IdType     ///  身份类型  体检默认用0  0 :身份证 1: 护照 2:港澳通行证  4:军官证 32:驾驶证\n            string IdNumber  ///  身份号\n            string Address\n            string Phone\n            string PostalCode\n            string Pinyin\n        Orders\n            string Id  必填\n            string PatientId\n            string AccNo\n            string RemoteAccNo /// 第三方申请单的唯一标示  如果出现多个Order的情况下 这个值应该是一致的  ,必填\n            string Source /// 来源 ,必填   体检系统:体检客户    billing: 问诊客户\n            IList<ProcedureDto> Procedures\n                string ExamItemCode\n                string ExamItemName\n                string Bodypart\n                string BodyCategory\n                string ModalityName\n                string ModalityTypeName\n                string OrderId /// Order id ,必填",
			"settings":
			{
				"buffer_size": 1112,
				"line_ending": "Windows",
				"name": "GCRis2Order"
			}
		},
		{
			"file": "/D/Temp/Logs/韩佩医生客户端/2018-06-07/2018-06-07-09.log",
			"settings":
			{
				"buffer_size": 39188,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 11145 files for \"GetStringForPrinting\"\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Examination\\Examination\\ExamEditor.cs:\n 1686  \n 1687          /// <summary>\n 1688:         /// GetStringForPrinting\n 1689          /// </summary>\n 1690          /// <param name=\"dt\"></param>\n ....\n 1758                  else\n 1759                  {\n 1760:                     logger.Error((long)ModuleEnum.Exam_Client, ModuleInstanceName.Exam, 53, \"getStringForPrinting, ColName=\" + colName + \" does NOT contain the key \" + System.Convert.ToString(fldValue), Application.StartupPath.ToString(), (new System.Diagnostics.StackFrame(true)).GetFileName(),\n 1761          (new System.Diagnostics.StackFrame(true)).GetFileLineNumber());\n 1762  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Examination\\PreExamination\\PreExamination.cs:\n 1747  \n 1748          /// <summary>\n 1749:         /// GetStringForPrinting\n 1750          /// </summary>\n 1751          /// <param name=\"dt\"></param>\n ....\n 1819                  else\n 1820                  {\n 1821:                     logger.Error((long)ModuleEnum.Exam_Client, ModuleInstanceName.Exam, 53, \"getStringForPrinting, ColName=\" + colName + \" does NOT contain the key \" + System.Convert.ToString(fldValue), Application.StartupPath.ToString(), (new System.Diagnostics.StackFrame(true)).GetFileName(),\n 1822          (new System.Diagnostics.StackFrame(true)).GetFileLineNumber());\n 1823  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\Common\\ClientCommonFunction.cs:\n 3972  \n 3973          /// <summary>\n 3974:         /// GetStringForPrinting\n 3975          /// </summary>\n 3976          /// <param name=\"dt\"></param>\n 3977          /// <param name=\"colName\"></param>\n 3978          /// <returns></returns>\n 3979:         public static string GetStringForPrinting(DataTable dt, string colName)\n 3980          {\n 3981              if (dt == null || dt.Rows.Count < 1 || !dt.Columns.Contains(colName) ||\n ....\n 4049                  else\n 4050                  {\n 4051:                     ClientCommonFunction.RISLog_Error(0, \"GetStringForPrinting, ColName=\" + colName + \" does NOT contain the key \" + System.Convert.ToString(fldValue), \"\", 0);\n 4052                  }\n 4053              }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\Common\\SrTemplateHelper.cs:\n  225  \n  226                      DateTime datetime1 = new DateTime();\n  227:                     var strDateTime = ds.Tables[0].Columns.Contains(\"TREGPATIENT__BIRTHDAY\") ? ClientCommonFunction.GetStringForPrinting(ds.Tables[0], \"TREGPATIENT__BIRTHDAY\") : \"\";\n  228                      if (DateTime.TryParse(strDateTime, out datetime1))\n  229                      {\n  ...\n  234                      //var ageArray = GetStringFromDataSet(ds, \"TREGORDER__CURRENTAGE\");\n  235  \n  236:                     var strAge = ds.Tables[0].Columns.Contains(\"TREGORDER__CURRENTAGE\") ? ClientCommonFunction.GetStringForPrinting(ds.Tables[0], \"TREGORDER__CURRENTAGE\") : \"\";\n  237  \n  238                      var age = \"\";\n  ...\n  273              var resultStr = \"\";\n  274              DateTime datetime = new DateTime();\n  275:             var strDateTime = table.Columns.Contains(key) ? ClientCommonFunction.GetStringForPrinting(table, key) : \"\";\n  276              strDateTime = strDateTime.Split(',')[0];\n  277              if (DateTime.TryParse(strDateTime, out datetime))\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\Kodak.GCRIS.Client.Report.CommonUserControl\\SrPreviewHelper.cs:\n  126                  {\n  127                     // fieldString = GetStringFromDataSet(ds, key);\n  128:                     fieldString = ds.Tables[0].Columns.Contains(key) ? ClientCommonFunction.GetStringForPrinting(ds.Tables[0], key) : \"\";\n  129                      \n  130                  }\n  ...\n  208              //string strCreator = GetStringFromDataSet(ds, ReportCommon.ReportCommon.FIELDNAME_REPORT_CREATER);\n  209              //paramMap.Add(\"UserGuid\", strCreator);\n  210:             string strReportGuid = ClientCommonFunction.GetStringForPrinting(ds.Tables[0], ReportCommon.ReportCommon.FIELDNAME_REPORTGUID);\n  211              paramMap.Add(\"REPORTGUID\", strReportGuid);\n  212  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\ReportEditorImpl.cs:\n 1720                          _reportEditorCtrl.AddDataField(col.ColumnName,\n 1721                            ReportPrintHelper.ReportEditorCtrl_FieldType.Default,\n 1722:                           ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName),\n 1723                            ReportPrintHelper.ReportEditorCtrl_ReplaceMode.ReplaceExisted,\n 1724                            ReportPrintHelper.ReportEditorCtrl_Visibility.Default, Color.White);\n ....\n 1770                          _reportEditorCtrl.AddDataField(col.ColumnName,\n 1771                              ReportPrintHelper.ReportEditorCtrl_FieldType.Default,\n 1772:                             ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName),\n 1773                              ReportPrintHelper.ReportEditorCtrl_ReplaceMode.ReplaceExisted,\n 1774                              ReportPrintHelper.ReportEditorCtrl_Visibility.Default, Color.White);\n ....\n 2408                          _reportEditorCtrl.AddDataField(col.ColumnName,\n 2409                              ReportPrintHelper.ReportEditorCtrl_FieldType.Default,\n 2410:                             ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName),\n 2411                              ReportPrintHelper.ReportEditorCtrl_ReplaceMode.ReplaceExisted,\n 2412                              ReportPrintHelper.ReportEditorCtrl_Visibility.Default, Color.White);\n ....\n 3327                              if (fld.ColumnName.ToUpper() == ReportCommon.ReportCommon.FIELDNAME_REPORTNAME.ToUpper())\n 3328                              {\n 3329:                                 dr[fld.ColumnName] = ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME) + ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], fld.ColumnName);\n 3330                              }\n 3331                              else\n 3332                              {\n 3333:                                 dr[fld.ColumnName] = ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], fld.ColumnName);\n 3334                              }\n 3335                          }\n ....\n 3419          private DataTable GetHistoryScore()\n 3420          {\n 3421:             string para = GetOneofRpGuidFromDataSet(_curReportDataSet, ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID) + \";\" + ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], ReportCommon.ReportCommon.FIELDNAME_REPORTGUID);\n 3422              Context context = new Context();\n 3423              context.MessageName = \"OAM.QualityScoring\";\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportListPanel\\ReportPrintPanel.cs:\n 2343                      if (fieldName.ToUpper() == ReportCommon.ReportCommon.FIELDNAME_WYS.ToUpper() || fieldName.ToUpper() == ReportCommon.ReportCommon.FIELDNAME_WYG.ToUpper())\n 2344                      {\n 2345:                         dr[key] = ClientCommonFunction.RemoveUnderline(ClientCommonFunction.GetStringForPrinting(dtReportInfo, fieldName));\n 2346                      }\n 2347                      else\n 2348                      {\n 2349:                         dr[key] = ClientCommonFunction.GetStringForPrinting(dtReportInfo, fieldName);\n 2350                      }\n 2351                  }\n ....\n 2485  \n 2486  \n 2487:             string strReportGuid = ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_REPORTGUID);\n 2488  \n 2489              Context context = new Context();\n ....\n 2516              #region add digital signed pic\n 2517              string signActions = \"\";\n 2518:             signActions += (ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGN).Length > 0 ? SignAction.SubmitReport + \",\" : \"\");\n 2519:             signActions += (ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGN).Length > 0 ? SignAction.ApproveReport + \",\" : \"\");\n 2520:             signActions += (ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGN).Length > 0 ? SignAction.SecondApproveReport : \"\");\n 2521              if (signActions.Length > 0)\n 2522              {\n ....\n 5837                          AddDataField(col.ColumnName,\n 5838                           ReportEditorCtrl_FieldType.Default,\n 5839:                           ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName));\n 5840                      }\n 5841                      else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_tRegProcedure__Bodypart) == 0)\n ....\n 5875                          AddDataField(col.ColumnName,\n 5876                              ReportEditorCtrl_FieldType.Default,\n 5877:                              ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName));\n 5878                      }\n 5879                  }\n ....\n 6050                     null);\n 6051  \n 6052:                 string strReportGuid = ClientCommonFunction.GetStringForPrinting(curReportDataSet.Tables[0], ReportCommon.ReportCommon.FIELDNAME_REPORTGUID);\n 6053  \n 6054                  Context context = new Context();\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Common\\ClientCommon\\ConditionBuilder\\CCCommon.cs:\n 1828          }\n 1829  \n 1830:         public static string GetStringForPrinting(DataTable dt, string colName)\n 1831          {\n 1832              if (dt == null || dt.Rows.Count < 1 || !dt.Columns.Contains(colName) ||\n ....\n 1900                  else\n 1901                  {\n 1902:                     RISLog_Error(0, \"GetStringForPrinting, ColName=\" + colName + \" does NOT contain the key \" + System.Convert.ToString(fldValue), \"\", 0);\n 1903                  }\n 1904              }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Common\\ClientCommon\\Report\\ClientCommonFunction.cs:\n 3793  \n 3794          /// <summary>\n 3795:         /// GetStringForPrinting\n 3796          /// </summary>\n 3797          /// <param name=\"dt\"></param>\n 3798          /// <param name=\"colName\"></param>\n 3799          /// <returns></returns>\n 3800:         public static string GetStringForPrinting(DataTable dt, string colName)\n 3801          {\n 3802              if (dt == null || dt.Rows.Count < 1 || !dt.Columns.Contains(colName) ||\n ....\n 3870                  else\n 3871                  {\n 3872:                     ClientCommonFunction.RISLog_Error(0, \"GetStringForPrinting, ColName=\" + colName + \" does NOT contain the key \" + System.Convert.ToString(fldValue), \"\", 0);\n 3873                  }\n 3874              }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Common\\ClientCommon\\Report\\ReportExporter.cs:\n  186                      if (fieldName.ToUpper() == ConditionBuilder.CBCommon.FIELDNAME_WYS.ToUpper() || fieldName.ToUpper() == ConditionBuilder.CBCommon.FIELDNAME_WYG.ToUpper())\n  187                      {\n  188:                         dr[key] = ConditionBuilder.RCCommonFunction.RemoveUnderline(ConditionBuilder.RCCommonFunction.GetStringForPrinting(dtReportInfo, fieldName));\n  189                      }\n  190                      else\n  191                      {\n  192:                         dr[key] = ConditionBuilder.RCCommonFunction.GetStringForPrinting(dtReportInfo, fieldName);\n  193                      }\n  194                  }\n  ...\n  310              }\n  311  \n  312:             string strReportGuid = ConditionBuilder.RCCommonFunction.GetStringForPrinting(dtReportInfo, ConditionBuilder.CBCommon.FIELDNAME_REPORTGUID);\n  313  \n  314              Context context = new Context();\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Common\\ClientCommon\\Report\\SrPrintHelper.cs:\n  163              //string strCreator = GetStringFromDataSet(ds, ReportCommon.ReportCommon.FIELDNAME_REPORT_CREATER);\n  164              //paramMap.Add(\"UserGuid\", strCreator);\n  165:             string strReportGuid = ClientCommonFunction.GetStringForPrinting(ds.Tables[0], ReportCommon.ReportCommon.FIELDNAME_REPORTGUID);\n  166              paramMap.Add(\"REPORTGUID\", strReportGuid);\n  167  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Demo\\CACode\\Client\\ExamEditor.cs:\n 1559  \n 1560          /// <summary>\n 1561:         /// GetStringForPrinting\n 1562          /// </summary>\n 1563          /// <param name=\"dt\"></param>\n ....\n 1631                  else\n 1632                  {\n 1633:                     logger.Error((long)ModuleEnum.Exam_Client, ModuleInstanceName.Exam, 53, \"getStringForPrinting, ColName=\" + colName + \" does NOT contain the key \" + System.Convert.ToString(fldValue), Application.StartupPath.ToString(), (new System.Diagnostics.StackFrame(true)).GetFileName(),\n 1634          (new System.Diagnostics.StackFrame(true)).GetFileLineNumber());\n 1635  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Demo\\CACode\\Client\\ReportEditorImpl.cs:\n 1197                          _reportEditorCtrl.AddDataField(col.ColumnName,\n 1198                              ReportEditorCtrl.ReportEditorCtrl_FieldType.Default,\n 1199:                             ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName),\n 1200                              ReportEditorCtrl.ReportEditorCtrl_ReplaceMode.ReplaceExisted,\n 1201                              ReportEditorCtrl.ReportEditorCtrl_Visibility.Default, Color.White);\n ....\n 1579                          _reportEditorCtrl.AddDataField(col.ColumnName,\n 1580                              ReportEditorCtrl.ReportEditorCtrl_FieldType.Default,\n 1581:                             ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName),\n 1582                              ReportEditorCtrl.ReportEditorCtrl_ReplaceMode.ReplaceExisted,\n 1583                              ReportEditorCtrl.ReportEditorCtrl_Visibility.Default, Color.White);\n ....\n 2365                              if (fld.ColumnName.ToUpper() == ReportCommon.ReportCommon.FIELDNAME_REPORTNAME.ToUpper())\n 2366                              {\n 2367:                                 dr[fld.ColumnName] = ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME) + ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], fld.ColumnName);\n 2368                              }\n 2369                              else\n 2370                              {\n 2371:                                 dr[fld.ColumnName] = ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], fld.ColumnName);\n 2372                              }\n 2373                          }\n\n\n\nSearching 11145 files for \"ReportEditorImpl.reset\"\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\ReportEditorImpl.cs:\n 1450                  catch (System.Exception ex2)\n 1451                  {\n 1452:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete tmp files, error=\" + ex2.Message, \"\", 0);\n 1453                  }\n 1454                  _listTmpFile.Clear();\n ....\n 1465                  catch (System.Exception ex2)\n 1466                  {\n 1467:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete sound files, error=\" + ex2.Message, \"\", 0);\n 1468                  }\n 1469                  _listSoundFileName.Clear();\n ....\n 1493                  System.Diagnostics.Debug.Assert(false, ex.Message);\n 1494  \n 1495:                 ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, error=\" + ex.Message, \"\", 0);\n 1496              }\n 1497          }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Demo\\CACode\\Client\\ReportEditorImpl.cs:\n  980                  catch (System.Exception ex2)\n  981                  {\n  982:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete tmp files, error=\" + ex2.Message, \"\", 0);\n  983                  }\n  984                  _listTmpFile.Clear();\n  ...\n  995                  catch (System.Exception ex2)\n  996                  {\n  997:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete sound files, error=\" + ex2.Message, \"\", 0);\n  998                  }\n  999                  _listSoundFileName.Clear();\n ....\n 1017                  System.Diagnostics.Debug.Assert(false, ex.Message);\n 1018  \n 1019:                 ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, error=\" + ex.Message, \"\", 0);\n 1020              }\n 1021          }\n\n\n\nSearching 11145 files for \"ReportEditorImpl\"\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\ConsultReport.cs:\n   26          private const string UserProfile_ConsultDialogPosition = \"ConsultDialogPosition\";\n   27  \n   28:         private ReportEditorImpl _reportEditor = null;\n   29          private DataTable _dtRptTemplate = null;\n   30          private System.Windows.Forms.RichTextBox _richTemp = new System.Windows.Forms.RichTextBox();\n   ..\n   50          }\n   51  \n   52:         public ReportEditorImpl ReportEditor\n   53          {\n   54              set { _reportEditor = value; }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\Historylist.cs:\n 1341                  return;\n 1342  \n 1343:             ReportEditorImpl reportEditor = _reportEditor as ReportEditorImpl;\n 1344              System.Diagnostics.Debug.Assert(reportEditor != null);\n 1345  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\Kodak.GCRIS.Client.ReportEditor.csproj:\n  271        <DependentUpon>ReportEditor.cs</DependentUpon>\n  272      </Compile>\n  273:     <Compile Include=\"ReportEditorImpl.cs\">\n  274        <SubType>UserControl</SubType>\n  275      </Compile>\n  276:     <Compile Include=\"ReportEditorImpl.Designer.cs\">\n  277:       <DependentUpon>ReportEditorImpl.cs</DependentUpon>\n  278      </Compile>\n  279      <Compile Include=\"Properties\\AssemblyInfo.cs\" />\n  ...\n  391        <DependentUpon>ReportEditor.cs</DependentUpon>\n  392      </EmbeddedResource>\n  393:     <EmbeddedResource Include=\"ReportEditorImpl.resx\">\n  394        <SubType>Designer</SubType>\n  395:       <DependentUpon>ReportEditorImpl.cs</DependentUpon>\n  396      </EmbeddedResource>\n  397      <EmbeddedResource Include=\"ReportSnapShot.resx\">\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\ReportEditor.cs:\n   15      public partial class ReportEditor : UserControl\n   16      {\n   17:         ReportEditorImpl _editor = null;\n   18          bool _autoLoadImage = false;\n   19  \n   ..\n   28  \n   29              //_autoLoadImage = false;\n   30:             //_editor = ControlCache<ReportEditorImpl>.Instance.grab(); // new ReportEditorImpl();\n   31              //_editor.doActionsWithArgs(\"OtherForm\");\n   32              //_editor.Tag = this.Tag;\n   ..\n   45  \n   46              _autoLoadImage = false;\n   47:             _editor = ControlCache<ReportEditorImpl>.Instance.grab(); // new ReportEditorImpl();\n   48              _editor.doActionsWithArgs(fromList);\n   49              _editor.Tag = this.Tag;\n   ..\n  255              {\n  256                  createControl();\n  257:                 //_panel.BeginInvoke(new Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl.InvokeDelegate(createControl_async));\n  258              }\n  259          }\n  ...\n  427              try\n  428              {\n  429:                 Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.resize(2);\n  430              }\n  431              catch (Exception ex)\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\ReportEditor.Designer.cs:\n   14          protected override void Dispose(bool disposing)\n   15          {\n   16:             ControlCache<ReportEditorImpl>.Instance.drop(_editor);\n   17  \n   18              if (disposing && (components != null))\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\ReportEditorImpl.cs:\n   56  namespace Kodak.GCRIS.Client.ReportEditor\n   57  {\n   58:     public partial class ReportEditorImpl : UserControl, Carestream.CommonControls.ITranslator, ICanCacheControl\n   59      {\n   60          #region Private variable\n   ..\n  347          /// Constructor\n  348          /// </summary>\n  349:         public ReportEditorImpl()\n  350          {\n  351              try\n  ...\n 1450                  catch (System.Exception ex2)\n 1451                  {\n 1452:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete tmp files, error=\" + ex2.Message, \"\", 0);\n 1453                  }\n 1454                  _listTmpFile.Clear();\n ....\n 1465                  catch (System.Exception ex2)\n 1466                  {\n 1467:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete sound files, error=\" + ex2.Message, \"\", 0);\n 1468                  }\n 1469                  _listSoundFileName.Clear();\n ....\n 1493                  System.Diagnostics.Debug.Assert(false, ex.Message);\n 1494  \n 1495:                 ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, error=\" + ex.Message, \"\", 0);\n 1496              }\n 1497          }\n ....\n 20559  \n 20560          #region Added by Blue for RC[606] - US17701\n 20561:         private void ReportEditorImpl_SizeChanged(object sender, EventArgs e)\n 20562          {\n 20563              try\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\ReportEditorImpl.Designer.cs:\n    4  namespace Kodak.GCRIS.Client.ReportEditor\n    5  {\n    6:     partial class ReportEditorImpl\n    7      {\n    8          /// <summary> \n    .\n  627              this.splitContainer0.TabIndex = 3;\n  628              // \n  629:             // ReportEditorImpl\n  630              // \n  631              this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n  632              this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n  633              this.Controls.Add(this.splitContainer0);\n  634:             this.Name = \"ReportEditorImpl\";\n  635              this.Size = new System.Drawing.Size(763, 566);\n  636              this.Load += new System.EventHandler(this.ReportEditor_Load);\n  637:             this.SizeChanged += new System.EventHandler(this.ReportEditorImpl_SizeChanged);\n  638              this.splitContainer1.Panel1.ResumeLayout(false);\n  639              this.splitContainer1.Panel2.ResumeLayout(false);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportEditor\\SelectTemplate.cs:\n   98          {\n   99             \n  100:             ReportEditorImpl reportEditor = _reportEditor as ReportEditorImpl;\n  101              System.Diagnostics.Debug.Assert(reportEditor != null);\n  102  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportListPanel\\ApprovedReportPanel.cs:\n  907                  _timerRefreshCount.Stop();\n  908                  _timerRefreshCount.Dispose();\n  909:                 this.BeginInvoke(new Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl.InvokeDelegate(backgroundInitReportEditor));\n  910  \n  911  \n  ...\n  923              uint numInit = (uint)ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.ReportEditor_BackgroundInitCount, 2);\n  924  \n  925:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.resize(numInit);\n  926          }\n  927  \n  ...\n 1151              Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.BeforeLostFocusEvent -= new BeforeLostFocusEventHandler(BeforeLostFocusEvent);\n 1152  \n 1153:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.clear();\n 1154  \n 1155              _asyncCount.OnCompleted -= new AsyncRequestReportListCount.CompletedEventHandler(_asyncCount_OnCompleted);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportListPanel\\ReportListPanel.cs:\n  712                  // method 1, freeze UI\n  713                  //backgroundInitReportEditor();\n  714:                 //this.BeginInvoke(new Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl.InvokeDelegate(backgroundInitReportEditor));\n  715  \n  716                  // method 2, Error, cross-thread UI\n  ...\n 1221                  _timerRefreshCount.Stop();\n 1222                  _timerRefreshCount.Dispose();\n 1223:                 this.BeginInvoke(new Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl.InvokeDelegate(backgroundInitReportEditor));\n 1224              }\n 1225              catch (Exception ex)\n ....\n 1235              uint numInit = (uint)ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.ReportEditor_BackgroundInitCount, 2);\n 1236  \n 1237:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.resize(numInit);\n 1238          }\n 1239  \n ....\n 1481              ClientFrameworkBuilder.Instance.PanelManager.BeforeLostFocusEvent -= new BeforeLostFocusEventHandler(BeforeLostFocusEvent);\n 1482  \n 1483:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.clear();\n 1484  \n 1485              _asyncCount.OnCompleted -= new AsyncRequestReportListCount.CompletedEventHandler(_asyncCount_OnCompleted);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportListPanel\\ReportListPanel2.cs:\n  289          protected override void Panel_ClosingEvent(object sender, ClosingEventArgs e)\n  290          {\n  291:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.clear();\n  292  \n  293              base.Panel_ClosingEvent(sender, e);\n  ...\n  738                  _timerRefreshCount.Tick -= new EventHandler(background_Tick);\n  739                  _timerRefreshCount.Dispose();\n  740:                 this.BeginInvoke(new Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl.InvokeDelegate(backgroundInitReportEditor));\n  741  \n  742  \n  ...\n  754              uint numInit = (uint)ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.ReportEditor_BackgroundInitCount, 1);\n  755  \n  756:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.resize(numInit);\n  757          }\n  758  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportListPanel\\UnapprovedReportPanel.cs:\n 1211                  _timerRefreshCount.Dispose();\n 1212  \n 1213:                 this.BeginInvoke(new Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl.InvokeDelegate(backgroundInitReportEditor));\n 1214  \n 1215               \n ....\n 1227              uint numInit = (uint)ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.ReportEditor_BackgroundInitCount, 2);\n 1228  \n 1229:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.resize(numInit);\n 1230          }\n 1231  \n ....\n 1463                  Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.BeforeLostFocusEvent -= new BeforeLostFocusEventHandler(BeforeLostFocusEvent);\n 1464  \n 1465:                 Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.clear();\n 1466  \n 1467                  _asyncCount.OnCompleted -= new AsyncRequestReportListCount.CompletedEventHandler(_asyncCount_OnCompleted);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportListPanel\\UnwrittenReportPanel.cs:\n 1473                  _timerRefreshCount.Dispose();\n 1474  \n 1475:                 this.BeginInvoke(new Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl.InvokeDelegate(backgroundInitReportEditor));\n 1476  \n 1477  \n ....\n 1489              uint numInit = (uint)ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.ReportEditor_BackgroundInitCount, 2);\n 1490  \n 1491:             Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.resize(numInit);\n 1492          }\n 1493  \n ....\n 1716                  Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.BeforeLostFocusEvent -= new BeforeLostFocusEventHandler(BeforeLostFocusEvent);\n 1717  \n 1718:                 Kodak.GCRIS.Client.ReportEditor.ControlCache<Kodak.GCRIS.Client.ReportEditor.ReportEditorImpl>.Instance.clear();\n 1719  \n 1720                  _asyncCount.OnCompleted -= new AsyncRequestReportListCount.CompletedEventHandler(_asyncCount_OnCompleted);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Demo\\CACode\\Client\\ReportEditorImpl.cs:\n   41  namespace Kodak.GCRIS.Client.ReportEditor\n   42  {\n   43:     public partial class ReportEditorImpl : UserControl, Carestream.CommonControls.ITranslator\n   44      {\n   45          #region Private variable\n   ..\n  231          /// Constructor\n  232          /// </summary>\n  233:         public ReportEditorImpl()\n  234          {\n  235              try\n  ...\n  980                  catch (System.Exception ex2)\n  981                  {\n  982:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete tmp files, error=\" + ex2.Message, \"\", 0);\n  983                  }\n  984                  _listTmpFile.Clear();\n  ...\n  995                  catch (System.Exception ex2)\n  996                  {\n  997:                     ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, failed to delete sound files, error=\" + ex2.Message, \"\", 0);\n  998                  }\n  999                  _listSoundFileName.Clear();\n ....\n 1017                  System.Diagnostics.Debug.Assert(false, ex.Message);\n 1018  \n 1019:                 ClientCommonFunction.RISLog_Error(0, \"ReportEditorImpl.reset, error=\" + ex.Message, \"\", 0);\n 1020              }\n 1021          }\n\n50 matches across 14 files\n\n\nSearching 11145 files for \"charged\"\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\ActiveX\\Printer\\ax_GetPrinterInfo\\ipch\\ax_getprinterinfo-5a246036\\ax_getprinterinfo-9599dcae.ipch:\n    <binary>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\ActiveX\\Printer\\ax_GetPrinterInfo\\ipch\\ax_getprinterinfo-5a246036\\ax_getprinterinfo-f42d0034.ipch:\n    <binary>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Oam\\Dictionary\\ChargeCodeManager.cs:\n  190              }\n  191              //AddColumn(\"Code\", \"ChargeCode\");\n  192:             //AddColumn(\"Description\", \"ChargeDescription\");\n  193              //AddColumn(\"Type\", \"Type\");\n  194              //GridViewDataColumn gridCol = AddColumn(\"Price\", \"Price\");\n  ...\n  456              if (this.txtDescription.Text.Trim() == string.Empty)\n  457              {\n  458:                 this.errorProvider1.SetError(this.txtDescription, mlManager.GetString(\"notEmptyChargeDescription\", (int)ModuleEnum.Oam_Client, \"Charge Description cann't be empty\"));\n  459                  return false;\n  460              }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Oam\\Dictionary\\ChargeCodeManager.Designer.cs:\n  144              gridViewTextBoxColumn2.FieldAlias = \"Description\";\n  145              gridViewTextBoxColumn2.FieldName = \"Description\";\n  146:             gridViewTextBoxColumn2.HeaderText = \"ChargeDescription\";\n  147              gridViewTextBoxColumn2.HeaderTextAlignment = System.Drawing.ContentAlignment.MiddleLeft;\n  148              gridViewTextBoxColumn2.UniqueName = \"Description\";\n  ...\n  375              this.lblDescription.Size = new System.Drawing.Size(100, 16);\n  376              this.lblDescription.TabIndex = 3;\n  377:             this.lblDescription.Text = \"ChargeDescription\";\n  378              this.lblDescription.TextAlign = System.Drawing.ContentAlignment.TopLeft;\n  379              // \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Oam\\System\\ClientConfigManager.cs:\n  704                  if (!getChangeData())\n  705                  {\n  706:                     ClientFrameworkBuilder.Instance.CommonManager.ShowMsgBox(languageManger.GetString(\"SystemProfileManagerForm.NoChangesOccured.Text\", (int)ModuleEnum.Oam_Client, \"The content of clent config was not charged!\"));\n  707                      return;\n  708                  }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\PathologyTrack\\FormReportCompare.cs:\n   80  \n   81                  builder.Clear();\n   82:                 dt = dsar.DataSetData.Tables[\"DischargedSummary\"];\n   83                  foreach (DataRow dr in dt.Rows)\n   84                  {\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\PathologyTrack\\PathologyTrack.cs:\n   31          private LogManagerForClient logger = new LogManagerForClient(\"TeachingClientLoglevel\", \"0500\");\n   32          private CommonManager commonManager = ClientFrameworkBuilder.Instance.CommonManager;\n   33:         private string _ListName = \"AccNo|PatientID|PatientName|Diagnose|PathologyReport|DischargedSummary|CreatorName|CreateDt|ReportGuid|ReportName|Teaching|Research\";\n   34          private Dictionary<string, string> _dicOrg = new Dictionary<string, string>();\n   35          private Dictionary<string, string> _dicNew = new Dictionary<string, string>();\n   ..\n  487              dtParent.Columns.Add(\"Diagnose\");\n  488              dtParent.Columns.Add(\"PathologyReport\");\n  489:             dtParent.Columns.Add(\"DischargedSummary\");\n  490              dtParent.Columns.Add(\"CreatorName\");\n  491              dtParent.Columns.Add(\"CreateDt\");\n  ...\n  556                  datarow[\"PathologyReport\"] = Temp;\n  557  \n  558:                 Temp = Convert.ToString(dr[\"DischargedSummary\"]);\n  559                  Temp = Temp.Replace(\"@\", Environment.NewLine);\n  560:                 //gvdri.Cells[\"DischargedSummary\"].Value = Temp;\n  561:                 datarow[\"DischargedSummary\"] = Temp;\n  562  \n  563                  Temp = Convert.ToString(dr[\"CreatorName\"]);\n  ...\n  865  \n  866                   CSMenuItem item1 = new CSMenuItem();\n  867:                  item1.Name = \"DischargedSummary\";\n  868:                  item1.Text = languageManager.GetString(\"DischargedSummary\", \"0000\", \"DischargedSummary\");\n  869                   item1.Click += new EventHandler(menuItem_Click);\n  870                   ctxMenu.Items.Add(item1);\n  ...\n  936                          action = \"SetPathologyReport\";\n  937                      }\n  938:                     else if (action.ToUpper() == \"DISCHARGEDSUMMARY\")\n  939                      {\n  940:                         Kodak.GCRIS.Client.Common.CommonFuncs.CallShowOtherInfo(\"GetDischargedSummary\", builder.ToString(), ref OutXml);\n  941:                         action = \"SetDischargedSummary\";\n  942   \n  943                      }\n  ...\n 1281                  string imagereport = radGridView1.CurrentRow.Cells[\"Diagnose\"].Value.ToString();\n 1282                  string pathologyreport = radGridView1.CurrentRow.Cells[\"pathologyreport\"].Value.ToString();\n 1283:                 string dischargedsummary = radGridView1.CurrentRow.Cells[\"dischargedsummary\"].Value.ToString();\n 1284                                \n 1285                  //Get patient information from database\n ....\n 1329                          .AppendFormat(\"<OPTIONAL1>{0}</OPTIONAL1>\", imagereport)\n 1330                          .AppendFormat(\"<OPTIONAL2>{0}</OPTIONAL2>\", pathologyreport)\n 1331:                         .AppendFormat(\"<OPTIONAL3>{0}</OPTIONAL3>\", dischargedsummary)\n 1332                          .Append(\"<OPTIONAL5></OPTIONAL5>\")\n 1333                          .Append(\"<OPTIONAL6></OPTIONAL6>\")\n ....\n 1613                  }\n 1614  \n 1615:                 if (!radGridView1.Columns.Contains(\"DischargedSummary\"))\n 1616                  {\n 1617:                     string strColumnName = \"DischargedSummary\";\n 1618                      GridViewTextBoxColumn gridCol = new GridViewTextBoxColumn();\n 1619                      gridCol.HeaderText = mlManager.GetString(strColumnName, MODULEID, strColumnName);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\QualityControl\\QualityControl\\ChargeDBAgent.cs:\n   11  namespace Kodak.GCRIS.Client.QuliatyControl\n   12  {\n   13:     class ChargeDBAgent\n   14      {\n   15          #region public method\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\QualityControl\\QualityControl\\ChargeManageUI.cs:\n  190                      if (drs.Length > 0)\n  191                      {\n  192:                         cbxChargeDes.SelectedValue = drs[0][\"Code\"];\n  193                      }\n  194                      else\n  195                      {\n  196:                         cbxChargeDes.SelectedValue = \"\";\n  197                      }\n  198                  }\n  ...\n  381  \n  382              DataRowView drv = Grid_OrderInfo.SelectedRows[0].DataBoundItem as DataRowView;\n  383:             if (txtCount.Value == 0 || cbxChargeDes.SelectedText == string.Empty\n  384                  || txtPrice.Text == string.Empty)\n  385              {\n  ...\n  395              item.Count = (int)txtCount.Value;\n  396              item.Price = Convert.ToDecimal(txtPrice.Text);\n  397:             item.Description = cbxChargeDes.Text;\n  398:             item.Code = cbxChargeDes.SelectedValue.ToString();\n  399              item.ItemIndex = Guid.NewGuid().ToString();\n  400              item.Owner = \"RIS\";\n  ...\n  405              if (dtChargeCodes != null)\n  406              {\n  407:                 DataRow[] drs = dtChargeCodes.Select(string.Format(\"Code='{0}'\", Convert.ToString(cbxChargeDes.SelectedValue)));\n  408                  if (drs.Length > 0)\n  409                  {\n  ...\n  437  \n  438              ChargeModel chargeModel = new ChargeModel();\n  439:             chargeModel.Code = cbxChargeDes.SelectedValue.ToString();\n  440              chargeModel.Amount = (int)txtCount.Value;\n  441              chargeModel.Price = Convert.ToDecimal(txtPrice.Text);\n  ...\n  443              chargeModel.OrderGuid = Convert.ToString(drv[\"OrderGuid\"]);\n  444              chargeModel.ChargeGuid = item.ItemIndex;\n  445:             chargeModel.Description = cbxChargeDes.Text;\n  446  \n  447              if (iHisReult != 2 && results.Count > 0)\n  ...\n  629              if (dtCodes != null)\n  630              {\n  631:                 this.cbxChargeDes.DataSource = dtCodes;\n  632:                 this.cbxChargeDes.DisplayMember = \"Description\";\n  633:                 this.cbxChargeDes.ValueMember = \"Code\";\n  634:                 //this.cbxChargeDes.SelectedIndex = -1;\n  635              }\n  636  \n  ...\n  716                  return false;\n  717              }\n  718:             if (cbxChargeDes.SelectedText == string.Empty)\n  719              {\n  720:                 this.errorProvider1.SetError(cbxChargeDes, mlManager.GetString(\"NotEmptyChargeDescription\", (int)ModuleEnum.Oam_Client, \"Charge Description cann't be empty\"));\n  721                  return false;\n  722              }\n  ...\n  746          }\n  747  \n  748:         private void cbxChargeDes_SelectedValueChanged(object sender, EventArgs e)\n  749          {\n  750              DataTable dtChargeCodes = chargeUIBz.GetChargeCodes();\n  751              if (dtChargeCodes != null)\n  752              {\n  753:                 DataRow[] drs = dtChargeCodes.Select(string.Format(\"Code='{0}'\", Convert.ToString(cbxChargeDes.SelectedValue)));\n  754                  if (drs.Length > 0)\n  755                  {\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\QualityControl\\QualityControl\\ChargeManageUI.Designer.cs:\n   74              this.csLabel1 = new Carestream.CommonControls.CSLabel();\n   75              this.csLabel3 = new Carestream.CommonControls.CSLabel();\n   76:             this.cbxChargeDes = new Carestream.CommonControls.CSComboBox();\n   77              this.csLabel2 = new Carestream.CommonControls.CSLabel();\n   78              this.Grid_ChargeInfo = new Carestream.CommonControls.CSGridView();\n   ..\n  132              ((System.ComponentModel.ISupportInitialize)(this.csLabel1)).BeginInit();\n  133              ((System.ComponentModel.ISupportInitialize)(this.csLabel3)).BeginInit();\n  134:             ((System.ComponentModel.ISupportInitialize)(this.cbxChargeDes)).BeginInit();\n  135              ((System.ComponentModel.ISupportInitialize)(this.csLabel2)).BeginInit();\n  136              ((System.ComponentModel.ISupportInitialize)(this.Grid_ChargeInfo)).BeginInit();\n  ...\n  704              this.csPanel2.Controls.Add(this.csLabel1);\n  705              this.csPanel2.Controls.Add(this.csLabel3);\n  706:             this.csPanel2.Controls.Add(this.cbxChargeDes);\n  707              this.csPanel2.Controls.Add(this.csLabel2);\n  708              this.csPanel2.Dock = System.Windows.Forms.DockStyle.Fill;\n  ...\n  787              this.csLabel3.TextAlign = System.Drawing.ContentAlignment.TopLeft;\n  788              // \n  789:             // cbxChargeDes\n  790              // \n  791:             this.cbxChargeDes.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n  792:             this.cbxChargeDes.Font = new System.Drawing.Font(\"MS Reference Sans Serif\", 8.25F);\n  793:             this.cbxChargeDes.Location = new System.Drawing.Point(175, 6);\n  794:             this.cbxChargeDes.Name = \"cbxChargeDes\";\n  795              // \n  796              // \n  797              // \n  798:             this.cbxChargeDes.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;\n  799:             this.cbxChargeDes.SelectedName = \"\";\n  800:             this.cbxChargeDes.Size = new System.Drawing.Size(128, 21);\n  801:             this.cbxChargeDes.TabIndex = 5;\n  802:             this.cbxChargeDes.TabStop = false;\n  803:             this.cbxChargeDes.SelectedValueChanged += new System.EventHandler(this.cbxChargeDes_SelectedValueChanged);\n  804              // \n  805              // csLabel2\n  ...\n  907              ((System.ComponentModel.ISupportInitialize)(this.csLabel1)).EndInit();\n  908              ((System.ComponentModel.ISupportInitialize)(this.csLabel3)).EndInit();\n  909:             ((System.ComponentModel.ISupportInitialize)(this.cbxChargeDes)).EndInit();\n  910              ((System.ComponentModel.ISupportInitialize)(this.csLabel2)).EndInit();\n  911              ((System.ComponentModel.ISupportInitialize)(this.Grid_ChargeInfo.MasterGridViewTemplate)).EndInit();\n  ...\n  942          private Carestream.CommonControls.CSLabel csLabel3;\n  943          private Carestream.CommonControls.CSLabel csLabel2;\n  944:         private Carestream.CommonControls.CSComboBox cbxChargeDes;\n  945          private Carestream.CommonControls.CSTextBox txtChargeCode;\n  946          private Carestream.CommonControls.CSLabel csLabel1;\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\QualityControl\\QualityControl\\ChargeUIBz.cs:\n   51              try\n   52              {\n   53:                 DataSet ds = (DataSet)ChargeDBAgent.QueryChargeList(ActionType.QC_ChargeQueryOrderList, queryParam);\n   54                  if (ds != null && ds.Tables.Contains(CHARGEORDERINFO))\n   55                  {\n   ..\n   88              try\n   89              {\n   90:                 DataSet ds = (DataSet)ChargeDBAgent.QueryChargeList(ActionType.QC_ChargeQueryItemList, queryParam);\n   91                  if (ds != null && ds.Tables.Contains(CHARGEITEMINFO))\n   92                  {\n   ..\n  134              {\n  135                  itemParam.Add(\"ActionName\", action.ToString());\n  136:                 ChargeDBAgent.FeeItemOperation(ActionType.QC_ChargeOperation, itemParam, chargeModel);\n  137              }\n  138              catch (Exception ex)\n  ...\n  160              {\n  161                  itemParam.Add(\"ActionName\", \"AddCharge\");\n  162:                 return ChargeDBAgent.AddCharge(model, itemParam);\n  163              }\n  164              catch (Exception ex)\n  ...\n  188              if (dtChargeCodes == null)\n  189              {\n  190:                 dtChargeCodes = ChargeDBAgent.GetChargeCodes();\n  191              }\n  192              return dtChargeCodes;\n  ...\n  195          public DataTable GetModalityType()\n  196          {\n  197:             return ChargeDBAgent.GetModalityType();\n  198          }\n  199          #endregion\n  ...\n  306              csGridView.Columns.Clear();\n  307              AddNewCol(csGridView, \"Code\", \"ChargeCode\", true);\n  308:             AddNewCol(csGridView, \"Description\", \"ChargeDescription\", true);\n  309              AddNewCol(csGridView, \"Price\");\n  310              AddNewCol(csGridView, \"Amount\");\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\QualityControl\\QualityControl\\ClassDiagram1.cd:\n   28      </TypeIdentifier>\n   29    </Class>\n   30:   <Class Name=\"Kodak.GCRIS.Client.QuliatyControl.ChargeDBAgent\">\n   31      <Position X=\"4.5\" Y=\"0.5\" Width=\"1.5\" />\n   32      <TypeIdentifier>\n   33:       <FileName>ChargeDBAgent.cs</FileName>\n   34        <HashCode>AAAAAQAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAEAAA=</HashCode>\n   35      </TypeIdentifier>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\QualityControl\\QualityControl\\QualityControlClent.csproj:\n  100    </ItemGroup>\n  101    <ItemGroup>\n  102:     <Compile Include=\"ChargeDBAgent.cs\" />\n  103      <Compile Include=\"ChargeManageUI.cs\">\n  104        <SubType>UserControl</SubType>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Registration\\Registration\\RegistrationClient\\FormBookingManagement.cs:\n  256  \n  257          // 2017-03-03, Oscar added. (US38425)\n  258:         bool callChargeDLLBeforePrinting;\n  259  \n  260          RemindBookingMsgFrm remindDiag = null;\n  ...\n  942  \n  943                  // 2017-03-03, Oscar added. (US38425)\n  944:                 this.callChargeDLLBeforePrinting = RegistrationCommon.GetProfileBool(\"CallChargeDLLBeforePrinting\", \"0300\");\n  945  \n  946                  //Charge integration\n  ...\n 11326          bool CanPrintBarCode()\n 11327          {\n 11328:             if (this.callChargeDLLBeforePrinting\n 11329                  && this.m_dsRegistration != null\n 11330                  && this.m_dsRegistration.Tables.Count > 0)\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Registration\\Registration\\RegistrationClient\\FormExamApplication.cs:\n  639                  SetCCBFromText(strApplyDept, ccbApplyDept);\n  640                  SetCCBFromText(strPatientType, cbbPatientType);\n  641:                 SetCCBFromText(strIsCharge, cbbCharged);\n  642                  SetCCBFromText(strSite, ccbSite);\n  643  \n  ...\n  918              string strApplyDept = GetTextFromCCB(ccbApplyDept).Trim();\n  919              string strPatientType = GetTextFromCCB(cbbPatientType).Trim();\n  920:             string strIsCharge = GetTextFromCCB(cbbCharged).Trim();\n  921              string strSite = GetTextFromCCB(ccbSite).Trim();\n  922              ClientFrameworkBuilder.Instance.ClientStorageManager.Add(\"ExamApplication\" + \"ModalityType\", MODULEID.ToString(), strModalityType);\n  ...\n 1173  \n 1174                  InitCombobox(Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.DictionaryManager.GetDictionary(5), cbbPatientType);\n 1175:                 InitCombobox(Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.DictionaryManager.GetDictionary(70), cbbCharged);\n 1176  \n 1177                  InitCombobox(Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.DictionaryManager.GetDictionary(100), cbbExcuteDepartment);\n ....\n 1249                  }\n 1250                  ccb.CompleteFillData();\n 1251:                 cbbCharged.ComboBoxElement.TextBoxElement.TextBoxItem.ReadOnly = true;\n 1252              }\n 1253              catch (Exception ex)\n ....\n 1488                  string strApplyDept = GetTextFromCCB(ccbApplyDept).Trim();\n 1489                  string strPatientType = GetTextFromCCB(cbbPatientType).Trim();\n 1490:                 string strIsCharge = GetValueFromCCB(cbbCharged).Trim();\n 1491                  string strSite = GetValueFromCCB(ccbSite).Trim();\n 1492                  string strExecuteDepartment = GetValueFromCCB(cbbExcuteDepartment).Trim();\n ....\n 2584                  cbbPatientType.Text = \"\";\n 2585                  cbxInhospitalRegion.Text = \"\";\n 2586:                 //cbbCharged.Clear();\n 2587:                 cbbCharged.CheckedNames = \"\";\n 2588:                 cbbCharged.Text = \"\";\n 2589                  ccbSite.Text = \"\";\n 2590                  ccbSite.CheckedNames = \"\";\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Registration\\Registration\\RegistrationClient\\FormExamApplication.Designer.cs:\n   47              this.textBoxIHNo = new Carestream.CommonControls.CSTextBox();\n   48              this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();\n   49:             this.cbbCharged = new Carestream.CommonControls.CSCheckComboBox();\n   50              this.csLabel2 = new Carestream.CommonControls.CSLabel();\n   51              this.tableLayoutPanel7 = new System.Windows.Forms.TableLayoutPanel();\n   ..\n  138              ((System.ComponentModel.ISupportInitialize)(this.textBoxIHNo)).BeginInit();\n  139              this.tableLayoutPanel5.SuspendLayout();\n  140:             ((System.ComponentModel.ISupportInitialize)(this.cbbCharged)).BeginInit();\n  141              ((System.ComponentModel.ISupportInitialize)(this.csLabel2)).BeginInit();\n  142              this.tableLayoutPanel7.SuspendLayout();\n  ...\n  466              this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 52.10526F));\n  467              this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 47.89474F));\n  468:             this.tableLayoutPanel5.Controls.Add(this.cbbCharged, 1, 0);\n  469              this.tableLayoutPanel5.Controls.Add(this.csLabel2, 0, 0);\n  470              this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;\n  ...\n  476              this.tableLayoutPanel5.TabIndex = 11;\n  477              // \n  478:             // cbbCharged\n  479              // \n  480:             this.cbbCharged.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n  481              | System.Windows.Forms.AnchorStyles.Right)));\n  482:             this.cbbCharged.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.Suggest;\n  483:             this.cbbCharged.CheckedNames = \"\";\n  484:             this.cbbCharged.DataSourceNameField = null;\n  485:             this.cbbCharged.DataSourceTextField = null;\n  486:             this.cbbCharged.Font = new System.Drawing.Font(\"MS Reference Sans Serif\", 8.25F);\n  487:             this.cbbCharged.IntegralHeight = true;\n  488:             this.cbbCharged.Location = new System.Drawing.Point(101, 3);\n  489:             this.cbbCharged.Name = \"cbbCharged\";\n  490              // \n  491              // \n  492              // \n  493:             this.cbbCharged.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;\n  494:             this.cbbCharged.Seperator = ',';\n  495:             this.cbbCharged.Size = new System.Drawing.Size(86, 21);\n  496:             this.cbbCharged.TabIndex = 8;\n  497:             this.cbbCharged.TabStop = false;\n  498              // \n  499              // csLabel2\n  ...\n 1586              this.tableLayoutPanel5.ResumeLayout(false);\n 1587              this.tableLayoutPanel5.PerformLayout();\n 1588:             ((System.ComponentModel.ISupportInitialize)(this.cbbCharged)).EndInit();\n 1589              ((System.ComponentModel.ISupportInitialize)(this.csLabel2)).EndInit();\n 1590              this.tableLayoutPanel7.ResumeLayout(false);\n ....\n 1752          private Carestream.CommonControls.CSLabel csLabel3;\n 1753          private Carestream.CommonControls.CSComboBoxExx cbxInhospitalRegion;\n 1754:         private Carestream.CommonControls.CSCheckComboBox cbbCharged;\n 1755          private Carestream.CommonControls.CSButton buttonPrintList;\n 1756          private Carestream.CommonControls.CSCheckComboBox ccbSite;\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Registration\\Registration\\RegistrationClient\\FormRegList2.cs:\n   91  \n   92          // 2017-03-03, Oscar added. (US38425)\n   93:         bool callChargeDLLBeforePrinting;\n   94  \n   95          #endregion\n   ..\n  193  \n  194              // 2017-03-03, Oscar added. (US38425)\n  195:             this.callChargeDLLBeforePrinting = RegistrationCommon.GetProfileBool(\"CallChargeDLLBeforePrinting\", \"0300\");\n  196          }\n  197  \n  ...\n 2245          bool CanPrintBarCode()\n 2246          {\n 2247:             if (this.callChargeDLLBeforePrinting)\n 2248              {\n 2249                  var row = ((DataRowView)Grid.Rows[Grid.RowSel].DataBoundItem).Row;\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Registration\\Registration\\RegistrationClient\\FormRegManagement.cs:\n  252  \n  253          // 2017-03-03, Oscar added. (US38425)\n  254:         bool callChargeDLLBeforePrinting;\n  255  \n  256          private string m_strCheckPatient;\n  ...\n  938  \n  939                  // 2017-03-03, Oscar added. (US38425)\n  940:                 this.callChargeDLLBeforePrinting = RegistrationCommon.GetProfileBool(\"CallChargeDLLBeforePrinting\", \"0300\");\n  941  \n  942                  //Charge integration\n  ...\n 12215          bool CanPrintBarCode()\n 12216          {\n 12217:             if (this.callChargeDLLBeforePrinting\n 12218                  && this.m_dsRegistration != null\n 12219                  && this.m_dsRegistration.Tables.Count > 0)\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Report\\ReportListPanel\\ReportPrintPanel.cs:\n  131          bool m_bCanLoadMultiPatientImage;\n  132  \n  133:         bool callChargeDLLBeforePrinting;\n  134  \n  135          private string _reportGuid;\n  ...\n  569                  #endregion\n  570  \n  571:                 this.callChargeDLLBeforePrinting = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"CallChargeDLLBeforePrinting\", \"0300\") == \"1\";\n  572              }\n  573              catch (Exception ex)\n  ...\n 6226          bool CanPrintBarCode(string accNo, string remoteAccNo, string patientType)\n 6227          {\n 6228:             if (this.callChargeDLLBeforePrinting)\n 6229              {\n 6230                  var xml = new PrintBarCodePlugInXml\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Charge\\ChargeDepartmentMonthFlexGridViewer.cs:\n   39      namespace staff\n   40      {\n   41:         sealed internal class ChargeDepartmentMonthFlexGridViewer : StaffFlexGridViewer\n   42          {\n   43              protected override void InitColumns()\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Charge\\ChargeDepartmentMonthGraphManager.cs:\n   23  namespace Kodak.GCRIS.Client.Statistic.charge\n   24  {\n   25:     sealed class ChargeDepartmentMonthGraphManager : staff.StaffGraphManagerBase\n   26      {\n   27          void AddData(int iWeek)\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Charge\\ChargeDepartmentTimesliceFlexGridViewer.cs:\n   39      namespace staff\n   40      {\n   41:         sealed class ChargeDepartmentTimesliceFlexGridViewer : StaffFlexGridViewer\n   42          {\n   43              protected override void InitColumns()\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Charge\\ChargeDepartmentTimesliceGraphManager.cs:\n   25      namespace charge\n   26      {\n   27:         sealed class ChargeDepartmentTimesliceGraphManager : staff.StaffGraphManagerBase\n   28          {\n   29              protected override void PrepareData()\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Charge\\ChargeDepartmentYearFlexGridViewer.cs:\n   39      namespace staff\n   40      {\n   41:         sealed internal class ChargeDepartmentYearFlexGridViewer : StaffFlexGridViewer\n   42          {\n   43              protected override void InitColumns()\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Charge\\ChargeDepartmentYearGraphManager.cs:\n   23  namespace Kodak.GCRIS.Client.Statistic.charge\n   24  {\n   25:     sealed class ChargeDepartmentYearGraphManager : staff.StaffGraphManagerBase\n   26      {\n   27          protected override void PrepareData()\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Charge\\ChargeWebServiceActionManager.cs:\n   46  \n   47              //        Context oContext = new Context();\n   48:             //        oContext.MessageName = \"InitChargeDataLoad\";\n   49:             //        oContext.Parameters = \"InitChargeDataLoad=\";\n   50  \n   51              //        DataSetActionResult oActioinResult = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(oContext) as DataSetActionResult;\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Staff.cs:\n  822  \n  823              OnQuery((int)StaffFormQueryModeEnum.DepartmentYear, \"StaffYearStatistic\",\n  824:                 \"Kodak.GCRIS.Client.Statistic.staff.ChargeDepartmentYearFlexGridViewer\");\n  825          }\n  826          private void DepartmentYearQuery()\n  ...\n  838  \n  839              OnQuery((int)StaffFormQueryModeEnum.DepartmentMonth, \"StaffMonthStatistic\",\n  840:                 \"Kodak.GCRIS.Client.Statistic.staff.ChargeDepartmentMonthFlexGridViewer\");\n  841          }\n  842          private void DepartmentMonthQuery()\n  ...\n  855  \n  856              OnQuery((int)StaffFormQueryModeEnum.DepartmentTimeSlice, \"StaffTimeSliceStatistic\",\n  857:                 \"Kodak.GCRIS.Client.Statistic.staff.ChargeDepartmentTimesliceFlexGridViewer\");\n  858          }\n  859  \n  ...\n 3038                      if (this.radioButtonYear.Checked)\n 3039                      {\n 3040:                         szOut = \"Kodak.GCRIS.Client.Statistic.charge.ChargeDepartmentYearGraphManager\";\n 3041                      }\n 3042                      else if (this.radioButtonMonth.Checked)\n 3043                      {\n 3044:                         szOut = \"Kodak.GCRIS.Client.Statistic.charge.ChargeDepartmentMonthGraphManager\";\n 3045                      }\n 3046                      else\n 3047                      {\n 3048:                         szOut = \"Kodak.GCRIS.Client.Statistic.charge.ChargeDepartmentTimesliceGraphManager\";\n 3049                      }\n 3050                  }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Statistic.csproj:\n  159    </ItemGroup>\n  160    <ItemGroup>\n  161:     <Compile Include=\"Charge\\ChargeDepartmentMonthFlexGridViewer.cs\" />\n  162:     <Compile Include=\"Charge\\ChargeDepartmentMonthGraphManager.cs\" />\n  163:     <Compile Include=\"Charge\\ChargeDepartmentTimesliceFlexGridViewer.cs\" />\n  164:     <Compile Include=\"Charge\\ChargeDepartmentTimesliceGraphManager.cs\" />\n  165:     <Compile Include=\"Charge\\ChargeDepartmentYearGraphManager.cs\" />\n  166      <Compile Include=\"Charge\\ChargeFlexGridViewer.cs\" />\n  167      <Compile Include=\"Charge\\ChargeFormEventArgs.cs\" />\n  ...\n  174      <Compile Include=\"Charge\\ChargeShortcutStrBuilder.cs\" />\n  175      <Compile Include=\"Charge\\ChargeWebServiceActionManager.cs\" />\n  176:     <Compile Include=\"Charge\\ChargeDepartmentYearFlexGridViewer.cs\" />\n  177      <Compile Include=\"ChartManager.cs\">\n  178        <SubType>Component</SubType>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\Statistic\\Statistic\\Statistic\\Utility.cs:\n 1454                      \"Kodak.GCRIS.Client.Statistic.staff.DepartmentTimeSliceGridViewer\",\n 1455                      \"Kodak.GCRIS.Client.Statistic.staff.PersonnalTimeSliceGridViewer\",\n 1456:                     \"Kodak.GCRIS.Client.Statistic.staff.ChargeDepartmentYearFlexGridViewer\",\n 1457                      \"Kodak.GCRIS.Client.Statistic.staff.ChargePersonnalYearFlexGridViewer\",\n 1458:                     \"Kodak.GCRIS.Client.Statistic.staff.ChargeDepartmentMonthFlexGridViewer\",\n 1459                      \"Kodak.GCRIS.Client.Statistic.staff.ChargePersonnalMonthFlexGridViewer\",\n 1460:                     \"Kodak.GCRIS.Client.Statistic.staff.ChargeDepartmentTimesliceFlexGridViewer\",\n 1461                      \"Kodak.GCRIS.Client.Statistic.staff.ChargePersonnalTimesliceFlexGridViewer\"))\n 1462                  szFlexViewerType = \"Kodak.GCRIS.Client.Statistic.StaffFlexGridViewer2\";\n ....\n 1491                      \"Kodak.GCRIS.Client.Statistic.staff.StaffDepartmentMonthGraphManager\",\n 1492                      \"Kodak.GCRIS.Client.Statistic.staff.StaffDepartmentTimesliceGraphManager\",\n 1493:                     \"Kodak.GCRIS.Client.Statistic.charge.ChargeDepartmentYearGraphManager\",\n 1494:                     \"Kodak.GCRIS.Client.Statistic.charge.ChargeDepartmentMonthGraphManager\",\n 1495:                     \"Kodak.GCRIS.Client.Statistic.charge.ChargeDepartmentTimesliceGraphManager\"))\n 1496                  szType = \"Kodak.GCRIS.Client.Statistic.staff.StaffGraphManagerBase2\";\n 1497  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Common\\ClientCommon\\HISConProxy.cs:\n 1114          private string chargeItemSourceField;\n 1115          \n 1116:         private string isItemChargedField;\n 1117          \n 1118          /// <remarks/>\n ....\n 1178          /// <remarks/>\n 1179          [System.Xml.Serialization.XmlAttributeAttribute()]\n 1180:         public string IsItemCharged {\n 1181              get {\n 1182:                 return this.isItemChargedField;\n 1183              }\n 1184              set {\n 1185:                 this.isItemChargedField = value;\n 1186              }\n 1187          }\n ....\n 1200          private string totalChargeField;\n 1201          \n 1202:         private string isChargedField;\n 1203          \n 1204          /// <remarks/>\n ....\n 1225          /// <remarks/>\n 1226          [System.Xml.Serialization.XmlAttributeAttribute()]\n 1227:         public string IsCharged {\n 1228              get {\n 1229:                 return this.isChargedField;\n 1230              }\n 1231              set {\n 1232:                 this.isChargedField = value;\n 1233              }\n 1234          }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Config\\GCRIS-config.xml:\n  212      <action message=\"InitFilmDataLoad\" type=\"Kodak.GCRIS.Server.Statistic.Action.InitFilmDataLoadAction\" />\n  213      <action message=\"FilmStaisticQuery\" type=\"Kodak.GCRIS.Server.Statistic.Action.FilmStaisticQueryAction\" />\n  214:     <action message=\"InitChargeDataLoad\" type=\"Kodak.GCRIS.Server.Statistic.Action.InitChargeDataLoadAction\" />\n  215      <action message=\"ChargeStaisticQuery\" type=\"Kodak.GCRIS.Server.Statistic.Action.ChargeStaisticQueryAction\" />\n  216      <action message=\"InitOrderDataLoad\" type=\"Kodak.GCRIS.Server.Statistic.Action.InitOrderDataLoadAction\" />\n  ...\n  442      <!-- EK_HI00063904 -->\n  443      <action message=\"QC_GetRequisitionInfo\" type=\"Kodak.GCRIS.Server.QualityControl.Action.QualityControlAction\" />\n  444:     <!--QC ChargeDataManagement -->\n  445      <action message=\"QC_ChargeQueryOrderList\" type=\"Kodak.GCRIS.Server.QualityControl.Action.QualityControlAction\" />\n  446      <action message=\"QC_ChargeQueryItemList\" type=\"Kodak.GCRIS.Server.QualityControl.Action.QualityControlAction\" />\n  ...\n  528      <action message=\"SetPathologyTrack\" type =\"Kodak.GCRIS.Server.PathologyTrack.Action.PathologyTrackAction\"/>\n  529      <action message=\"SetPathologyReport\" type =\"Kodak.GCRIS.Server.PathologyTrack.Action.PathologyTrackAction\"/>\n  530:     <action message=\"SetDischargedSummary\" type =\"Kodak.GCRIS.Server.PathologyTrack.Action.PathologyTrackAction\"/>\n  531      <action message=\"PathologyJudge\" type =\"Kodak.GCRIS.Server.PathologyTrack.Action.PathologyTrackAction\"/>\n  532      <action message=\"GetReportAndSummary\" type =\"Kodak.GCRIS.Server.PathologyTrack.Action.PathologyTrackAction\"/>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\ClientFrameWork\\Business\\ClientFrameWorkBusiness\\HippaLog.cs:\n   55          }\n   56  \n   57:         public int AuditChargeRecordEvtMsg(string ActionCode, string AccessionNumber, string ObjectID, string ObjectName, string ChargeID, string ChargeDescription, string ObjectDescription, bool isSuccess)\n   58          {\n   59:             return DaoInstanceFactory.GetInstance().AuditChargeRecordEvtMsg(ActionCode, AccessionNumber, ObjectID, ObjectName, ChargeID, ChargeDescription, ObjectDescription, isSuccess);\n   60          }\n   61  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\ClientFrameWork\\DAO\\Kodak.GCRIS.Server.DAO.ClientFramework\\AbstractImplement.cs:\n 2600          }\n 2601  \n 2602:         public virtual int AuditChargeRecordEvtMsg(string ActionCode, string AccessionNumber, string ObjectID, string ObjectName, string ChargeID, string ChargeDescription, string ObjectDescription, bool isSuccess)\n 2603          {\n 2604              if (!IsHipaaEnable())\n ....\n 2663                  oKodakDAL.Parameters.AddChar(\"@PartObjectName\", ObjectName);\n 2664                  oKodakDAL.Parameters.AddChar(\"@PartObjectDetail\",\n 2665:                     string.Format(\"UserName:{0},IP:{1},MachineName:{2},MACAddress:{3},Location:{4},Patient:{5},AccessionNumber:{6},ChargeID:{7},ChargeDescription:{8},Action:{9}\",\n 2666:                     strUserName, strIPAddress, strMachineName, strMACAddress, strLocation, ObjectName, AccessionNumber, ChargeID, ChargeDescription, strEventTypeCode));\n 2667                  oKodakDAL.Parameters.AddChar(\"@Comments\", ObjectDescription);\n 2668                  oKodakDAL.Parameters.AddChar(\"@Domain\", strDomain);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\ClientFrameWork\\DAO\\Kodak.GCRIS.Server.DAO.ClientFramework\\IFrameWorkDAO.cs:\n   56          int AuditPatientCareAssignMsg(string ActionCode, string AccessionNumber, string ReportID, string ReportName, string ObjctID, string ObjectName, string ObjectDescription, bool isSuccess);\n   57  \n   58:         int AuditChargeRecordEvtMsg(string ActionCode, string AccessionNumber, string ObjectID, string ObjectName, string ChargeID, string ChargeDescription, string ObjectDescription, bool isSuccess);\n   59          int AuditSuppilesRecordEvtMsg(string ActionCode, string strEventTypeCode, string ObjectID, string ObjectName, string SupplierID, string SupplierDescription, string ObjectDescription, bool isSuccess);\n   60          #endregion\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\Kodak.GCRIS.Server.Utilities\\HippaLogTool.cs:\n   47              return hippaservice.AuditPatientCareAssignMsg(ActionCode, AccessionNumber, ReportID, ReportName, ObjectID, ObjectName, ObjectDescription, isSuccess);\n   48          }\n   49:         public static int AuditChargeRecordEvtMsg(string ActionCode, string AccessionNumber, string ObjectID, string ObjectName, string ChargeID, string ChargeDescription, string ObjectDescription, bool isSuccess)\n   50          {\n   51:             return hippaservice.AuditChargeRecordEvtMsg(ActionCode, AccessionNumber, ObjectID, ObjectName, ChargeID, ChargeDescription, ObjectDescription, isSuccess);\n   52          }\n   53  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\PathologyTrack\\PathologyTrackAction\\PathologyTrackAction.cs:\n   51                          break;\n   52                      }\n   53:                 case \"SetDischargedSummary\":\n   54                      {\n   55                          string errorinfo = \"\";\n   56:                         bar.Result = instance.SetDischargedSummary((Kodak.GCRIS.Common.Model.Oam.PathologyTrackModel)context.Model, ref errorinfo);\n   57                          bar.ReturnMessage = errorinfo;\n   58                          break;\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\PathologyTrack\\PathologyTrackBusiness\\Impl\\PathologyTrackImpl.cs:\n   45              return instance.SetPathologyReport(model, ref errorinfo);\n   46          }\n   47:         public bool SetDischargedSummary(Kodak.GCRIS.Common.Model.Oam.PathologyTrackModel model, ref string errorinfo)\n   48          {\n   49:             return instance.SetDischargedSummary(model, ref errorinfo);\n   50          }\n   51          public bool PathologyJudge(string param, ref string errorinfo)\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\PathologyTrack\\PathologyTrackBusiness\\IPathologyTrackBusiness.cs:\n   12          bool SetPathologyTrack(string param, ref string errorinfo);\n   13          bool SetPathologyReport(Kodak.GCRIS.Common.Model.Oam.PathologyTrackModel model, ref string errorinfo);\n   14:         bool SetDischargedSummary(Kodak.GCRIS.Common.Model.Oam.PathologyTrackModel model, ref string errorinfo);\n   15          bool PathologyJudge(string param, ref string errorinfo);\n   16          bool GetReportAndSummary(string param, ref DataSet ds, ref string errorinfo);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\PathologyTrack\\PathologyTrackDAO\\Impl\\AbstractPathologyTrackImpl.cs:\n   39                                  \"(SELECT Text from tDictionaryValue where tDictionaryValue.Value=a.Research and tDictionaryValue.Tag=70) as Research,\" +\n   40                               \" stuff((select '@'+Report from tPathologyReport where PatientID=a.PatientID for xml path('')),1,1,'') as PathologyReport,\" +\n   41:                              \" stuff((select '@'+Summary from tDischargedSummary where PatientID=a.PatientID for xml path('')),1,1,'') as DischargedSummary from tPathologyTrack a where \" +\n   42                                  where +\n   43                                  \" group by a.[PathologyID],a.[PatientID] ,a.[PatientName],a.[AccNo],a.[Gender],a.[Birthday],a.[Diagnose],a.[CreatorName],a.[CreatorGuid],a.[Judge],a.[CreateDt],a.[ReportGuid],a.[ReportName],Teaching,Research \";\n   ..\n  268              return true;\n  269          }\n  270:         public virtual bool SetDischargedSummary(Kodak.GCRIS.Common.Model.Oam.PathologyTrackModel model, ref string errorinfo)\n  271          {\n  272              try\n  ...\n  282                  {\n  283  \n  284:                     string sql = string.Format(\"insert into tDischargedSummary(PatientID,Summary,GenerateDt) values('{0}','{1}','{2}')\", model.PatientID, model.Value.Replace(\"'\", \"''\"), model.GenerateTime);\n  285  \n  286                      oKodak.ExecuteNonQuery(sql);\n  ...\n  336                      ds.Tables.Add(dt);\n  337  \n  338:                     sql = string.Format(\"select * from tDischargedSummary where PatientID='{0}'  order by generatedt\", PatientID);\n  339                      DataTable dt1 = oKodak.ExecuteQuery(sql);\n  340:                     dt1.TableName = \"DischargedSummary\";\n  341                      ds.Tables.Add(dt1);\n  342  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\PathologyTrack\\PathologyTrackDAO\\IPathologyTrackDAO.cs:\n   12          bool SetPathologyTrack(string param, ref string errorinfo);\n   13          bool SetPathologyReport(Kodak.GCRIS.Common.Model.Oam.PathologyTrackModel model, ref string errorinfo);\n   14:         bool SetDischargedSummary(Kodak.GCRIS.Common.Model.Oam.PathologyTrackModel model, ref string errorinfo);\n   15          bool PathologyJudge(string param, ref string errorinfo);\n   16          bool GetReportAndSummary(string param, ref DataSet ds, ref string errorinfo);\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\QualityControl\\DAO\\Impl\\AbstractDBProvider.cs:\n 6980  \n 6981  \n 6982:         private void WriteHippaLog(string action, string actionDetail, string orderGuid, string chargeID, string chargeDescription, bool isSuccess)\n 6983          {\n 6984              using (KodakDAL oKodak = new KodakDAL())\n ....\n 6992                  {\n 6993                      Kodak.GCRIS.Server.Utilities.HippaLogTool.HippaLogTool.AuditChargeRecordEvtMsg(\n 6994:                         action, Convert.ToString(dt.Rows[0][\"AccNo\"]), Convert.ToString(dt.Rows[0][\"PatientID\"]), Convert.ToString(dt.Rows[0][\"LocalName\"]), chargeID, chargeDescription, actionDetail, isSuccess);\n 6995                  }\n 6996                  //US29419:IIS out of memory\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\Statistic_Server\\Action\\InitChargeDataLoadAction.cs:\n   30  namespace Kodak.GCRIS.Server.Statistic.Action\n   31  {\n   32:     class InitChargeDataLoadAction:BaseAction\n   33      {\n   34          public override BaseActionResult Execute(Context context)\n   ..\n   46                      oretresult = new DataSetActionResult();\n   47  \n   48:                     oretresult.DataSetData = oManager.InitChargeDataLoad(context.Parameters);\n   49                      oretresult.Result = true;\n   50                      oretresult.ReturnMessage = \"OK\";\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\Statistic_Server\\BF\\StaticticManager.cs:\n  133                  return resultSet;\n  134              }\n  135:             public DataSet InitChargeDataLoad(string szParams)\n  136              {\n  137                  try\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Server\\Statistic_Server\\Statistic_Server.csproj:\n   74      <Compile Include=\"Action\\FilmStaisticQueryAction.cs\" />\n   75      <Compile Include=\"Action\\IllnessStaisticQueryAction.cs\" />\n   76:     <Compile Include=\"Action\\InitChargeDataLoadAction.cs\" />\n   77      <Compile Include=\"Action\\InitDeviceDataLoadAction.cs\" />\n   78      <Compile Include=\"Action\\InitDiagnosticDataLoadActon.cs\" />\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Service.Tools\\GCRISUpgrade\\Script\\RIS20\\Update1.sql:\n  356  \t\t\n  357  \t\tDECLARE @GWGuid nvarchar(128)\n  358: \t\tDECLARE @Charged nvarchar(8)\n  359          \n  360          DECLARE cursor1 CURSOR FAST_FORWARD FOR   SELECT A.ProcedureCode,A.ExamSystem,A.Modality,A.Charge,A.Registrar,A.Technician,A.TechDoctor,A.TechNurse,A.Status,A.RegisterDt,\n  ...\n  379  \t\t\t\n  380              if(@IsCharge<>0)\n  381: \t\t\t\tset @Charged='Y'\n  382  \t\t\telse\n  383: \t\t\t\tset @Charged='N'\t\n  384  \t\t\t--Order\n  385  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  386:                     VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  387  \t\t\t\n  388  \t\t     \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Service.Tools\\GCRISUpgrade\\Script\\RIS20\\Update2.sql:\n  977  \t\n  978  \tDECLARE @GWGuid nvarchar(128)\n  979: \tDECLARE @Charged nvarchar(8)\n  980          \n  981  \n  ...\n 1020  \t\t\n 1021          if(@IsCharge<>0)\n 1022: \t\t\tset @Charged='Y'\n 1023  \t\telse\n 1024: \t\t\tset @Charged='N'\t\n 1025  \t\t--Order\n 1026  \t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1027:                 VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1028  \t\t\n 1029  \t     \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\ThirdPartyCompont\\CefSharp-58\\ipch\\cefsharp.browsersubprocess.core-7d636e67\\cefsharp.browsersubprocess.ipch:\n    <binary>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\ThirdPartyCompont\\CefSharp-58\\ipch\\cefsharp.core-7b39a431\\cefsharp.ipch:\n    <binary>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\ThirdPartyCompont\\CefSharp-58\\Runtime\\cef.pak:\n    <binary>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\2.2.2.04 sp.sql:\n  413  \t\n  414  \tDECLARE @GWGuid nvarchar(128)\n  415: \tDECLARE @Charged nvarchar(8)\n  416          \n  417  \tDECLARE cursor1 CURSOR FAST_FORWARD FOR   SELECT A.ProcedureCode,A.ExamSystem,A.Modality,A.Charge,A.Registrar,A.Technician,A.TechDoctor,A.TechNurse,A.Status,A.RegisterDt,\n  ...\n  454  \t\t\n  455  \t\tif(@IsCharge<>0)\n  456: \t\t\tset @Charged='Y'\n  457  \t\telse\n  458: \t\t\tset @Charged='N'\t\n  459  \t\t--Order\n  460  \t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  461: \t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  462  \t\t\n  463  \t     \n  ...\n  601  \t\n  602  \tDECLARE @GWGuid nvarchar(128)\n  603: \tDECLARE @Charged nvarchar(8)\n  604          \n  605  \tDECLARE cursor1 CURSOR FAST_FORWARD FOR   SELECT A.ProcedureCode,A.ExamSystem,A.Modality,A.Charge,A.Registrar,A.Technician,A.TechDoctor,A.TechNurse,A.Status,A.RegisterDt,\n  ...\n  642  \t\t\n  643  \t\tif(@IsCharge<>0)\n  644: \t\t\tset @Charged='Y'\n  645  \t\telse\n  646: \t\t\tset @Charged='N'\t\n  647  \t\t--Order\n  648  \t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  649: \t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@LocalStudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  650  \t\t\n  651  \t     \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.1.0.sql:\n  901  \t\n  902  \tDECLARE @GWGuid nvarchar(128)\n  903: \tDECLARE @Charged nvarchar(8)\n  904  \tDECLARE @IsExistImage int\n  905  \n  ...\n  950  \t\t\t\n  951  \t\t\tif(@IsCharge<>0)\n  952: \t\t\t\tset @Charged='Y'\n  953  \t\t\telse\n  954: \t\t\t\tset @Charged='N'\t\n  955  \t\t\t--Order\n  956  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  957: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  958  \t\t\t\n  959  notanyaction:\n  ...\n 1094  \t\n 1095  \tDECLARE @GWGuid nvarchar(128)\n 1096: \tDECLARE @Charged nvarchar(8)\n 1097      DECLARE @IsExistImage int\n 1098      \n ....\n 1133  \t\t\t\n 1134  \t\t\tif(@IsCharge<>0)\n 1135: \t\t\t\tset @Charged='Y'\n 1136  \t\t\telse\n 1137: \t\t\t\tset @Charged='N'\t\n 1138  \t\t\t--Order\n 1139  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1140: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1141  \t\t\t\n 1142  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.10.0.sql:\n 1391   \n 1392   DECLARE @GWGuid nvarchar(128)\n 1393:  DECLARE @Charged nvarchar(8)\n 1394      DECLARE @IsExistImage int\n 1395      \n ....\n 1454       VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                               \n 1455     if(@IsCharge<>0)\n 1456:     set @Charged='Y'\n 1457     else\n 1458:     set @Charged='N' \n 1459     --Order\n 1460     INSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1461:      VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1462     \n 1463  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.13.0.sql:\n  246     Price                float                null,\n  247     Amount               int                  null,\n  248:    IsItemCharged        int                  null,\n  249     constraint PK_TREQUESTCHARGE primary key (RequestChargeID)\n  250  )\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.2.0.sql:\n  495  \t\n  496  \tDECLARE @GWGuid nvarchar(128)\n  497: \tDECLARE @Charged nvarchar(8)\n  498      DECLARE @IsExistImage int\n  499          \n  ...\n  542  \t\t\t\n  543  \t\t\tif(@IsCharge<>0)\n  544: \t\t\t\tset @Charged='Y'\n  545  \t\t\telse\n  546: \t\t\t\tset @Charged='N'\t\n  547  \t\t\t--Order\n  548  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  549: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  550  \t\t\t\n  551  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.4.0.sql:\n  544  \t\n  545  \tDECLARE @GWGuid nvarchar(128)\n  546: \tDECLARE @Charged nvarchar(8)\n  547  \tDECLARE @IsExistImage int\n  548  \n  ...\n  596  \t\t\t\n  597  \t\t\tif(@IsCharge<>0)\n  598: \t\t\t\tset @Charged='Y'\n  599  \t\t\telse\n  600: \t\t\t\tset @Charged='N'\t\n  601  \t\t\t--Order\n  602  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  603: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  604  \t\t\t\n  605  notanyaction:\n  ...\n  741  \t\n  742  \tDECLARE @GWGuid nvarchar(128)\n  743: \tDECLARE @Charged nvarchar(8)\n  744      DECLARE @IsExistImage int\n  745      \n  ...\n  783  \t\t\t\n  784  \t\t\tif(@IsCharge<>0)\n  785: \t\t\t\tset @Charged='Y'\n  786  \t\t\telse\n  787: \t\t\t\tset @Charged='N'\t\n  788  \t\t\t--Order\n  789  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  790: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  791  \t\t\t\n  792  notanyaction:\n  ...\n 1014  \t\n 1015  \tDECLARE @GWGuid nvarchar(128)\n 1016: \tDECLARE @Charged nvarchar(8)\n 1017      DECLARE @IsExistImage int\n 1018          \n ....\n 1062  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1063  \t\t\tif(@IsCharge<>0)\n 1064: \t\t\t\tset @Charged='Y'\n 1065  \t\t\telse\n 1066: \t\t\t\tset @Charged='N'\t\n 1067  \t\t\t--Order\n 1068  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1069: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1070  \t\t\t\n 1071  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.5.0.sql:\n  624  \t\n  625  \tDECLARE @GWGuid nvarchar(128)\n  626: \tDECLARE @Charged nvarchar(8)\n  627  \tDECLARE @IsExistImage int\n  628  \n  ...\n  676  \t\t\t\n  677  \t\t\tif(@IsCharge<>0)\n  678: \t\t\t\tset @Charged='Y'\n  679  \t\t\telse\n  680: \t\t\t\tset @Charged='N'\t\n  681  \t\t\t--Order\n  682  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  683: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  684  \t\t\t\n  685  notanyaction:\n  ...\n  828  \t\n  829  \tDECLARE @GWGuid nvarchar(128)\n  830: \tDECLARE @Charged nvarchar(8)\n  831      DECLARE @IsExistImage int\n  832      \n  ...\n  870  \t\t\t\n  871  \t\t\tif(@IsCharge<>0)\n  872: \t\t\t\tset @Charged='Y'\n  873  \t\t\telse\n  874: \t\t\t\tset @Charged='N'\t\n  875  \t\t\t--Order\n  876  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  877: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  878  \t\t\t\n  879  notanyaction:\n  ...\n 1107  \t\n 1108  \tDECLARE @GWGuid nvarchar(128)\n 1109: \tDECLARE @Charged nvarchar(8)\n 1110      DECLARE @IsExistImage int\n 1111          \n ....\n 1155  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1156  \t\t\tif(@IsCharge<>0)\n 1157: \t\t\t\tset @Charged='Y'\n 1158  \t\t\telse\n 1159: \t\t\t\tset @Charged='N'\t\n 1160  \t\t\t--Order\n 1161  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1162: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1163  \t\t\t\n 1164  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.6.0.sql:\n  639  \t\n  640  \tDECLARE @GWGuid nvarchar(128)\n  641: \tDECLARE @Charged nvarchar(8)\n  642  \tDECLARE @IsExistImage int\n  643  \n  ...\n  691  \t\t\t\n  692  \t\t\tif(@IsCharge<>0)\n  693: \t\t\t\tset @Charged='Y'\n  694  \t\t\telse\n  695: \t\t\t\tset @Charged='N'\t\n  696  \t\t\t--Order\n  697  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  698: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  699  \t\t\t\n  700  notanyaction:\n  ...\n  844  \t\n  845  \tDECLARE @GWGuid nvarchar(128)\n  846: \tDECLARE @Charged nvarchar(8)\n  847      DECLARE @IsExistImage int\n  848      \n  ...\n  886  \t\t\t\n  887  \t\t\tif(@IsCharge<>0)\n  888: \t\t\t\tset @Charged='Y'\n  889  \t\t\telse\n  890: \t\t\t\tset @Charged='N'\t\n  891  \t\t\t--Order\n  892  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  893: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  894  \t\t\t\n  895  notanyaction:\n  ...\n 1125  \t\n 1126  \tDECLARE @GWGuid nvarchar(128)\n 1127: \tDECLARE @Charged nvarchar(8)\n 1128      DECLARE @IsExistImage int\n 1129          \n ....\n 1173  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1174  \t\t\tif(@IsCharge<>0)\n 1175: \t\t\t\tset @Charged='Y'\n 1176  \t\t\telse\n 1177: \t\t\t\tset @Charged='N'\t\n 1178  \t\t\t--Order\n 1179  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1180: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1181  \t\t\t\n 1182  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.7.0.sql:\n  669  \t\n  670  \tDECLARE @GWGuid nvarchar(128)\n  671: \tDECLARE @Charged nvarchar(8)\n  672  \tDECLARE @IsExistImage int\n  673  \n  ...\n  728  \t\t\t\n  729  \t\t\tif(@IsCharge<>0)\n  730: \t\t\t\tset @Charged='Y'\n  731  \t\t\telse\n  732: \t\t\t\tset @Charged='N'\t\n  733  \t\t\t--Order\n  734  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  735: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  736  \t\t\t\n  737  notanyaction:\n  ...\n  880  \t\n  881  \tDECLARE @GWGuid nvarchar(128)\n  882: \tDECLARE @Charged nvarchar(8)\n  883      DECLARE @IsExistImage int\n  884  \n  ...\n  930  \t\t\t\n  931  \t\t\tif(@IsCharge<>0)\n  932: \t\t\t\tset @Charged='Y'\n  933  \t\t\telse\n  934: \t\t\t\tset @Charged='N'\t\n  935  \t\t\t--Order\n  936  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  937: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  938  \t\t\t\n  939  notanyaction:\n  ...\n 1168  \t\n 1169  \tDECLARE @GWGuid nvarchar(128)\n 1170: \tDECLARE @Charged nvarchar(8)\n 1171      DECLARE @IsExistImage int\n 1172          \n ....\n 1223  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1224  \t\t\tif(@IsCharge<>0)\n 1225: \t\t\t\tset @Charged='Y'\n 1226  \t\t\telse\n 1227: \t\t\t\tset @Charged='N'\t\n 1228  \t\t\t--Order\n 1229  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1230: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1231  \t\t\t\n 1232  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.8.0.sql:\n  973  \t\n  974  \tDECLARE @GWGuid nvarchar(128)\n  975: \tDECLARE @Charged nvarchar(8)\n  976  \tDECLARE @IsExistImage int\n  977  \n  ...\n 1032  \t\t\t\n 1033  \t\t\tif(@IsCharge<>0)\n 1034: \t\t\t\tset @Charged='Y'\n 1035  \t\t\telse\n 1036: \t\t\t\tset @Charged='N'\t\n 1037  \t\t\t--Order\n 1038  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1039: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1040  \t\t\t\n 1041  notanyaction:\n ....\n 1181  \t\n 1182  \tDECLARE @GWGuid nvarchar(128)\n 1183: \tDECLARE @Charged nvarchar(8)\n 1184      DECLARE @IsExistImage int\n 1185  \n ....\n 1231  \t\t\t\n 1232  \t\t\tif(@IsCharge<>0)\n 1233: \t\t\t\tset @Charged='Y'\n 1234  \t\t\telse\n 1235: \t\t\t\tset @Charged='N'\t\n 1236  \t\t\t--Order\n 1237  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1238: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1239  \t\t\t\n 1240  notanyaction:\n ....\n 1467  \t\n 1468  \tDECLARE @GWGuid nvarchar(128)\n 1469: \tDECLARE @Charged nvarchar(8)\n 1470      DECLARE @IsExistImage int\n 1471          \n ....\n 1522  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1523  \t\t\tif(@IsCharge<>0)\n 1524: \t\t\t\tset @Charged='Y'\n 1525  \t\t\telse\n 1526: \t\t\t\tset @Charged='N'\t\n 1527  \t\t\t--Order\n 1528  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1529: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1530  \t\t\t\n 1531  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.1.S03.0.sql:\n  549   \n  550   DECLARE @GWGuid nvarchar(128)\n  551:  DECLARE @Charged nvarchar(8)\n  552      DECLARE @IsExistImage int\n  553          DECLARE @PreStatus int\n  ...\n  619       VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                               \n  620     if(@IsCharge<>0)\n  621:     set @Charged='Y'\n  622     else\n  623:     set @Charged='N' \n  624     --Order\n  625     INSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  626:      VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  627     \n  628  notanyaction:\n  ...\n  767  \t\n  768  \tDECLARE @GWGuid nvarchar(128)\n  769: \tDECLARE @Charged nvarchar(8)\n  770      DECLARE @IsExistImage int\n  771      DECLARE @PreStatus int\n  ...\n  824  \t\t\t\n  825  \t\t\tif(@IsCharge<>0)\n  826: \t\t\t\tset @Charged='Y'\n  827  \t\t\telse\n  828: \t\t\t\tset @Charged='N'\t\n  829  \t\t\t--Order\n  830  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  831: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  832  \t\t\t\n  833  notanyaction:\n  ...\n  962  \t\n  963  \tDECLARE @GWGuid nvarchar(128)\n  964: \tDECLARE @Charged nvarchar(8)\n  965  \tDECLARE @IsExistImage int\n  966  \tDECLARE @PreStatus int\n  ...\n 1030  \t\t\t\n 1031  \t\t\tif(@IsCharge<>0)\n 1032: \t\t\t\tset @Charged='Y'\n 1033  \t\t\telse\n 1034: \t\t\t\tset @Charged='N'\t\n 1035  \t\t\t--Order\n 1036  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1037: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1038  \t\t\t\n 1039  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.1.S05.0.sql:\n  100  GO\n  101  \n  102: if not exists (select * from sys.tables where object_id = object_id('[dbo].[tDischargedSummary]') and OBJECTPROPERTY(object_id, 'IsUserTable') = 1)\n  103: CREATE TABLE [dbo].[tDischargedSummary](\n  104  \t[SummaryID] [uniqueidentifier] NOT NULL DEFAULT newsequentialid(),\n  105  \t[PatientID] [nvarchar](64) NULL,\n  ...\n  112  \n  113  GO\n  114: if not exists (select * from sys.indexes where object_id = object_id('[dbo].[tDischargedSummary]') and INDEXPROPERTY(object_id, 'ix_tdischargedsummary_patientid', 'IndexID') = index_id)\n  115: CREATE NONCLUSTERED INDEX [ix_tdischargedsummary_patientid] ON [dbo].[tDischargedSummary]\n  116  (\n  117  \t[PatientID] ASC\n  ...\n 1306  END\n 1307  go\n 1308: if exists(select 1 from dbo.sysobjects where id = object_id(N'[dbo].[usp_externalSetDischargedSummary]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)\n 1309  begin\n 1310: drop procedure [dbo].[usp_externalSetDischargedSummary]\n 1311  end\n 1312  go\n 1313: CREATE PROCEDURE [dbo].[usp_externalSetDischargedSummary]\n 1314      @PatientID nvarchar(64),\n 1315  \t@Summary nvarchar(max)\n ....\n 1319  \tif len(ltrim(rtrim(@PatientID)))=0\n 1320  \tbegin\n 1321: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary: Patient id is null') \n 1322  \t\treturn\n 1323  \tend\n 1324  \tif len(ltrim(rtrim(@Summary)))=0\n 1325  \tbegin\n 1326: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary:Summary is null') \n 1327  \t\treturn\n 1328  \tend\n 1329  \t\t\n 1330: \tinsert into tDischargedSummary([PatientID],[Summary]) values(@PatientID,@Summary)\n 1331  \t\n 1332  END\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.1.S06.0.sql:\n   59  go\n   60  \n   61: if not exists (select * from sys.columns where name='GenerateDt' and object_id=OBJECT_ID('tDischargedSummary'))\n   62: \talter table tDischargedSummary add GenerateDt datetime default(getdate()) NULL\n   63  go\n   64  if not exists (select * from sys.columns where name='GenerateDt' and object_id=OBJECT_ID('tPathologyReport'))\n   ..\n 1300  \n 1301  \n 1302: ALTER PROCEDURE [dbo].[usp_externalSetDischargedSummary]\n 1303      @PatientID nvarchar(64),\n 1304  \t@Summary nvarchar(max),\n ....\n 1313  \tif len(ltrim(rtrim(@PatientID)))=0\n 1314  \tbegin\n 1315: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary: Patient id is null') \n 1316  \t\treturn\n 1317  \tend\n 1318  \tif len(ltrim(rtrim(@Summary)))=0\n 1319  \tbegin\n 1320: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary:Summary is null') \n 1321  \t\treturn\n 1322  \tend\n 1323  \t\t\n 1324: \tinsert into tDischargedSummary([PatientID],[Summary],[GenerateDt]) values(@PatientID,@Summary,@GenerateDt)\n 1325  \t\n 1326  END\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.1.S07.0.sql:\n  359  \t\n  360  \tDECLARE @GWGuid nvarchar(128)\n  361: \tDECLARE @Charged nvarchar(8)\n  362  \tDECLARE @IsExistImage int\n  363  \tDECLARE @PreStatus int\n  ...\n  431  \t\t\t\n  432  \t\t\tif(@IsCharge<>0)\n  433: \t\t\t\tset @Charged='Y'\n  434  \t\t\telse\n  435: \t\t\t\tset @Charged='N'\t\n  436  \t\t\t--Order\n  437  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  438: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  439  \t\t\t\n  440  notanyaction:\n  ...\n  583  \t\n  584  \tDECLARE @GWGuid nvarchar(128)\n  585: \tDECLARE @Charged nvarchar(8)\n  586      DECLARE @IsExistImage int\n  587      DECLARE @PreStatus int\n  ...\n  643  \t\t\t\n  644  \t\t\tif(@IsCharge<>0)\n  645: \t\t\t\tset @Charged='Y'\n  646  \t\t\telse\n  647: \t\t\t\tset @Charged='N'\t\n  648  \t\t\t--Order\n  649  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  650: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  651  \t\t\t\n  652  notanyaction:\n  ...\n  879   \n  880   DECLARE @GWGuid nvarchar(128)\n  881:  DECLARE @Charged nvarchar(8)\n  882      DECLARE @IsExistImage int\n  883          DECLARE @PreStatus int\n  ...\n  952       VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                               \n  953     if(@IsCharge<>0)\n  954:     set @Charged='Y'\n  955     else\n  956:     set @Charged='N' \n  957     --Order\n  958     INSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  959:      VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  960     \n  961  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.1.S10.0.sql:\n  133  go\n  134  \n  135: --DischargedSummary\n  136:  if not exists (select 1 from tGridColumnOption where ListName='PathologyTrack' and ColumnName='DischargedSummary')\n  137  \tINSERT INTO tGridColumnOption ( Guid, ListName, ColumnID, TableName, ColumnName, ColumnWidth, OrderID, Expression, Sorting, IsHidden, ModuleID ) \n  138: \t\t VALUES ( NEWID(), 'PathologyTrack', 1, 'tPathologyTrack', 'DischargedSummary', 100, 11, '', NULL, 0, '0500') \n  139  go\n  140: if not exists (select 1 from tGridColumn where Guid in(select Guid from tGridColumnOption where ListName='PathologyTrack' and ColumnName='DischargedSummary'))\n  141: \tINSERT INTO tGridColumn (Guid, ColumnWidth, OrderID, UserGuid, Sorting, IsHidden) select Guid,ColumnWidth,OrderID,'',Sorting,0 from tGridColumnOption where ListName='PathologyTrack' and ColumnName='DischargedSummary'\n  142  \t\t \n  143  go\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.1.S12.0.sql:\n 1451  -- US38425, [WHXH]Integrated Booking Support Confirm Fee\n 1452  ---------------------------------------------------\n 1453: if not exists(select * from tSystemProfile where Name='CallChargeDLLBeforePrinting')\n 1454      INSERT INTO dbo.tSystemProfile (Name, ModuleID, [Value], Exportable, PropertyDesc, PropertyOptions, Inheritance, PropertyType, IsHidden, OrderingPos, [Domain]) \n 1455:         VALUES ('CallChargeDLLBeforePrinting', '0300', '0', 1, 'Checking charge via dll before printing.', '0|1', 0, 11, 4, '666666', (select value from tsystemprofile where name='domain')) \n 1456  GO\n 1457  \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\GCRIS 1.1 to 3.1\\2. Empty Database\\GCRIS2_s3.1.09.bak:\n    <binary>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.1.0.sql:\n  901  \t\n  902  \tDECLARE @GWGuid nvarchar(128)\n  903: \tDECLARE @Charged nvarchar(8)\n  904  \tDECLARE @IsExistImage int\n  905  \n  ...\n  950  \t\t\t\n  951  \t\t\tif(@IsCharge<>0)\n  952: \t\t\t\tset @Charged='Y'\n  953  \t\t\telse\n  954: \t\t\t\tset @Charged='N'\t\n  955  \t\t\t--Order\n  956  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  957: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  958  \t\t\t\n  959  notanyaction:\n  ...\n 1094  \t\n 1095  \tDECLARE @GWGuid nvarchar(128)\n 1096: \tDECLARE @Charged nvarchar(8)\n 1097      DECLARE @IsExistImage int\n 1098      \n ....\n 1133  \t\t\t\n 1134  \t\t\tif(@IsCharge<>0)\n 1135: \t\t\t\tset @Charged='Y'\n 1136  \t\t\telse\n 1137: \t\t\t\tset @Charged='N'\t\n 1138  \t\t\t--Order\n 1139  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1140: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1141  \t\t\t\n 1142  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.10.0.sql:\n 1390   \n 1391   DECLARE @GWGuid nvarchar(128)\n 1392:  DECLARE @Charged nvarchar(8)\n 1393      DECLARE @IsExistImage int\n 1394      \n ....\n 1453       VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                               \n 1454     if(@IsCharge<>0)\n 1455:     set @Charged='Y'\n 1456     else\n 1457:     set @Charged='N' \n 1458     --Order\n 1459     INSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1460:      VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1461     \n 1462  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.13.0.sql:\n  246     Price                float                null,\n  247     Amount               int                  null,\n  248:    IsItemCharged        int                  null,\n  249     constraint PK_TREQUESTCHARGE primary key (RequestChargeID)\n  250  )\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.2.0.sql:\n  495  \t\n  496  \tDECLARE @GWGuid nvarchar(128)\n  497: \tDECLARE @Charged nvarchar(8)\n  498      DECLARE @IsExistImage int\n  499          \n  ...\n  542  \t\t\t\n  543  \t\t\tif(@IsCharge<>0)\n  544: \t\t\t\tset @Charged='Y'\n  545  \t\t\telse\n  546: \t\t\t\tset @Charged='N'\t\n  547  \t\t\t--Order\n  548  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  549: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  550  \t\t\t\n  551  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.4.0.sql:\n  544  \t\n  545  \tDECLARE @GWGuid nvarchar(128)\n  546: \tDECLARE @Charged nvarchar(8)\n  547  \tDECLARE @IsExistImage int\n  548  \n  ...\n  596  \t\t\t\n  597  \t\t\tif(@IsCharge<>0)\n  598: \t\t\t\tset @Charged='Y'\n  599  \t\t\telse\n  600: \t\t\t\tset @Charged='N'\t\n  601  \t\t\t--Order\n  602  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  603: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  604  \t\t\t\n  605  notanyaction:\n  ...\n  741  \t\n  742  \tDECLARE @GWGuid nvarchar(128)\n  743: \tDECLARE @Charged nvarchar(8)\n  744      DECLARE @IsExistImage int\n  745      \n  ...\n  783  \t\t\t\n  784  \t\t\tif(@IsCharge<>0)\n  785: \t\t\t\tset @Charged='Y'\n  786  \t\t\telse\n  787: \t\t\t\tset @Charged='N'\t\n  788  \t\t\t--Order\n  789  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  790: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  791  \t\t\t\n  792  notanyaction:\n  ...\n 1014  \t\n 1015  \tDECLARE @GWGuid nvarchar(128)\n 1016: \tDECLARE @Charged nvarchar(8)\n 1017      DECLARE @IsExistImage int\n 1018          \n ....\n 1062  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1063  \t\t\tif(@IsCharge<>0)\n 1064: \t\t\t\tset @Charged='Y'\n 1065  \t\t\telse\n 1066: \t\t\t\tset @Charged='N'\t\n 1067  \t\t\t--Order\n 1068  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1069: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1070  \t\t\t\n 1071  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.5.0.sql:\n  624  \t\n  625  \tDECLARE @GWGuid nvarchar(128)\n  626: \tDECLARE @Charged nvarchar(8)\n  627  \tDECLARE @IsExistImage int\n  628  \n  ...\n  676  \t\t\t\n  677  \t\t\tif(@IsCharge<>0)\n  678: \t\t\t\tset @Charged='Y'\n  679  \t\t\telse\n  680: \t\t\t\tset @Charged='N'\t\n  681  \t\t\t--Order\n  682  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  683: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  684  \t\t\t\n  685  notanyaction:\n  ...\n  828  \t\n  829  \tDECLARE @GWGuid nvarchar(128)\n  830: \tDECLARE @Charged nvarchar(8)\n  831      DECLARE @IsExistImage int\n  832      \n  ...\n  870  \t\t\t\n  871  \t\t\tif(@IsCharge<>0)\n  872: \t\t\t\tset @Charged='Y'\n  873  \t\t\telse\n  874: \t\t\t\tset @Charged='N'\t\n  875  \t\t\t--Order\n  876  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  877: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  878  \t\t\t\n  879  notanyaction:\n  ...\n 1107  \t\n 1108  \tDECLARE @GWGuid nvarchar(128)\n 1109: \tDECLARE @Charged nvarchar(8)\n 1110      DECLARE @IsExistImage int\n 1111          \n ....\n 1155  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1156  \t\t\tif(@IsCharge<>0)\n 1157: \t\t\t\tset @Charged='Y'\n 1158  \t\t\telse\n 1159: \t\t\t\tset @Charged='N'\t\n 1160  \t\t\t--Order\n 1161  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1162: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1163  \t\t\t\n 1164  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.6.0.sql:\n  638  \t\n  639  \tDECLARE @GWGuid nvarchar(128)\n  640: \tDECLARE @Charged nvarchar(8)\n  641  \tDECLARE @IsExistImage int\n  642  \n  ...\n  690  \t\t\t\n  691  \t\t\tif(@IsCharge<>0)\n  692: \t\t\t\tset @Charged='Y'\n  693  \t\t\telse\n  694: \t\t\t\tset @Charged='N'\t\n  695  \t\t\t--Order\n  696  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  697: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  698  \t\t\t\n  699  notanyaction:\n  ...\n  843  \t\n  844  \tDECLARE @GWGuid nvarchar(128)\n  845: \tDECLARE @Charged nvarchar(8)\n  846      DECLARE @IsExistImage int\n  847      \n  ...\n  885  \t\t\t\n  886  \t\t\tif(@IsCharge<>0)\n  887: \t\t\t\tset @Charged='Y'\n  888  \t\t\telse\n  889: \t\t\t\tset @Charged='N'\t\n  890  \t\t\t--Order\n  891  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  892: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  893  \t\t\t\n  894  notanyaction:\n  ...\n 1124  \t\n 1125  \tDECLARE @GWGuid nvarchar(128)\n 1126: \tDECLARE @Charged nvarchar(8)\n 1127      DECLARE @IsExistImage int\n 1128          \n ....\n 1172  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1173  \t\t\tif(@IsCharge<>0)\n 1174: \t\t\t\tset @Charged='Y'\n 1175  \t\t\telse\n 1176: \t\t\t\tset @Charged='N'\t\n 1177  \t\t\t--Order\n 1178  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1179: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1180  \t\t\t\n 1181  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.7.0.sql:\n  668  \t\n  669  \tDECLARE @GWGuid nvarchar(128)\n  670: \tDECLARE @Charged nvarchar(8)\n  671  \tDECLARE @IsExistImage int\n  672  \n  ...\n  727  \t\t\t\n  728  \t\t\tif(@IsCharge<>0)\n  729: \t\t\t\tset @Charged='Y'\n  730  \t\t\telse\n  731: \t\t\t\tset @Charged='N'\t\n  732  \t\t\t--Order\n  733  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  734: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  735  \t\t\t\n  736  notanyaction:\n  ...\n  879  \t\n  880  \tDECLARE @GWGuid nvarchar(128)\n  881: \tDECLARE @Charged nvarchar(8)\n  882      DECLARE @IsExistImage int\n  883  \n  ...\n  929  \t\t\t\n  930  \t\t\tif(@IsCharge<>0)\n  931: \t\t\t\tset @Charged='Y'\n  932  \t\t\telse\n  933: \t\t\t\tset @Charged='N'\t\n  934  \t\t\t--Order\n  935  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  936: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  937  \t\t\t\n  938  notanyaction:\n  ...\n 1167  \t\n 1168  \tDECLARE @GWGuid nvarchar(128)\n 1169: \tDECLARE @Charged nvarchar(8)\n 1170      DECLARE @IsExistImage int\n 1171          \n ....\n 1222  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1223  \t\t\tif(@IsCharge<>0)\n 1224: \t\t\t\tset @Charged='Y'\n 1225  \t\t\telse\n 1226: \t\t\t\tset @Charged='N'\t\n 1227  \t\t\t--Order\n 1228  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1229: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1230  \t\t\t\n 1231  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.8.0.sql:\n  972  \t\n  973  \tDECLARE @GWGuid nvarchar(128)\n  974: \tDECLARE @Charged nvarchar(8)\n  975  \tDECLARE @IsExistImage int\n  976  \n  ...\n 1031  \t\t\t\n 1032  \t\t\tif(@IsCharge<>0)\n 1033: \t\t\t\tset @Charged='Y'\n 1034  \t\t\telse\n 1035: \t\t\t\tset @Charged='N'\t\n 1036  \t\t\t--Order\n 1037  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1038: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1039  \t\t\t\n 1040  notanyaction:\n ....\n 1180  \t\n 1181  \tDECLARE @GWGuid nvarchar(128)\n 1182: \tDECLARE @Charged nvarchar(8)\n 1183      DECLARE @IsExistImage int\n 1184  \n ....\n 1230  \t\t\t\n 1231  \t\t\tif(@IsCharge<>0)\n 1232: \t\t\t\tset @Charged='Y'\n 1233  \t\t\telse\n 1234: \t\t\t\tset @Charged='N'\t\n 1235  \t\t\t--Order\n 1236  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1237: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1238  \t\t\t\n 1239  notanyaction:\n ....\n 1466  \t\n 1467  \tDECLARE @GWGuid nvarchar(128)\n 1468: \tDECLARE @Charged nvarchar(8)\n 1469      DECLARE @IsExistImage int\n 1470          \n ....\n 1521  \t\t\t  VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                             \t\t\n 1522  \t\t\tif(@IsCharge<>0)\n 1523: \t\t\t\tset @Charged='Y'\n 1524  \t\t\telse\n 1525: \t\t\t\tset @Charged='N'\t\n 1526  \t\t\t--Order\n 1527  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1528: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1529  \t\t\t\n 1530  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.1.S03.0.sql:\n  549   \n  550   DECLARE @GWGuid nvarchar(128)\n  551:  DECLARE @Charged nvarchar(8)\n  552      DECLARE @IsExistImage int\n  553          DECLARE @PreStatus int\n  ...\n  619       VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                               \n  620     if(@IsCharge<>0)\n  621:     set @Charged='Y'\n  622     else\n  623:     set @Charged='N' \n  624     --Order\n  625     INSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  626:      VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  627     \n  628  notanyaction:\n  ...\n  767  \t\n  768  \tDECLARE @GWGuid nvarchar(128)\n  769: \tDECLARE @Charged nvarchar(8)\n  770      DECLARE @IsExistImage int\n  771      DECLARE @PreStatus int\n  ...\n  824  \t\t\t\n  825  \t\t\tif(@IsCharge<>0)\n  826: \t\t\t\tset @Charged='Y'\n  827  \t\t\telse\n  828: \t\t\t\tset @Charged='N'\t\n  829  \t\t\t--Order\n  830  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  831: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  832  \t\t\t\n  833  notanyaction:\n  ...\n  962  \t\n  963  \tDECLARE @GWGuid nvarchar(128)\n  964: \tDECLARE @Charged nvarchar(8)\n  965  \tDECLARE @IsExistImage int\n  966  \tDECLARE @PreStatus int\n  ...\n 1030  \t\t\t\n 1031  \t\t\tif(@IsCharge<>0)\n 1032: \t\t\t\tset @Charged='Y'\n 1033  \t\t\telse\n 1034: \t\t\t\tset @Charged='N'\t\n 1035  \t\t\t--Order\n 1036  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n 1037: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n 1038  \t\t\t\n 1039  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.1.S05.0.sql:\n  100  GO\n  101  \n  102: if not exists (select * from sys.tables where object_id = object_id('[dbo].[tDischargedSummary]') and OBJECTPROPERTY(object_id, 'IsUserTable') = 1)\n  103: CREATE TABLE [dbo].[tDischargedSummary](\n  104  \t[SummaryID] [uniqueidentifier] NOT NULL DEFAULT newsequentialid(),\n  105  \t[PatientID] [nvarchar](64) NULL,\n  ...\n  112  \n  113  GO\n  114: if not exists (select * from sys.indexes where object_id = object_id('[dbo].[tDischargedSummary]') and INDEXPROPERTY(object_id, 'ix_tdischargedsummary_patientid', 'IndexID') = index_id)\n  115: CREATE NONCLUSTERED INDEX [ix_tdischargedsummary_patientid] ON [dbo].[tDischargedSummary]\n  116  (\n  117  \t[PatientID] ASC\n  ...\n 1316  END\n 1317  go\n 1318: if exists(select 1 from dbo.sysobjects where id = object_id(N'[dbo].[usp_externalSetDischargedSummary]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)\n 1319  begin\n 1320: drop procedure [dbo].[usp_externalSetDischargedSummary]\n 1321  end\n 1322  go\n 1323: CREATE PROCEDURE [dbo].[usp_externalSetDischargedSummary]\n 1324      @PatientID nvarchar(64),\n 1325  \t@Summary nvarchar(max)\n ....\n 1329  \tif len(ltrim(rtrim(@PatientID)))=0\n 1330  \tbegin\n 1331: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary: Patient id is null') \n 1332  \t\treturn\n 1333  \tend\n 1334  \tif len(ltrim(rtrim(@Summary)))=0\n 1335  \tbegin\n 1336: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary:Summary is null') \n 1337  \t\treturn\n 1338  \tend\n 1339  \t\t\n 1340: \tinsert into tDischargedSummary([PatientID],[Summary]) values(@PatientID,@Summary)\n 1341  \t\n 1342  END\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.1.S06.0.sql:\n   50  go\n   51  \n   52: if not exists (select * from sys.columns where name='GenerateDt' and object_id=OBJECT_ID('tDischargedSummary'))\n   53: \talter table tDischargedSummary add GenerateDt datetime default(getdate()) NULL\n   54  go\n   55  if not exists (select * from sys.columns where name='GenerateDt' and object_id=OBJECT_ID('tPathologyReport'))\n   ..\n 1295  \n 1296  \n 1297: ALTER PROCEDURE [dbo].[usp_externalSetDischargedSummary]\n 1298      @PatientID nvarchar(64),\n 1299  \t@Summary nvarchar(max),\n ....\n 1308  \tif len(ltrim(rtrim(@PatientID)))=0\n 1309  \tbegin\n 1310: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary: Patient id is null') \n 1311  \t\treturn\n 1312  \tend\n 1313  \tif len(ltrim(rtrim(@Summary)))=0\n 1314  \tbegin\n 1315: \t\tinsert into error_table(errormessage) values('usp_externalSetDischargedSummary:Summary is null') \n 1316  \t\treturn\n 1317  \tend\n 1318  \t\t\n 1319: \tinsert into tDischargedSummary([PatientID],[Summary],[GenerateDt]) values(@PatientID,@Summary,@GenerateDt)\n 1320  \t\n 1321  END\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.1.S07.0.sql:\n  359  \t\n  360  \tDECLARE @GWGuid nvarchar(128)\n  361: \tDECLARE @Charged nvarchar(8)\n  362  \tDECLARE @IsExistImage int\n  363  \tDECLARE @PreStatus int\n  ...\n  431  \t\t\t\n  432  \t\t\tif(@IsCharge<>0)\n  433: \t\t\t\tset @Charged='Y'\n  434  \t\t\telse\n  435: \t\t\t\tset @Charged='N'\t\n  436  \t\t\t--Order\n  437  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  438: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  439  \t\t\t\n  440  notanyaction:\n  ...\n  583  \t\n  584  \tDECLARE @GWGuid nvarchar(128)\n  585: \tDECLARE @Charged nvarchar(8)\n  586      DECLARE @IsExistImage int\n  587      DECLARE @PreStatus int\n  ...\n  643  \t\t\t\n  644  \t\t\tif(@IsCharge<>0)\n  645: \t\t\t\tset @Charged='Y'\n  646  \t\t\telse\n  647: \t\t\t\tset @Charged='N'\t\n  648  \t\t\t--Order\n  649  \t\t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  650: \t\t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  651  \t\t\t\n  652  notanyaction:\n  ...\n  879   \n  880   DECLARE @GWGuid nvarchar(128)\n  881:  DECLARE @Charged nvarchar(8)\n  882      DECLARE @IsExistImage int\n  883          DECLARE @PreStatus int\n  ...\n  952       VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@PatientID,@HISID,@EnglishName,@LocalName,CONVERT(varchar, @Birthday, 120),@Gender,@Alias,@Address,@Telephone,@Marriage,@PatientType,@InhospitalRegion,@ClinicNo,@BedNo,@EnglishName,@IsVIP,@InhospitalNo,@PatientComment)                                               \n  953     if(@IsCharge<>0)\n  954:     set @Charged='Y'\n  955     else\n  956:     set @Charged='N' \n  957     --Order\n  958     INSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  959:      VALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  960     \n  961  notanyaction:\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\sp.sql:\n  413  \t\n  414  \tDECLARE @GWGuid nvarchar(128)\n  415: \tDECLARE @Charged nvarchar(8)\n  416          \n  417  \tDECLARE cursor1 CURSOR FAST_FORWARD FOR   SELECT A.ProcedureCode,A.ExamSystem,A.Modality,A.Charge,A.Registrar,A.Technician,A.TechDoctor,A.TechNurse,A.Status,A.RegisterDt,\n  ...\n  454  \t\t\n  455  \t\tif(@IsCharge<>0)\n  456: \t\t\tset @Charged='Y'\n  457  \t\telse\n  458: \t\t\tset @Charged='N'\t\n  459  \t\t--Order\n  460  \t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  461: \t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@StudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  462  \t\t\n  463  \t     \n  ...\n  601  \t\n  602  \tDECLARE @GWGuid nvarchar(128)\n  603: \tDECLARE @Charged nvarchar(8)\n  604          \n  605  \tDECLARE cursor1 CURSOR FAST_FORWARD FOR   SELECT A.ProcedureCode,A.ExamSystem,A.Modality,A.Charge,A.Registrar,A.Technician,A.TechDoctor,A.TechNurse,A.Status,A.RegisterDt,\n  ...\n  642  \t\t\n  643  \t\tif(@IsCharge<>0)\n  644: \t\t\tset @Charged='Y'\n  645  \t\telse\n  646: \t\t\tset @Charged='N'\t\n  647  \t\t--Order\n  648  \t\tINSERT INTO GW_ORDER(DATA_ID,DATA_DT,ORDER_NO,PLACER_NO,FILLER_NO,PATIENT_ID,EXAM_STATUS,PLACER_DEPARTMENT,PLACER,FILLER_DEPARTMENT,FILLER,REF_PHYSICIAN,REQUEST_REASON,REUQEST_COMMENTS,EXAM_REQUIREMENT,SCHEDULED_DT,MODALITY,STATION_NAME,EXAM_LOCATION,TECHNICIAN,BODY_PART,PROCEDURE_CODE,PROCEDURE_DESC,EXAM_COMMENT,CHARGE_STATUS,CHARGE_AMOUNT,STUDY_INSTANCE_UID,EXAM_DT) \n  649: \t\t\t\tVALUES(@GWGuid,CONVERT(varchar, getdate(), 120),@ProcedureGuid,@RemoteAccNo,@AccNo,@PatientID,'16',@ApplyDept,@ApplyDoctor,@ApplyDept,@ApplyDoctor,@ApplyDoctor,@Observation,@VisitComment,@BookingNotice,@RegisterDt,@ModalityType,@Modality,@Room,@Technician,@Bodypart,@ProcedureCode,@Description,@OrderComment,@Charged,@Charge,@LocalStudyInstanceUID,CONVERT(varchar, @PerformedEnddt, 120))                                                     \n  650  \t\t\n  651  \t     \n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\WindowService\\KIOSKIntegration\\ExportPdf\\dll\\cef.pak:\n    <binary>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\WindowService\\KIOSKIntegration\\ExportPdf\\dll\\CefSharp.Core.bsc:\n    <binary>\n\n461 matches across 82 files\n\n\nSearching 11145 files for \"itemcharged\"\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Common\\ClientCommon\\HISConProxy.cs:\n 1114          private string chargeItemSourceField;\n 1115          \n 1116:         private string isItemChargedField;\n 1117          \n 1118          /// <remarks/>\n ....\n 1178          /// <remarks/>\n 1179          [System.Xml.Serialization.XmlAttributeAttribute()]\n 1180:         public string IsItemCharged {\n 1181              get {\n 1182:                 return this.isItemChargedField;\n 1183              }\n 1184              set {\n 1185:                 this.isItemChargedField = value;\n 1186              }\n 1187          }\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.13.0.sql:\n  246     Price                float                null,\n  247     Amount               int                  null,\n  248:    IsItemCharged        int                  null,\n  249     constraint PK_TREQUESTCHARGE primary key (RequestChargeID)\n  250  )\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.13.0.sql:\n  246     Price                float                null,\n  247     Amount               int                  null,\n  248:    IsItemCharged        int                  null,\n  249     constraint PK_TREQUESTCHARGE primary key (RequestChargeID)\n  250  )\n\n6 matches across 3 files\n\n\nSearching 11145 files for \"退费\"\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.1.0.sql:\n   83  \t[DeductDt] Datetime NULL,\n   84  \t[DeductReason] Nvarchar(256) NULL,\n   85: \t[Refund] Integer NULL default(20),    --20--未退费21--退费成功 22--退费失败\n   86  \t[Refunder] Nvarchar(36) NULL,\n   87  \t[RefundDt] Datetime NULL,\n   ..\n   91  \t[CancelDt] Datetime NULL,\n   92  \t[CancelReason] Nvarchar(256) NULL,\n   93: \t[LastAction] Integer NULL, -----   1--扣费 2--确费 3--退费 4--取消\n   94  \t[LastStatus] Integer NULL,    \n   95  \t[Domain] nvarchar(64) not null,\n   ..\n 1268  go\n 1269  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1270: \t\t VALUES ( 87, '20', '未退费', 0, '' ) \t\t \n 1271  \t\t \n 1272  go\n 1273  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1274: \t\t VALUES ( 87, '21', '已退费', 0, '' ) \t\t \n 1275  \t\t \n 1276  go\n 1277  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1278: \t\t VALUES ( 87, '22', '退费失败', 0, '' ) \t\t \n 1279  \t\t \n 1280  go\n ....\n 1308  go\n 1309  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1310: \t\t VALUES ( 89, '3', '退费', 0, '' ) \t\t \n 1311  \t\t \n 1312  go\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.1.0.sql:\n   83  \t[DeductDt] Datetime NULL,\n   84  \t[DeductReason] Nvarchar(256) NULL,\n   85: \t[Refund] Integer NULL default(20),    --20--未退费21--退费成功 22--退费失败\n   86  \t[Refunder] Nvarchar(36) NULL,\n   87  \t[RefundDt] Datetime NULL,\n   ..\n   91  \t[CancelDt] Datetime NULL,\n   92  \t[CancelReason] Nvarchar(256) NULL,\n   93: \t[LastAction] Integer NULL, -----   1--扣费 2--确费 3--退费 4--取消\n   94  \t[LastStatus] Integer NULL,    \n   95  \t[Domain] nvarchar(64) not null,\n   ..\n 1268  go\n 1269  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1270: \t\t VALUES ( 87, '20', '未退费', 0, '' ) \t\t \n 1271  \t\t \n 1272  go\n 1273  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1274: \t\t VALUES ( 87, '21', '已退费', 0, '' ) \t\t \n 1275  \t\t \n 1276  go\n 1277  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1278: \t\t VALUES ( 87, '22', '退费失败', 0, '' ) \t\t \n 1279  \t\t \n 1280  go\n ....\n 1308  go\n 1309  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1310: \t\t VALUES ( 89, '3', '退费', 0, '' ) \t\t \n 1311  \t\t \n 1312  go\n\n16 matches across 2 files\n\n\nSearching 11145 files for \"确费\"\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\Client\\CheckIn\\CheckIn\\MultiLanRes\\2052.xml:\n  143    <StringRes>\n  144       <Name>Charge WebService invoke failed!</Name>\n  145:      <Value>调用确费服务失败!</Value>\n  146    </StringRes>\n  147    <StringRes>\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.0.1.0.sql:\n   75  \t[Amount] Integer NULL,\n   76  \t[Price] Decimal(10,2) NULL,\t\n   77: \t[Confirm] Integer NULL default(0),    -- 0--未确费 1--确费成功2--确费失败  \n   78  \t[Confirmer] Nvarchar(36) NULL,\n   79  \t[ConfirmDt] Datetime NULL,\n   ..\n   91  \t[CancelDt] Datetime NULL,\n   92  \t[CancelReason] Nvarchar(256) NULL,\n   93: \t[LastAction] Integer NULL, -----   1--扣费 2--确费 3--退费 4--取消\n   94  \t[LastStatus] Integer NULL,    \n   95  \t[Domain] nvarchar(64) not null,\n   ..\n 1244  go\n 1245  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1246: \t\t VALUES ( 87, '0', '未确费', 0, '' ) \t\t \n 1247  \t\t \n 1248  go\n 1249  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1250: \t\t VALUES ( 87, '1', '已确费', 0, '' ) \t\t \n 1251  \t\t \n 1252  go\n 1253  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1254: \t\t VALUES ( 87, '2', '确费失败', 0, '' ) \t\t \n 1255  \t\t \n 1256  go\n ....\n 1304  go\n 1305  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1306: \t\t VALUES ( 89, '2', '确费', 0, '' ) \t\t \n 1307  \t\t \n 1308  go\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\DatabaseAutoUpdater\\Versions\\ReleaseVersions\\3.1.S06.2.sql:\n  881  \n  882  ----------------------------------------------------------\n  883: --US25170 可在任何状态下确费\n  884  ----------------------------------------------------------\n  885  if not exists(select * from tSystemProfile where Name ='CanConfirmFeeInAnyStatus')\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.0.1.0.sql:\n   75  \t[Amount] Integer NULL,\n   76  \t[Price] Decimal(10,2) NULL,\t\n   77: \t[Confirm] Integer NULL default(0),    -- 0--未确费 1--确费成功2--确费失败  \n   78  \t[Confirmer] Nvarchar(36) NULL,\n   79  \t[ConfirmDt] Datetime NULL,\n   ..\n   91  \t[CancelDt] Datetime NULL,\n   92  \t[CancelReason] Nvarchar(256) NULL,\n   93: \t[LastAction] Integer NULL, -----   1--扣费 2--确费 3--退费 4--取消\n   94  \t[LastStatus] Integer NULL,    \n   95  \t[Domain] nvarchar(64) not null,\n   ..\n 1244  go\n 1245  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1246: \t\t VALUES ( 87, '0', '未确费', 0, '' ) \t\t \n 1247  \t\t \n 1248  go\n 1249  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1250: \t\t VALUES ( 87, '1', '已确费', 0, '' ) \t\t \n 1251  \t\t \n 1252  go\n 1253  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1254: \t\t VALUES ( 87, '2', '确费失败', 0, '' ) \t\t \n 1255  \t\t \n 1256  go\n ....\n 1304  go\n 1305  INSERT INTO tDictionaryValue ( Tag, Value, Text, IsDefault, ShortcutCode ) \n 1306: \t\t VALUES ( 89, '2', '确费', 0, '' ) \t\t \n 1307  \t\t \n 1308  go\n\nD:\\Workshop\\Corp\\GCRIS\\SRC\\UpgradeTool\\QuicklyUpgradeTool\\src\\QuicklyUpgradeTool\\bin\\Debug\\script\\3.1.S06.2.sql:\n  881  \n  882  ----------------------------------------------------------\n  883: --US25170 可在任何状态下确费\n  884  ----------------------------------------------------------\n  885  if not exists(select * from tSystemProfile where Name ='CanConfirmFeeInAnyStatus')\n\n19 matches across 5 files\n",
			"settings":
			{
				"buffer_size": 160550,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/D/Workshop/Corp/GCRIS/SRC/UpgradeTool/QuicklyUpgradeTool/src/QuicklyUpgradeTool/bin/Debug/script/3.0.1.0.sql",
			"settings":
			{
				"buffer_size": 150357,
				"encoding": "UTF-16 LE with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/****************************************************************************\n*   PROGRAM :    ReportPrintPanel.cs\n*   AUTHOR  :    Carestream\n*   DATE    :    07/18/2017\n*   COMPANY :    Carestream\n*\n*   Description:  \n*   \n*   Revisions:\n*   Date        By      Purpose\n* -----------  ------  ------------------------------------------------------\n* 07/18/2017   ZhaoSong   For US41857(DE33295) 结构化报告在Smart Client中的 快照功能\n*****************************************************************************/\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Data;\nusing System.Text;\nusing System.Windows.Forms;\nusing C1.Win.C1FlexGrid;\nusing Kodak.GCRIS.Client.FrameWork.Panels;\nusing Kodak.GCRIS.Client.FrameWork;\nusing Kodak.GCRIS.Common.Utility;\nusing Kodak.GCRIS.Common.ActionResult;\nusing Kodak.GCRIS.Common.Log;\nusing Kodak.GCRIS.Client.Report.Common;\nusing Kodak.GCRIS.Common;\nusing Kodak.GCRIS.Client.Common.ConditionBuilder;\nusing Kodak.GCRIS.Client.FrameWork.Offline;\nusing Kodak.GCRIS.Common.Model;\nusing Kodak.GCRIS.Common.GlobalSettings;\nusing Kodak.GCRIS.Client.Common.PrintTemplate;\nusing C1.C1Report;\nusing System.IO;\nusing Kodak.GCRIS.Client.FrameWork.ConfigDic;\n\nusing OfflineBlockConnectionState = Microsoft.ApplicationBlocks.SmartClient.Offline.ConnectionState;\nusing Carestream.CommonControls;\nusing Telerik.WinControls;\nusing Telerik.WinControls.UI;\nusing System.Threading;\nusing System.Collections.Specialized;\nusing Kodak.GCRIS.Client.Common;\nusing Kodak.GCRIS.Common.Consts;\nusing QUEUE_APPLib;\nusing System.Xml;\nusing Kodak.GCRIS.Client.ReportPrintHelper;\nusing System.Configuration;\nusing System.Linq;\nusing System.Web;\nusing Kodak.GCRIS.Client.Common.GridFilter;\nusing Kodak.GCRIS.Common.GlobalSettings.DllLoader;\n\n\nnamespace Kodak.GCRIS.Client.ReportList\n{\n    public partial class ReportPrintPanel : UserControl\n    {\n        #region private variable\n\n        const string _PanelName = \"ReportPrint\";\n\n        int _iCurPage = -1;\n        int _iPageSize = ReportCommon.ReportCommon.DEFAULT_PAGESIZE;\n        int _iCurRowsCount = 0;\n        int _iListCount = -1;\n\n        bool _bCondtionLoaded = false;\n\n        string _strPrevCondition = \"\";\n        string _strPrevModalityType = \"\";\n        string _strNotifiedRPList = \"\";\n\n        bool _bSignBeforePrintReport = false;\n        bool _bSignBeforePrintList = false;\n        bool _bEditTakeReportSign = false;\n        bool _bAutoClearSignedReport = false;\n\n        bool _canPrint = false;\n        bool _bOnlyShowApproved = true;\n        List<string> _canPrintPatientTypes = new List<string>();\n        List<string[]> _canPrintTimes = new List<string[]>();\n\n        System.DateTime _tmPrevGetCount = System.DateTime.Now;\n\n        //System.Windows.Forms.Timer _timerRefreshCount = null;\n\n        bool _bDefaultTemplate = true;\n        private ConfigDicManager cdManager = ClientFrameworkBuilder.Instance.ConfigDicManager;\n        Dictionary<string, DataTable> _dicRptInfo = new Dictionary<string, DataTable>();\n        C1.C1Report.C1Report _c1rpt = new C1.C1Report.C1Report(); //add a c1report cache for all report print\n        DataTable _dt4Print = new DataTable();//add a print datatable cache for all report print\n        string _printTemplateGuid = \"\";//use for current report's print template guid,if the report never been printted, it is the default print template's guid\n        string _printTemplateModalityType = \"\"; //the selected template's modality type\n        string _printTemplateGuidCurrentSelected = \"\";//the selected template's guid\n        string _RPSTATUS = \"RPSTATUS\";\n        string _RPDESC = \"TREGPROCEDURE__RPDESC\";\n\n        AsyncRequestReportListCount _asyncCount = new AsyncRequestReportListCount();\n\n        private DataSet m_dsDictionary;\n        private StringDictionary stringUserIDUserNameDic = new StringDictionary();\n        private string m_ImageLoadAccNo = \"\";\n        private bool m_ImageLoaded = false;\n        Color _clrPrinted;\n        Color unScanColor;\n        private int _mode = 0;\n        private bool _canCallQueue = false;\n\n        #region Added by Blue for RC574, 05/19/2014\n        private Dictionary<string, bool> _dicBarcodeTemplateDownloaded = new Dictionary<string, bool>();\n        #endregion\n\n        #region Added by Blue for US22363, 01/15/2015\n        private bool _canPrintUnapprovedReport = true;\n        private bool _canPopupWarningMsg4PrintUnapprovedReport = false;\n        #endregion\n        #region Added by Kevin For SR 10/27/2015\n        Dictionary<string, ReportEnumHelper.tagDataField> _fieldsMap = new Dictionary<string, ReportEnumHelper.tagDataField>();\n        SrPrintHelper _srPrintHelper;\n        #endregion\n\n        // 2017-02-21, Oscar added. (US37226)\n        bool _manualSort = true;\n\n        // 2017-05-23, Oscar added. (US39998)\n        bool enableHeaderFilter;\n        GridFilter filter;\n\n        bool m_bCanLoadMultiPatientImage;\n\n        bool callChargeDLLBeforePrinting;\n\n        private string _reportGuid;\n        private string _filepath;\n        private bool _isSR = false;\n\n        #endregion\n\n        public ReportPrintPanel()\n        {\n            InitializeComponent();\n            string CanLoadMultiPatientImage = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"CanLoadMultiPatientImage\", \"0E00\");\n            int n = Convert.ToInt32(CanLoadMultiPatientImage);\n            m_bCanLoadMultiPatientImage = (n == 1 ? true : false);\n            if (m_bCanLoadMultiPatientImage == false)\n            {\n                btnLoadMultiImage.Enabled = false;\n            }\n\n            ColorConverter cc = new ColorConverter();\n            unScanColor = (Color)cc.ConvertFromString(ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"ReportList_UnScanColor\", \"0400\").Trim());\n\n            //US31620\n            #region\n            ClientFrameworkBuilder.Instance.FrameWorkUI.SetGridViewColumnWidthByUserProfile(this._listReport, \"ReportPrint\", \"0400\");\n            #endregion\n\n\n        }\n\n        /// <summary>\n        /// Notify message\n        /// </summary>\n        /// <param name=\"type\">\n        ///     1       : by ReportGuid\n        ///     2       : by RegProcedure Guid(s)\n        ///     other   : refresh\n        /// </param>\n        /// <param name=\"param\"></param>\n        public void Notify(int type, object param)\n        {\n            _strNotifiedRPList = param as string;\n        }\n\n        #region private method\n\n        private void _btnSearchReport_Click(object sender, EventArgs e)\n        {\n            BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice);\n        }\n\n        string GetTranslate(string text)\n        {\n            return Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.MultiLanManager.GetString(text);\n        }\n\n        private void _listReport_CellFormatting(object sender, Telerik.WinControls.UI.CellFormattingEventArgs e)\n        {\n            if (e.CellElement.ColumnInfo is GridViewDataColumn && ((GridViewDataColumn)e.CellElement.ColumnInfo).FieldName.Equals(\"tReport__ReportType\", StringComparison.OrdinalIgnoreCase))\n            {\n                if (e.CellElement.Text == ((int)ReportCommon.ReportType.SR).ToString())\n                    e.CellElement.Text = GetTranslate(\"Structured Report\");\n                if (e.CellElement.Text == ((int)ReportCommon.ReportType.Normal).ToString())\n                    e.CellElement.Text = GetTranslate(\"Normal Report\");\n            }\n        }\n\n\n        private void _listReport_DoubleClick(object sender, EventArgs e)\n        {\n            try\n            {\n                if (_listReport.Rows.Count <= 0)\n                    return;\n\n                if (_listReport.CurrentCell == null)\n                    return;\n\n                // can not hit the header\n                Point cursorPosition = _listReport.PointToClient(Cursor.Position);\n\n                bool hitCurrentCell = _listReport.CurrentCell.HitTest(cursorPosition);\n                if (!hitCurrentCell)\n                    return;\n\n                if (_listReport.CurrentCell.ColumnInfo.HeaderText.ToUpper().StartsWith(\"TREGORDER__ORDERMESSAGE\") ||\n                    _listReport.CurrentCell.ColumnInfo.HeaderText == ClientCommonFunction.GetLanguage(\"tRegOrder__OrderMessage\"))\n                {\n                    if (_listReport.Columns.Contains(\"tRegOrder__OrderGuid\"))\n                    {\n                        string strOrderGuid = System.Convert.ToString(_listReport.CurrentRow.Cells[\"tRegOrder__OrderGuid\"].Value);\n\n                        using (Kodak.GCRIS.Client.Common.FormOrderMessage form = new Kodak.GCRIS.Client.Common.FormOrderMessage(strOrderGuid, false))\n                        {\n\n                            form.ShowDialog();\n\n                            refreshGrid4OrderMessageIcon(strOrderGuid, form);\n                        }\n                    }\n                }\n                else\n                {\n                    if (!_btnPrint.Enabled)\n                        return;\n\n                    Point pt = _listReport.PointToClient(Cursor.Position);\n\n                    bool hit = _listReport.CurrentCell.HitTest(pt);\n\n                    if (hit)\n                    {\n                        PrintReports();\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                //ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                System.Diagnostics.Debug.Assert(false, ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, \"OnPrinting:\" + ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        private void processPageButton(int nTotalCount, int nTotalPage)\n        {\n            labelCount.Tag = nTotalCount;\n            int nLastPage = nTotalPage == 0 ? 0 : (nTotalPage - 1);// nTotalCount / pagesize + (nTotalPage % pagesize == 0 ? 0 : 1);// -1;\n            if (_iCurPage == 0)//In the first page\n            {\n                _btnFirstPage.Enabled = false;\n                _btnPrevPage.Enabled = false;\n                if (nTotalPage > 1)\n                {\n                    _btnNextPage.Enabled = true;\n                    _btnLastPage.Enabled = true;\n                }\n                else\n                {\n                    _btnNextPage.Enabled = false;\n                    _btnLastPage.Enabled = false;\n                }\n            }\n            else if (_iCurPage == nLastPage) //In the last page\n            {\n                _btnNextPage.Enabled = false;\n                _btnLastPage.Enabled = false;\n                _btnFirstPage.Enabled = true;\n                _btnPrevPage.Enabled = true;\n            }\n            else\n            {\n                _btnNextPage.Enabled = true;\n                _btnLastPage.Enabled = true;\n                _btnFirstPage.Enabled = true;\n                _btnPrevPage.Enabled = true;\n            }\n        }\n\n        private DataSetActionResult RequestServerData(int pageindex)\n        {\n            string sorting = \"\";\n\n            // 2017-02-21, Oscar added. (US37226)\n            sorting = ClientFrameworkBuilder.Instance.FrameWorkUI.GetOrderByString(_PanelName);\n            string sortAll = ClientCommonFunction.GetProfile_String(ReportCommon.ProfileName.Report_SortAllPage, ReportCommon.ModuleID.Global);\n            if (sortAll != \"1\" || string.IsNullOrWhiteSpace(sorting))\n            {\n\n                string t1 = ClientCommonFunction.GetProfile_String(ReportCommon.ProfileName.Report_Sorting_ReportPrint, ReportCommon.ModuleID.Report);\n                if (t1 != null && (t1 = t1.Trim()).Length > 0)\n                {\n                    sorting = \" order by \" + t1;\n                }\n            }\n\n            string cond = _conditionBuilder.GetCondition();\n            if (_bOnlyShowApproved)\n            {\n                if (cond != null && cond.Length > 0)\n                    cond += \" and tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n                else\n                    cond = \" tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n            }\n            else\n            {\n                if (cond != null && cond.Length > 0)\n                    cond += \" and tRegProcedure.status >=\" + System.Convert.ToInt32(ReportCommon.RP_Status.CheckIn).ToString();\n                else\n                    cond = \" tRegProcedure.status >=\" + System.Convert.ToInt32(ReportCommon.RP_Status.CheckIn).ToString();\n            }\n            //US27953-1. 快速打印checked，病人编号只查询创建时间是最新的order或放射编号查询；\n            #region\n            if (isQuickPrintAsPID)\n            {\n                //US27953-创建时间是最新的order,而非部位\n                #region\n                //cond += \" and tRegProcedure.CreateDt=(select max(a.CreateDt) from tRegProcedure a,tRegOrder b,tRegPatient c where a.OrderGuid=b.OrderGuid and b.PatientGuid=c.PatientGuid and c.PatientID='\"+currentPid.Trim()+\"')\";\n                cond += \" and tRegOrder.CreateDt=(select max(b.CreateDt) from tRegProcedure a,tRegOrder b,tRegPatient c where a.OrderGuid=b.OrderGuid and b.PatientGuid=c.PatientGuid and c.PatientID='\" + currentPid.Trim() + \"')\";\n                #endregion\n            }\n            #endregion\n\n            // 2017-05-23, Oscar added. (US39998)\n            if (this.filter != null) cond = this.filter.GetQueryCondition(cond);\n\n            Dictionary<string, string> paramMap = new Dictionary<string, string>();\n            int nPageSize = _iPageSize;\n            if (pageindex == 0xfffffff)\n            {\n                pageindex = 0;\n                nPageSize = 20000;\n            }\n            paramMap.Add(\"condition\", cond);\n            paramMap.Add(\"sorting\", sorting);\n            // Current page index\n            paramMap.Add(\"curpage\", pageindex.ToString());\n            paramMap.Add(\"pagesize\", nPageSize.ToString());\n            // My Panel Name\n            paramMap.Add(\"panelName\", _PanelName);\n\n            Context context = new Context();\n            context.MessageName = \"Rpt_GetReportsList\";\n            context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n            DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n            Kodak.GCRIS.Client.Common.CommonFuncs.ShowAliasInsteadofSiteName(dsrt.DataSetData.Tables[\"ReportPage\"], \"tRegOrder__ExamSite\");\n            Kodak.GCRIS.Client.Common.CommonFuncs.ShowAliasInsteadofSiteName(dsrt.DataSetData.Tables[\"ReportPage\"], \"tRegOrder__Assign2Site\");\n            Kodak.GCRIS.Client.Common.CommonFuncs.ShowAliasInsteadofSiteName(dsrt.DataSetData.Tables[\"ReportPage\"], ReportCommon.ReportCommon.FIELDNAME_tReport__SubmitSite);\n            Kodak.GCRIS.Client.Common.CommonFuncs.ShowAliasInsteadofSiteName(dsrt.DataSetData.Tables[\"ReportPage\"], ReportCommon.ReportCommon.FIELDNAME_tRegOrder__RegSite);\n            Kodak.GCRIS.Client.Common.CommonFuncs.ShowAliasInsteadofSiteName(dsrt.DataSetData.Tables[\"ReportPage\"], ReportCommon.ReportCommon.FIELDNAME_tReport__FirstApproveSite);\n            Kodak.GCRIS.Client.Common.CommonFuncs.ShowAliasInsteadofSiteName(dsrt.DataSetData.Tables[\"ReportPage\"], ReportCommon.ReportCommon.FIELDNAME_tRegOrder__CurrentSite);\n            return dsrt;\n        }\n\n        /// <summary>\n        /// GetReportsDataSet from server\n        /// </summary>\n        /// <returns></returns>\n        private DataSet GetReportsDataSet()\n        {\n            try\n            {\n                this.Cursor = Cursors.WaitCursor;\n\n                DataSetActionResult dsrt = RequestServerData(_iCurPage);\n\n                this.Cursor = Cursors.Default;\n\n                _iCurPage = dsrt.recode;\n\n                int nTotalCount = Convert.ToInt32(dsrt.ReturnString);\n                int nTotalPage = (nTotalCount + _iPageSize - 1) / _iPageSize;\n\n\n                _lblCurrentPage.Text = System.Convert.ToString(_iCurPage + 1) + \"/\" + nTotalPage.ToString(); //ClientCommonFunction.GetLanguage(\"CurrentPage\") + \":\" + \n\n                labelCount.Text = ClientCommonFunction.GetLanguage(\"Count:\") + System.Convert.ToString(dsrt.DataSetData.Tables[0].Rows.Count) + \"/\" + dsrt.ReturnString;\n\n                processPageButton(nTotalCount, nTotalPage);\n\n                DataSet retDS = dsrt.DataSetData;\n\n                ReportCommon.Converter.toUpperColumn(ref retDS);\n\n                return dsrt.DataSetData;\n            }\n            catch (Exception ex)\n            {\n                _iCurPage = 0;\n\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n\n            this.Cursor = Cursors.Default;\n\n            return null;\n        }\n\n        private void ReportPrintPanel_Load(object sender, EventArgs e)\n        {\n            try\n            {\n                if (stringUserIDUserNameDic.Count == 0)\n                {\n\n                    stringUserIDUserNameDic.Add(\"TREPORT__CREATER\", \"TREPORT__CREATERNAME\");\n                    stringUserIDUserNameDic.Add(\"TREPORT__SUBMITTER\", \"TREPORT__SUBMITTERNAME\");\n                    stringUserIDUserNameDic.Add(\"TREPORT__FIRSTAPPROVER\", \"TREPORT__FIRSTAPPROVERNAME\");\n                    stringUserIDUserNameDic.Add(\"TREPORT__SECONDAPPROVER\", \"TREPORT__SECONDAPPROVERNAME\");\n                    stringUserIDUserNameDic.Add(\"TREPORT__BOOKER\", \"TREPORT__BOOKERNAME\");\n                    stringUserIDUserNameDic.Add(\"TREPORT__REGISTRAR\", \"TREPORT__REGISTRARNAME\");\n                    stringUserIDUserNameDic.Add(\"TREPORT__TECHNICIAN\", \"TREPORT__TECHNICIANNAME\");\n                    stringUserIDUserNameDic.Add(\"TECHNICIAN\", \"TECHNICIANNAME\");\n                    stringUserIDUserNameDic.Add(\"REGISTRAR\", \"REGISTRARNAME\");\n                    stringUserIDUserNameDic.Add(\"TREPORT__MENDER\", \"TREPORT__MENDERNAME\");\n                    stringUserIDUserNameDic.Add(\"MENDER\", \"MENDERNAME\");\n                    stringUserIDUserNameDic.Add(\"CREATER\", \"CREATERNAME\");\n                    stringUserIDUserNameDic.Add(\"SUBMITTER\", \"SUBMITTERNAME\");\n                    stringUserIDUserNameDic.Add(\"FIRSTAPPROVER\", \"FIRSTAPPROVERNAME\");\n                    stringUserIDUserNameDic.Add(\"SECONDAPPROVER\", \"SECONDAPPROVERNAME\");\n                }\n\n                // 2017-05-23, Oscar added. (US39998)\n                this.enableHeaderFilter = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"EnableHeaderFilter\", \"0000\") == \"1\";\n                if (this.filter == null && this.enableHeaderFilter)\n                    this.filter = new GridFilter(this._listReport) { Query = () => BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithoutNotice) };\n\n                _bCondtionLoaded = _conditionBuilder.InitControls(_PanelName,\n                    System.Convert.ToInt32(ReportCommon.PanelID.PrintingList),\n                    ConditionBuilderCtrl.GetMoudleIDString(Kodak.GCRIS.Common.GlobalSettings.ModuleEnum.Report_Client));\n                _conditionBuilder.OnReturnCondition += new Kodak.GCRIS.Client.Common.ConditionBuilder.ConditionBuilderCtrl.ReturnCondition(ConditionBuilder_OnReturnCondition);\n\n                Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.ClosingEvent += new ClosingEventHandler(Panel_ClosingEvent);\n                //Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.AfterGotFocusEvent += new AfterGotFocusEventHandler(OnGotFocus);\n                Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.AfterChangeToCurrentEvent += new AfterChangeToCurrentEventHandler(OnGotFocus);\n                Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.ClosedEvent += new ClosedEventHandler(PanelManager_ClosedEvent);\n\n                _asyncCount.OnCompleted += new AsyncRequestReportListCount.CompletedEventHandler(_asyncCount_OnCompleted);\n\n                _chkShowOrderMessage.Checked = ClientFrameworkBuilder.Instance.CommonManager.GetDefaultValue(\"ReportPrint\", \"ShowOrderMessage\");\n                _chkShowOrderMessage.CheckedChanged += new EventHandler(_chkShowOrderMessage_CheckedChanged);\n                _chkQuickPrint.Checked = ClientFrameworkBuilder.Instance.CommonManager.GetDefaultValue(\"ReportPrint\", \"QuickPrint\");\n                checkBoxBatchreport.Checked = ClientFrameworkBuilder.Instance.CommonManager.GetDefaultValue(\"ReportPrint\", \"BatchReport\");\n                checkboxBatchFilm.Checked = ClientFrameworkBuilder.Instance.CommonManager.GetDefaultValue(\"ReportPrint\", \"BatchFilm\");\n                #region Modified by Blue for [RC617] - US17985, 07/23/2014\n                this.chkQuickSendFilm.Checked = ClientFrameworkBuilder.Instance.CommonManager.GetDefaultValue(\"ReportPrint\", \"QuickSendFilm\");\n                _canCallQueue = ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"CallQueueSystemAfterFilmSent\", \"0400\") == \"1\";\n                #endregion\n\n                _bSignBeforePrintList = ClientCommonFunction.GetReportProfile_BOOL(\"ReportPrintList_SignBeforePrintList\");\n                _bSignBeforePrintReport = ClientCommonFunction.GetReportProfile_BOOL(\"ReportPrintList_SignBeforePrintReport\");\n                _bEditTakeReportSign = ClientCommonFunction.GetReportProfile_BOOL(\"ReportPrintList_EditTakeReportSign\");\n                _bAutoClearSignedReport = ClientCommonFunction.GetReportProfile_BOOL(\"ReportPrintList_AutoClearSignedReport\");\n                _bOnlyShowApproved = ClientCommonFunction.GetReportProfile_BOOL(\"ReportPrintList_ShowOnlyApprovedReports\");\n                _canPrintUnapprovedReport = ClientCommonFunction.GetUserProfileValueByName_bool(\"ReportPrintList_CanPrintUnApprovedReport\");\n                _canPopupWarningMsg4PrintUnapprovedReport = ClientCommonFunction.GetUserProfileValueByName_bool(\"ReportEditor_PrintUnApprovedReportShowWarning\");\n                string temp = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"ReportPrintList_PrintUnApprovedReportsPatientTypes\", ReportCommon.ReportCommon.GetMoudleIDString(ReportCommon.ModuleID.Report));\n                string[] arr = temp.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);\n                foreach (string i in arr)\n                {\n                    if (!_canPrintPatientTypes.Contains(i))\n                    {\n                        _canPrintPatientTypes.Add(i);\n                    }\n                }\n                temp = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"ReportPrintList_PrintUnApprovedReportsPeriods\", ReportCommon.ReportCommon.GetMoudleIDString(ReportCommon.ModuleID.Report));\n                arr = temp.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);\n                foreach (string i in arr)\n                {\n                    string[] arr2 = i.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);\n                    if (arr2.Length == 2)\n                    {\n                        _canPrintTimes.Add(arr2);\n                    }\n                }\n\n                #region Modified by Blue for RC574, 05/19/2014\n                _mode = ClientCommonFunction.GetProfile_Int(\"PrintFilmIntegrationMode\", ReportCommon.ModuleID.Integration);\n                buttonSendFilm.Text = _mode == 1 ? \"SendFilm\" : _mode == 2 ? \"PrintFilm\" : \"BarcodePrint\";\n                checkboxBatchFilm.Visible = _mode == 2 || _mode == 3 ? true : false;\n                this.chkQuickSendFilm.Visible = _mode == 1;\n                #endregion\n\n                //_canPrint = ClientCommonFunction.GetReportProfile_BOOL(ReportCommon.ProfileName.profile_canPrint);\n                //_btnPrint.Enabled = _canPrint;\n\n                ClientCommonFunction.LocalizeControlText(this);\n\n                // Page size\n                _iPageSize = ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.Report_PageSize);\n                _iPageSize = _iPageSize < 1 ? ReportCommon.ReportCommon.DEFAULT_PAGESIZE : _iPageSize;\n\n                LoadPageButtons(_btnFirstPage, _btnPrevPage, _btnNextPage, _btnLastPage);\n\n                // Authority of Export\n                buttonExport.Enabled = ClientCommonFunction.GetReportProfile_BOOL(ReportCommon.ProfileName.profile_canExport);\n                _listReport.HongKongSupplementaryCharacterSet = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"HongKongSupplementaryCharacterSet\", \"0000\") == \"1\" ? true : false;\n\n\n                string strTemp = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"ReportPrintList_PrintedColor\", \"0400\");\n                strTemp = strTemp.Trim();\n                if (strTemp.Length > 0)\n                {\n                    ColorConverter cc = new ColorConverter();\n                    _clrPrinted = (Color)cc.ConvertFromString(strTemp);\n                }\n                else\n                {\n                    _clrPrinted = Color.Yellow;\n                }\n\n                CSMenuItem menuitemFinishExam = new CSMenuItem();\n                menuitemFinishExam.Text = ClientCommonFunction.GetLanguage(\"OrderView\");\n                menuitemFinishExam.Name = \"OrderView\";\n                menuitemFinishExam.Click += new EventHandler(menuitemOrderView_Click);\n                csContextMenu1.Items.Add(menuitemFinishExam);\n\n                //Init efilm printer\n\n                DataTable dtEFilmPrinter = Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.DictionaryManager.GetDictionary(165);\n                if (dtEFilmPrinter == null || dtEFilmPrinter.Rows.Count == 0)\n                {\n                    csLabel1.Visible = false;\n                    cbbEFilmPrinter.Visible = false;\n                }\n                else\n                {\n                    foreach (DataRow dr in dtEFilmPrinter.Rows)\n                    {\n                        //RadItem ri = new RadItem();\n                        //ri.Name = Convert.ToString(dr[\"Value\"]);\n                        //ri.Text = Convert.ToString(dr[\"Text\"]);\n                        //cbbEFilmPrinter.Items.Add(ri);\n                        cbbEFilmPrinter.Add(Convert.ToString(dr[\"Text\"]), Convert.ToString(dr[\"Value\"]));\n                    }\n\n                    string strLastEFilmPrinter = ClientFrameworkBuilder.Instance.ClientStorageManager.GetValue(\"ReportPrint_EFilmPrinter\", \"0300\");\n                    if (!string.IsNullOrWhiteSpace(strLastEFilmPrinter))\n                    {\n                        cbbEFilmPrinter.SelectedName = strLastEFilmPrinter;\n                    }\n\n                }\n                _conditionBuilder.GetFirstInputCtrl().Focus();\n\n                #region Added by Kevin For SR print 27/10/2015\n                _srPrintHelper = new SrPrintHelper(this);\n                #endregion\n\n                this.callChargeDLLBeforePrinting = ClientFrameworkBuilder.Instance.ProfileManager.GetProfileValueByName(\"CallChargeDLLBeforePrinting\", \"0300\") == \"1\";\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.Assert(false, ex.Message);\n            }\n        }\n\n        private void menuitemOrderView_Click(object sender, EventArgs e)\n        {\n            View orderview = new View(this._listReport, 1, this.refreshGrid4OrderMessageIcon);\n            orderview.ShowDialog();\n        }\n\n        private void _listReport_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)\n        {\n            e.ContextMenu = csContextMenu1.DropDown;\n        }\n\n        private void PanelManager_ClosedEvent(object sender, ClosingEventArgs e)\n        {\n            Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.ClosedEvent -= new ClosedEventHandler(PanelManager_ClosedEvent);\n            ClosePACSInstance();\n        }\n\n        private void _asyncCount_OnCompleted(object sender, AsyncRequestReportListCount.CompletedEventArgs e)\n        {\n            try\n            {\n                int pagesize = ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.Report_PageSize);\n                int nTotalPage = (e.Count + pagesize - 1) / pagesize;\n                _btnLastPage.Tag = nTotalPage;\n\n                _lblCurrentPage.Text = System.Convert.ToString(_iCurPage + 1) + \"/\" + nTotalPage.ToString();\n\n                labelCount.Text = ClientCommonFunction.GetLanguage(\"Count:\")\n                    + System.Convert.ToString(_listReport.RowCount)\n                    + \"/\"\n                    + System.Convert.ToString(e.Count);\n\n                processPageButton(e.Count, nTotalPage);\n            }\n            catch (System.Exception ex)\n            {\n                ClientCommonFunction.RISLog_Error(0, string.Format(\"This Exception will NOT impact work flow!{0}{1}\", Environment.NewLine, ex), new System.Diagnostics.StackFrame().GetFileName(), new System.Diagnostics.StackFrame().GetFileLineNumber());\n                System.Diagnostics.Debug.Assert(false, ex.Message);\n            }\n\n            ClientCommonFunction.RISLog_Info(0, \"_asyncCount_OnCompleted, Count=\" + e.Count.ToString(), \"\", 0);\n        }\n\n        public static void LoadPageButtons(CSButton btnFirst, CSButton btnPrev, CSButton btnNext, CSButton btnLast)\n        {\n            string iconPath = Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.CommonManager.GetIconPath(\n                System.Convert.ToInt32(ReportCommon.ModuleID.Global));\n\n            if (!System.IO.Directory.Exists(iconPath))\n            {\n                System.Diagnostics.Debug.WriteLine(\"Icon path doesn't exist!\");\n\n                ClientCommonFunction.RISLog_Info(0, \"Icon path doesn't exist!\", \"\", 0);\n\n                return;\n            }\n\n            LoadImageButton(btnFirst, iconPath, \"first.png\");\n            LoadImageButton(btnPrev, iconPath, \"arrow-left.png\");\n            LoadImageButton(btnNext, iconPath, \"arrow-right.png\");\n            LoadImageButton(btnLast, iconPath, \"last.png\");\n        }\n\n        public static void LoadImageButton(CSButton btn, string path, string filename)\n        {\n            try\n            {\n                if (btn == null || string.IsNullOrEmpty(path) || string.IsNullOrEmpty(filename) ||\n                    !System.IO.Directory.Exists(path) ||\n                    !System.IO.File.Exists(path.Trim('\\\\') + \"\\\\\" + filename.Trim('\\\\')))\n                {\n                    return;\n                }\n\n                string fullfilepath = path.Trim('\\\\') + \"\\\\\" + filename.Trim('\\\\');\n\n                Image img = new Bitmap(Image.FromFile(fullfilepath));\n                btn.Image = img;\n                btn.Text = string.Empty;\n                btn.ImageAlignment = ContentAlignment.MiddleCenter;\n                btn.TextImageRelation = TextImageRelation.Overlay;\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.Assert(false, ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                            (new System.Diagnostics.StackFrame()).GetFileName(),\n                            (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        /// <summary>\n        /// BindDataSet to grid\n        /// </summary>\n        private void BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition actionOnEmptyCondition)\n        {\n            var requireResume = false;\n\n            RCCommonFunction.Performance(\"4007\", \"Begin\", \"Query print report list\");\n            try\n            {\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 1\", \"\", 0);\n                if (ApplicationStatus.OnlineStatus == OfflineBlockConnectionState.OffLine)\n                {\n                    return;\n                }\n                if (ReportCommon.ReportList_ActionOnEmptyCondition.StopWithoutNotice == actionOnEmptyCondition && _conditionBuilder.isAllEmpty)\n                {\n                    return;\n                }\n                else if (ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice == actionOnEmptyCondition && _conditionBuilder.isAllEmpty)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Please choose the condition!\");\n\n                    return;\n                }\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 2, _strPrevCondition = \" + _strPrevCondition, \"\", 0);\n\n                string condition = _conditionBuilder.GetCondition();\n                if (!string.IsNullOrWhiteSpace(_strPrevCondition) && string.Compare(_strPrevCondition, condition, true) != 0)\n                {\n                    _iCurPage = 0;\n                }\n\n\n                _strPrevCondition = condition;\n                if (_strPrevCondition.Length > 3072)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"The query conditions is too long!\");\n                    return;\n                }\n                DataSet ds = GetReportsDataSet();\n                //US27953-100021850-100021858\n                #region\n                if (ds == null || ds.Tables.Count.Equals(0))\n                #endregion\n                {\n                    //US27953-2:查询不出来的结果，保留查询条件，提示用户未找到满足打印条件的报告；\n                    #region\n                    //US27953-100021850-100021858 ClientCommonFunction.ShowMessageBox(\"No record is found as per current conditions\");\n                    #region\n                    ClientCommonFunction.ShowMessageBox(\"No record is found\");\n                    if (checkBoxBatchreport.Checked)\n                    {\n                        if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                        {\n                            buttonClear_Click(null, null);\n\n                        }\n                    }\n                    //US27953-非批量情况下，为显示及时结果，如无数据一律执行清除GRIDVIEW操作\n                    #region\n                    else\n                    {\n                        buttonClear_Click(null, null);\n\n                    }\n                    #endregion\n                    #endregion\n                    #endregion\n                    return;\n                }\n                //US27953-100021850-100021858\n                //US27953-100021853\n                #region\n                else\n                {\n                    int currentRowCountForVerify = 0;\n                    foreach (DataTable dt in ds.Tables)\n                    {\n                        currentRowCountForVerify = currentRowCountForVerify + dt.Rows.Count;\n                    }\n\n                    if (currentRowCountForVerify.Equals(0))\n                    {\n                        if (this.filter == null || !this.filter.IsQuerying)\n                            ClientCommonFunction.ShowMessageBox(\"No record is found\");\n                        if (checkBoxBatchreport.Checked)\n                        {\n                            if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                            {\n                                buttonClear_Click(null, null);\n\n                            }\n                        }\n                        //US27953-非批量情况下，为显示及时结果，如无数据一律执行清除GRIDVIEW操作\n                        #region\n                        else\n                        {\n                            buttonClear_Click(null, null);\n\n                        }\n                        #endregion\n                        return;\n                    }\n                }\n                #endregion\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 3, _strPrevCondition = \" + _strPrevCondition, \"\", 0);\n\n                _iCurRowsCount = ds.Tables[0].Rows.Count;\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 4, sending to printer ok\", \"\", 0);\n\n                this._listReport.ColumnIndexChanged -= new Telerik.WinControls.UI.ColumnIndexChangedEventHandler(this._listReport_ColumnIndexChanged);\n                ClientCommonFunction.GenerateGridHeader(_PanelName, _listReport);\n\n                // 2017-05-23, Oscar added. (US39998)\n                if (this.filter != null) this.filter.RegenerateColumns();\n\n                this._listReport.ColumnIndexChanged += new Telerik.WinControls.UI.ColumnIndexChangedEventHandler(this._listReport_ColumnIndexChanged);\n\n                ClientCommonFunction.LocalizeGridHeader(_listReport);\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 5, make columns ok\", \"\", 0);\n\n                //US27953-100021854\n                #region\n                DataSet BatchDsTemp = ds.Copy();\n                #endregion\n\n                #region QuickPrint\n                if (_chkQuickPrint.Checked)\n                {\n                    //if (_iCurRowsCount == 1)\n                    if (isOnlyOneReport(ds.Tables[0]))\n                    {\n                        //Must be Approved\n                        //if (ReportCommon.Converter.toInt(ds.Tables[0].Rows[0][ReportCommon.ReportCommon.FIELDNAME_RPSTATUS]) == (int)ReportCommon.RP_Status.FirstApprove)\n                        //{\n                        string strPatientType = System.Convert.ToString(ds.Tables[0].Rows[0][ReportCommon.ReportCommon.FIELDNAME_ORDER_PATIENTTYPE]);\n                        //US27953-3,4,7\n                        #region\n                        bool printOrNot = false;\n                        if (verifyCurrentSearchedReportPRsApproveStatus(ds.Tables[0]).Equals(\"2\")) //全部未审\n                        {\n                            if (verifyCurrentSearchedReportUnApprovePRsPrintOrNot(ds.Tables[0], _canPrintPatientTypes, strPatientType)) //未审打印条件判断\n                            {\n                                printOrNot = true;\n                            }\n                            else\n                            {\n                                printOrNot = false;\n                            }\n\n                            if (printOrNot.Equals(false))\n                            {\n\n                                ClientCommonFunction.ShowMessageBox(\"Some report didn't meet print conditions\");\n                                //US27953-6. 如果不符合快速打印的条件，则列表中显示查询结果；\n                                #region\n                                //setTerminalSearchResultToGridView(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice, ds);\n                                #endregion\n                            }\n                            else\n                            {\n\n                                string reportGuid = System.Convert.ToString(ds.Tables[0].Rows[0][ReportCommon.ReportCommon.FIELDNAME_REPORTGUID]);\n\n                                // 2017-04-17, Oscar added. (US38531, Defect 100039253)\n                                if (!requireResume)\n                                {\n                                    this._listReport.SuspendUpdate();\n                                    this._listReport.SuspendLayout();\n                                    this._listReport.DataSource = ds.Tables[\"ReportPage\"];\n                                    requireResume = true;\n                                }\n\n                                _listReport.Tag = ds.Tables[\"ReportList\"];\n\n\n                                if (PrintReport3(true, ref reportGuid))\n                                {\n                                    ClientCommonFunction.UpdateDataTableText(ds.Tables[\"ReportPage\"], _listReport);\n                                    ClientCommonFunction.PrepareImageColumnForGridBinding(ds.Tables[\"ReportPage\"], _PanelName);\n                                    //US27953-新需求，快打成功后的绑定动作也交给BATCH\n                                    #region\n                                    //_listReport.DataSource = ds.Tables[\"ReportPage\"];\n                                    //_listReport.Tag = ds.Tables[\"ReportList\"];\n                                    #endregion\n\n                                    //if (ReportCommon.Converter.toInt(ds.Tables[0].Rows[0][_RPSTATUS]) == (int)ReportCommon.RP_Status.FirstApprove && !string.IsNullOrWhiteSpace(reportGuid))\n                                    //{\n                                    //    SetDataTablePrint(ds.Tables[0], reportGuid);\n                                    //}\n\n                                    #region Modified by Blue for [RC617] - US17985, 07/23/2014\n                                    if (_mode == 1 && this.chkQuickSendFilm.Checked)\n                                    {\n                                        if (ds.Tables[\"ReportList\"].Rows.Count > 0)\n                                        {\n                                            SendFilm();\n                                            //US27953-2:查询不出来的结果，保留查询条件，提示用户未找到满足打印条件的报告；\n                                            #region\n                                            //_conditionBuilder.Clear(\"\");\n                                            #endregion\n\n                                        }\n                                        else\n                                        {\n                                            ClientCommonFunction.ShowMessageBox(\"No record is found\");\n\n                                            if (checkBoxBatchreport.Checked)\n                                            {\n                                                if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                                                {\n                                                    buttonClear_Click(null, null);\n\n                                                }\n                                            }\n                                            //US27953-非批量情况下，为显示及时结果，如无数据一律执行清除GRIDVIEW操作\n                                            #region\n                                            else\n                                            {\n                                                buttonClear_Click(null, null);\n\n                                            }\n                                            #endregion\n                                        }\n                                    }\n                                    #endregion\n                                }\n\n\n                            }\n\n                        }\n                        else if (verifyCurrentSearchedReportPRsApproveStatus(ds.Tables[0]).Equals(\"1\"))//全部已审\n                        #endregion\n                        {\n\n                            string reportGuid = System.Convert.ToString(ds.Tables[0].Rows[0][ReportCommon.ReportCommon.FIELDNAME_REPORTGUID]);\n\n                            // 2017-04-17, Oscar added. (US38531, Defect 100039253)\n                            if (!requireResume)\n                            {\n                                this._listReport.SuspendUpdate();\n                                this._listReport.SuspendLayout();\n                                this._listReport.DataSource = ds.Tables[\"ReportPage\"];\n                                requireResume = true;\n                            }\n\n                            _listReport.Tag = ds.Tables[\"ReportList\"];\n\n                            if (PrintReport3(true, ref reportGuid))\n                            {\n                                ClientCommonFunction.UpdateDataTableText(ds.Tables[\"ReportPage\"], _listReport);\n                                ClientCommonFunction.PrepareImageColumnForGridBinding(ds.Tables[\"ReportPage\"], _PanelName);\n                                //US27953-100021854\n                                #region\n                                if (isReprintAlerted.Equals(false))\n                                {\n                                    //US27953-新需求，快打成功后的绑定动作也交给BATCH\n                                    #region\n                                    //_listReport.DataSource = ds.Tables[\"ReportPage\"];\n                                    //_listReport.Tag = ds.Tables[\"ReportList\"];\n                                    #endregion\n                                }\n                                else\n                                {\n                                    isReprintAlerted = false;\n                                }\n                                #endregion\n\n                                //if (ReportCommon.Converter.toInt(ds.Tables[0].Rows[0][_RPSTATUS]) == (int)ReportCommon.RP_Status.FirstApprove && !string.IsNullOrWhiteSpace(reportGuid))\n                                //{\n                                //    SetDataTablePrint(ds.Tables[0], reportGuid);\n                                //}\n\n                                #region Modified by Blue for [RC617] - US17985, 07/23/2014\n                                if (_mode == 1 && this.chkQuickSendFilm.Checked)\n                                {\n                                    if (ds.Tables[\"ReportList\"].Rows.Count > 0)\n                                    {\n                                        SendFilm();\n                                        //US27953-2:查询不出来的结果，保留查询条件，提示用户未找到满足打印条件的报告；\n                                        #region\n                                        //_conditionBuilder.Clear(\"\");\n                                        #endregion\n\n                                    }\n                                    else\n                                    {\n                                        ClientCommonFunction.ShowMessageBox(\"No record is found\");\n\n                                        if (checkBoxBatchreport.Checked)\n                                        {\n                                            if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                                            {\n                                                buttonClear_Click(null, null);\n\n                                            }\n                                        }\n                                        //US27953-非批量情况下，为显示及时结果，如无数据一律执行清除GRIDVIEW操作\n                                        #region\n                                        else\n                                        {\n                                            buttonClear_Click(null, null);\n\n                                        }\n                                        #endregion\n                                    }\n                                }\n                                #endregion\n                            }\n\n\n\n                        }\n                        else\n                        {\n\n                            ClientCommonFunction.ShowMessageBox(\"Current order has some unfinished Prs, please select one of them and print manually\");\n                            //US27953-6. 如果不符合快速打印的条件，则列表中显示查询结果；\n                            #region\n                            //setTerminalSearchResultToGridView(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice, ds);\n                            #endregion\n                        }\n\n\n                    }\n                    else if (ds.Tables[\"ReportList\"].Rows.Count == 0)\n                    {\n                        //US27953-2:查询不出来的结果，保留查询条件，提示用户未找到满足打印条件的报告；\n                        #region\n                        ClientCommonFunction.ShowMessageBox(\"No record is found\");\n\n                        if (checkBoxBatchreport.Checked)\n                        {\n                            if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                            {\n                                buttonClear_Click(null, null);\n\n                            }\n                        }\n                        //US27953-非批量情况下，为显示及时结果，如无数据一律执行清除GRIDVIEW操作\n                        #region\n                        else\n                        {\n                            buttonClear_Click(null, null);\n\n                        }\n                        #endregion\n                        return;\n                        #endregion\n                    }\n                    //US27953-5. 查询出来多份报告，提示用户：该检查有多份报告，不支持快速打印；\n                    #region\n                    else if (isOnlyOneReport(ds.Tables[0]).Equals(false))\n                    {\n                        ClientCommonFunction.ShowMessageBox(\"Didn't support fast print for more pieces report with one check order\");\n                        //US27953-6. 如果不符合快速打印的条件，则列表中显示查询结果；\n                        #region\n                        //setTerminalSearchResultToGridView(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice, ds);\n                        #endregion\n\n                    }\n                    #endregion\n                    //US27953-2:查询不出来的结果，保留查询条件，提示用户未找到满足打印条件的报告；\n                    #region\n                    //_conditionBuilder.Clear(\"\");\n                    #endregion\n\n\n                }\n                #endregion\n\n                else if (!this._chkQuickPrint.Checked && this.chkQuickSendFilm.Checked)\n                {\n                    if (ds.Tables[0].Rows.Count > 0)\n                    {\n                        #region Modified by Blue for [RC617] - US17985, 07/23/2014\n                        if (_mode == 1 && this.chkQuickSendFilm.Checked)\n                        {\n                            if (ds.Tables[\"ReportList\"].Rows.Count > 0)\n                            {\n                                ClientCommonFunction.UpdateDataTableText(ds.Tables[\"ReportPage\"], _listReport);\n                                ClientCommonFunction.PrepareImageColumnForGridBinding(ds.Tables[\"ReportPage\"], _PanelName);\n                                _listReport.DataSource = ds.Tables[\"ReportPage\"];\n                                _listReport.Tag = ds.Tables[\"ReportList\"];\n                                SendFilm();\n                                _conditionBuilder.Clear(\"\");\n                            }\n                            else\n                            {\n                                ClientCommonFunction.ShowMessageBox(\"No record is found\");\n                                _listReport.DataSource = ds.Tables[\"ReportPage\"];\n                                _listReport.Tag = ds.Tables[\"ReportList\"];\n                            }\n                        }\n                        #endregion\n                    }\n                    else\n                    {\n                        ClientCommonFunction.ShowMessageBox(\"No record is found\");\n                        _listReport.DataSource = ds.Tables[\"ReportPage\"];\n                        _listReport.Tag = ds.Tables[\"ReportList\"];\n                    }\n                    _conditionBuilder.Clear(\"\");\n                }\n                if (checkBoxBatchreport.Checked)\n                #region Batch\n                {\n                    if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                    {\n                        //US27953-100021853  buttonClear_Click(null, null);\n                        #region\n                        if (isReprintAlerted.Equals(false))\n                        {\n                            buttonClear_Click(null, null);\n                        }\n                        else\n                        {\n                            isReprintAlerted = false;\n                        }\n                        #endregion\n                    }\n                    //US27953-100021854\n                    #region\n                    ds = BatchDsTemp;\n                    #endregion\n\n                    if (ds.Tables[\"ReportPage\"] == null || ds.Tables[\"ReportPage\"].Rows.Count == 0)\n                    {\n                        ClientCommonFunction.ShowMessageBox_Warning(\"Can not find this record or not been finished\");\n                        return;\n                    }\n\n                    DataTable dtPage = _listReport.DataSource as DataTable;\n                    if (dtPage == null)\n                    {\n                        dtPage = ds.Tables[\"ReportPage\"];\n                    }\n                    else\n                    {\n\n\n                        foreach (DataRow dr in ds.Tables[\"ReportPage\"].Rows)\n                        {\n                            string strExpress = string.Format(\"{0}='{1}'\", ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID, dr[ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID] as string);\n                            if (dtPage.Select(strExpress).Length == 0)\n                            {\n                                dtPage.Rows.Add(dr.ItemArray);\n                            }\n                        }\n                    }\n\n                    ClientCommonFunction.UpdateDataTableText(dtPage, _listReport);\n                    ClientCommonFunction.PrepareImageColumnForGridBinding(dtPage, _PanelName);\n                    _listReport.DataSource = dtPage;\n                    _listReport.Tag = dtPage;// ds.Tables[\"ReportList\"];\n\n                    if (_listReport.Rows.Count > 0)\n                    {\n\n                        GridTableElement tableElement = this._listReport.CurrentView as GridTableElement;\n                        GridViewRowInfo row = this._listReport.Rows[_listReport.Rows.Count - 1];\n\n                        if (tableElement != null && row != null)\n                        {\n                            tableElement.ScrollToRow(row);\n                        }\n                    }\n\n\n                }\n                #endregion\n                else\n                {\n                    ClientCommonFunction.UpdateDataTableText(ds.Tables[\"ReportPage\"], _listReport);\n                    ClientCommonFunction.PrepareImageColumnForGridBinding(ds.Tables[\"ReportPage\"], _PanelName);\n                    _listReport.DataSource = ds.Tables[\"ReportPage\"];\n                    _listReport.Tag = ds.Tables[\"ReportList\"];\n                }\n\n                // 2017-04-17, Oscar added. (US38531, Defect 100039253)\n                if (requireResume)\n                {\n                    this._listReport.ResumeUpdate();\n                    this._listReport.ResumeLayout(false);\n                }\n\n                //_listReport.Tag = ds.Tables[\"ReportList\"];\n\n                ////ClientCommonFunction.UpdateGridText(_listReport);\n\n                //ClientCommonFunction.LocalizeFlexGrid(_listReport);\n\n                //_listReport.DataSource = ds.Tables[\"ReportPage\"];\n                //ClientCommonFunction.UpdateDataGridText(_listReport);\n\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 6, Binding ok\", \"\", 0);\n\n                // ClientCommonFunction.LocalizeGridHeader(_listReport);\n                AddRPStatusColumn();\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 7, Localization ok\", \"\", 0);\n\n                if (_chkQuickPrint.Checked || this.chkQuickSendFilm.Checked || checkBoxBatchreport.Checked)\n                {\n                    _conditionBuilder.Focus();\n                    //US27953-2:查询不出来的结果，保留查询条件，提示用户未找到满足打印条件的报告；\n                    #region\n                    //US27953-结果不为空时才清理GRIDVIEW,结果为空时要清理\n                    #region\n                    if ((_listReport.DataSource as DataTable).Rows.Count != 0)\n                    {\n                        _conditionBuilder.Clear(\"AccNo,PatientID\");\n                    }\n                    #endregion\n                    #endregion\n                }\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 8\", \"\", 0);\n                _manualSort = false;\n                Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.FrameWorkUI.FlexGridRememberSort(\n                    _listReport, _PanelName);\n                _manualSort = true;\n                lblSelectedCount.Text = ClientCommonFunction.GetLanguage(\"SelectedCount\") + _listReport.SelectedRows.Count.ToString();\n\n                ClientCommonFunction.SelectGridRow(_listReport, 0);\n\n                ClientCommonFunction.RISLog_Info(0, \"BindDataSet 60, Async Request Count\", \"\", 0);\n\n                string cond = string.Empty;\n\n                if (_bOnlyShowApproved)\n                {\n                    if (string.IsNullOrEmpty(_strPrevCondition))\n                        cond = \"  tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n                    else\n                        cond = _strPrevCondition + \" and tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n                }\n                else\n                {\n                    if (string.IsNullOrEmpty(_strPrevCondition))\n                        cond = \"  tRegProcedure.status >=\" + System.Convert.ToInt32(ReportCommon.RP_Status.CheckIn).ToString();\n                    else\n                        cond = _strPrevCondition + \" and tRegProcedure.status >=\" + System.Convert.ToInt32(ReportCommon.RP_Status.CheckIn).ToString();\n                }\n                //US27953-1. 快速打印checked，病人编号只查询创建时间是最新的order或放射编号查询；\n                #region\n                if (isQuickPrintAsPID)\n                {\n                    //US27953-创建时间是最新的order,而非部位\n                    #region\n                    //cond += \" and tRegProcedure.CreateDt=(select max(a.CreateDt) from tRegProcedure a,tRegOrder b,tRegPatient c where a.OrderGuid=b.OrderGuid and b.PatientGuid=c.PatientGuid and c.PatientID='\"+currentPid.Trim()+\"')\";\n                    cond += \" and tRegOrder.CreateDt=(select max(b.CreateDt) from tRegProcedure a,tRegOrder b,tRegPatient c where a.OrderGuid=b.OrderGuid and b.PatientGuid=c.PatientGuid and c.PatientID='\" + currentPid.Trim() + \"')\";\n                    #endregion\n                }\n                #endregion\n\n                // 2017-05-23, Oscar added. (US39998)\n                if (this.filter != null) cond = this.filter.GetQueryCondition(cond);\n\n                _asyncCount.Start(cond);\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet END\", \"\", 0);\n                //this._listReport.MasterGridViewTemplate.BestFitColumns();\n                //foreach (GridViewDataColumn col in _listReport.Columns)\n                //{\n                //    string colName = col.FieldName.ToUpper();\n                //    if (col.IsVisible && !colName.EndsWith(\"WYSTEXT\") && !colName.EndsWith(\"WYGTEXT\") && !colName.EndsWith(\"COMMENTS\") && !colName.EndsWith(\"HEALTHHISTORY\") && !colName.EndsWith(\"OBSERVATION\"))\n                //        col.BestFit();\n                //}\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.Assert(false, ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n            RCCommonFunction.Performance(\"4007\", \"End\", \"Query print report list\");\n            //US31620\n            #region\n            ClientFrameworkBuilder.Instance.FrameWorkUI.SetGridViewColumnWidthByUserProfile(this._listReport, \"ReportPrint\", \"0400\");\n            #endregion\n        }\n        //US27953-1. 快速打印checked，病人编号只查询创建时间是最新的order或放射编号查询；\n        #region\n        bool isQuickPrintAsPID = false;\n        string currentPid = \"\";\n        #endregion\n        private void ConditionBuilder_OnReturnCondition()\n        {\n            if (_chkQuickPrint.Checked || this.chkQuickSendFilm.Checked)\n            {\n                string strCond = _conditionBuilder.GetCondition().ToUpper();\n                if (strCond.IndexOf(\"TREGPATIENT.PATIENTID\") < 0 && strCond.IndexOf(\"TREGORDER.ACCNO\") < 0)\n                {\n                    return;\n                }\n                //US27953-1. 快速打印checked，病人编号只查询创建时间是最新的order或放射编号查询；\n                #region\n                if (strCond.IndexOf(\"TREGPATIENT.PATIENTID\") > 0)\n                {\n                    //US27953-100021849\n                    #region\n                    if (strCond.Contains(\"%\") && strCond.ToUpper().Contains(\"LIKE\"))\n                    {\n                        //LIKE改为等号\n                        strCond = strCond.Replace(\"LIKE\", \"=\");\n                        //%去除\n                        strCond = strCond.Replace(strCond.Substring(strCond.IndexOf(\"'\") + 1, strCond.IndexOf(\"')\") - strCond.IndexOf(\"'\") - 1), strCond.Substring(strCond.IndexOf(\"'\") + 1, strCond.IndexOf(\"')\") - strCond.IndexOf(\"'\") - 1).Replace(\"%\", \"\").Trim());\n                    }\n                    #endregion\n                    isQuickPrintAsPID = true;\n                    currentPid = strCond.Substring(strCond.IndexOf(\"'\") + 1, strCond.IndexOf(\"')\") - strCond.IndexOf(\"'\") - 1);\n\n                }\n                if (strCond.IndexOf(\"TREGORDER.ACCNO\") > 0)\n                {\n\n                    isQuickPrintAsPID = false;\n\n                }\n                #endregion\n            }\n            //US27953-1. 快速打印checked，病人编号只查询创建时间是最新的order或放射编号查询；\n            #region\n            else\n            {\n                isQuickPrintAsPID = false;\n            }\n            #endregion\n\n            BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice);\n\n            //if (_chkQuickPrint.Checked && _iCurRowsCount == 1)\n            //{\n            //    PrintReports();\n            //}\n        }\n\n        /// <summary>\n        /// GetReportName From Client\n        /// </summary>\n        /// <param name=\"reportGuid\"></param>\n        /// <returns></returns>\n        private string GetReportNameFromClient(string reportGuid)\n        {\n            string rptName = \"\";\n\n            if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORTNAME))\n            {\n                foreach (GridViewDataRowInfo r in _listReport.Rows)\n                {\n                    if (r.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString().ToUpper() == reportGuid.ToUpper())\n                    {\n                        rptName = r.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTNAME].Value.ToString();\n                        break;\n                    }\n                }\n            }\n\n            rptName = rptName.Trim();\n\n            if (rptName == null || rptName == \"\")\n            {\n                rptName = ClientCommonFunction.GetReportName(reportGuid);\n            }\n\n            return rptName;\n        }\n\n        /// <summary>\n        /// GetPatientName From Client\n        /// </summary>\n        /// <param name=\"reportGuid\"></param>\n        /// <returns></returns>\n        private string GetPatientNameFromClient(string reportGuid)\n        {\n            string rptName = \"\";\n\n            if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME))\n            {\n                foreach (GridViewDataRowInfo r in _listReport.Rows)\n                {\n                    if (r.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString().ToUpper() == reportGuid.ToUpper())\n                    {\n                        rptName = r.Cells[ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME].Value.ToString();\n                        break;\n                    }\n                }\n            }\n\n            rptName = rptName.Trim();\n\n            if (rptName == null || rptName == \"\")\n            {\n                DataSet ds = ClientCommonFunction.GetReportShortInfoDataSet(reportGuid, \"\");\n                rptName = System.Convert.ToString(ds.Tables[0].Rows[0][ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME]);\n            }\n\n            return rptName;\n        }\n\n        private void getReportRelatedInfo(string reportGuid, ref string patientName, ref string accNo, ref string rpDesc)\n        {\n            DataSet ds = ClientCommonFunction.GetReportShortInfoDataSet(reportGuid, \"\");\n\n            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)\n            {\n                patientName = System.Convert.ToString(ds.Tables[0].Rows[0][ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME]);\n                accNo = System.Convert.ToString(ds.Tables[0].Rows[0][ReportCommon.ReportCommon.FIELDNAME_ACCNO]);\n\n                foreach (DataRow dr in ds.Tables[0].Rows)\n                {\n                    rpDesc += System.Convert.ToString(dr[ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODEDESC]) + \",\";\n                }\n\n                rpDesc = rpDesc.Trim(\", \".ToCharArray());\n            }\n        }\n\n        /// <summary>\n        /// GetPatientName From Client\n        /// </summary>\n        /// <param name=\"reportGuid\"></param>\n        /// <returns></returns>\n        private object GetColumnValueFromClientFlexGrid(string reportGuid, C1FlexGrid reportList, string columnName)\n        {\n            object colValue = null;\n\n            if (_listReport.Columns.Contains(columnName))\n            {\n                foreach (GridViewDataRowInfo r in _listReport.Rows)\n                {\n                    if (r.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString().ToUpper() == reportGuid.ToUpper())\n                    {\n                        colValue = r.Cells[columnName].Value;\n                        break;\n                    }\n                }\n            }\n            return colValue;\n        }\n\n        private object GetColumnValueFromClientFlexGrid(string reportGuid, CSGridView reportList, string columnName)\n        {\n            object colValue = null;\n\n            if (_listReport.Columns.Contains(columnName))\n            {\n                foreach (GridViewDataRowInfo r in _listReport.Rows)\n                {\n                    if (r.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString().ToUpper() == reportGuid.ToUpper())\n                    {\n                        colValue = System.Convert.ToString(r.Cells[columnName].Value);\n                        break;\n                    }\n                }\n            }\n            return colValue;\n        }\n\n        private string GetReportInfoFromClient(string reportGuid, string fieldName)\n        {\n            string ret = \"\";\n\n            if (_listReport.Columns.Contains(fieldName))\n            {\n                foreach (GridViewDataRowInfo r in _listReport.Rows)\n                {\n                    if (r.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString().ToUpper() == reportGuid.ToUpper())\n                    {\n                        ret = r.Cells[fieldName].Value.ToString();\n                        break;\n                    }\n                }\n            }\n\n            if (ret == null || (ret = ret.Trim()) == \"\")\n            {\n                ret = ClientCommonFunction.GetReportInfo(reportGuid, fieldName);\n            }\n\n            return ret;\n        }\n\n        private void _btnFirstPage_Click(object sender, EventArgs e)\n        {\n            _iCurPage = 0;\n\n            BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice);\n        }\n\n        private void _btnPrevPage_Click(object sender, EventArgs e)\n        {\n            _iCurPage = _iCurPage < 1 ? 0 : (_iCurPage - 1);\n\n            BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice);\n        }\n\n        private void _btnNextPage_Click(object sender, EventArgs e)\n        {\n            _iCurPage = _iCurPage < 0 ? 0 : (_iCurPage + 1);\n\n            BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice);\n        }\n\n        private void _btnLastPage_Click(object sender, EventArgs e)\n        {\n            if (_btnLastPage.Tag != null)\n            {\n                _iCurPage = (int)_btnLastPage.Tag - 1;\n            }\n            else\n            {\n                _iCurPage = 0;\n            }\n\n            BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice);\n        }\n\n        private void _btnPrint_Click(object sender, EventArgs e)\n        {\n            try\n            {\n\n                PrintReports();\n            }\n            catch (Exception ex)\n            {\n                //ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        private void _btnLog_Click(object sender, EventArgs e)\n        {\n            foreach (GridViewDataRowInfo row in _listReport.Rows)\n            {\n                if (row.IsSelected)\n                {\n                    string reportGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString();\n\n                    using (PrintLogFrm logFrm = new PrintLogFrm(reportGuid))\n                    {\n                        logFrm.ShowDialog();\n                    }\n\n                    break;\n                }\n            }\n        }\n\n        private void _btnTemplate_Click(object sender, EventArgs e)\n        {\n            string templateName = \"\";\n            string modalityType = \"\";\n            string templateFile = Kodak.GCRIS.Client.Common.PrintTemplate.PrintTemplateUtility.GetPrintTemplateAndModalityType(out templateName, out modalityType, 3);\n\n            if (templateFile != null && templateFile.Length > 0 && System.IO.File.Exists(templateFile))\n            {\n                _bDefaultTemplate = false;\n                _txtCurrentTemplate.Text = templateName;\n                string localFile = ClientCommonFunction.GetCurrentWorkPath() + \"\\\\Template_print.xml\";\n\n                ClientCommonFunction.OverwriteFile(templateFile, localFile);\n                //get the print template guid from the template file name!\n                int idx = templateFile.LastIndexOf(\"Template\");\n                if (idx > 0)\n                {\n                    int GuidLen = Guid.NewGuid().ToString().Length;\n\n                    _printTemplateGuid = templateFile.Substring(idx - GuidLen - 1, GuidLen);\n                }\n            }\n            else\n            {\n                //_bDefaultTemplate = true;\n                //_txtCurrentTemplate.Text = ClientCommonFunction.GetLanguage(\"Default\");\n            }\n            _printTemplateGuidCurrentSelected = _printTemplateGuid;\n            _printTemplateModalityType = modalityType;\n\n            ClientCommonFunction.LocalizeControlText(this);\n        }\n\n        private void _chkQuickPrint_CheckedChanged(object sender, EventArgs e)\n        {\n            ClientFrameworkBuilder.Instance.CommonManager.SetDefaultValue(\"ReportPrint\", \"QuickPrint\", _chkQuickPrint.Checked);\n        }\n\n        private void chkQuickSendFilm_CheckedChanged(object sender, EventArgs e)\n        {\n            ClientFrameworkBuilder.Instance.CommonManager.SetDefaultValue(\"ReportPrint\", \"QuickSendFilm\", this.chkQuickSendFilm.Checked);\n        }\n\n        private void _chkShowOrderMessage_CheckedChanged(object sender, EventArgs e)\n        {\n            ClientFrameworkBuilder.Instance.CommonManager.SetDefaultValue(\"ReportPrint\", \"ShowOrderMessage\", _chkShowOrderMessage.Checked);\n        }\n\n        private void checkBoxBatchreport_ToggleStateChanged(object sender, StateChangedEventArgs args)\n        {\n            ClientFrameworkBuilder.Instance.CommonManager.SetDefaultValue(\"ReportPrint\", \"BatchReport\", checkBoxBatchreport.Checked);\n        }\n\n        private void checkboxBatchFilm_ToggleStateChanged(object sender, StateChangedEventArgs args)\n        {\n            ClientFrameworkBuilder.Instance.CommonManager.SetDefaultValue(\"ReportPrint\", \"BatchFilm\", checkboxBatchFilm.Checked);\n        }\n\n        private bool isCurosrInControl(Control ctrl)\n        {\n            Point pt = ctrl.PointToClient(Cursor.Position);\n\n            if (pt.X >= 0 && pt.Y >= 0 &&\n                pt.X <= ctrl.Width &&\n                pt.Y <= ctrl.Height)\n            {\n                return true;\n            }\n\n            return false;\n        }\n\n        private void PrintReports()\n        {\n            string reportGuid = \"\";\n            string accNos = \"\";\n            string strWarninng = \"No row selected!\";\n            bool inPeriod4PrintUnapproved = false;\n\n            if (_bOnlyShowApproved)\n            {\n                strWarninng = \"The report is not approved,Can not Print\";\n            }\n            else\n            {\n                if (_canPrintUnapprovedReport)\n                {\n                    inPeriod4PrintUnapproved = CanPrintUnapprovedReport();\n                    if (inPeriod4PrintUnapproved)\n                    {\n                        strWarninng = \"The unapproved reports(ACCNO:{0}) without allow-print patient type can not be printed!\";\n                    }\n                    else\n                    {\n                        strWarninng = \"The unapproved reports can not be printed now!\";\n                    }\n                }\n                else\n                {\n                    strWarninng = \"You have no authority to print unapproved reports\";\n                }\n            }\n\n            List<string> unapprovedReportGuidList = new List<string>();\n            List<string> approvedReportGuidList = new List<string>();\n\n            foreach (GridViewDataRowInfo row in _listReport.Rows)\n            {\n                string strAccNo = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value.ToString();\n                string strPatientType = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_PATIENTTYPE].Value.ToString();\n                if (checkBoxBatchreport.Checked)\n                {\n                    string strTemp = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString();\n                    if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) != (int)ReportCommon.RP_Status.FirstApprove)\n                    {\n                        if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) <= (int)ReportCommon.RP_Status.Examination)\n                        {\n                            continue;\n                        }\n\n                        if (!unapprovedReportGuidList.Contains(strTemp))\n                        {\n                            unapprovedReportGuidList.Add(strTemp);\n                        }\n\n                        if (inPeriod4PrintUnapproved)\n                        {\n                            if (!_canPrintPatientTypes.Contains(strPatientType))\n                            {\n                                accNos += strAccNo + \",\";\n                                continue;\n                            }\n                        }\n                        else\n                        {\n                            accNos += strAccNo + \",\";\n                            continue;\n                        }\n                    }\n                    else\n                    {\n                        if (!approvedReportGuidList.Contains(strTemp))\n                        {\n                            approvedReportGuidList.Add(strTemp);\n                        }\n                    }\n\n                    if (!reportGuid.Contains(strTemp))\n                    {\n                        reportGuid += strTemp + \",\";\n                    }\n                }\n                else\n                {\n                    if (row.IsSelected)\n                    {\n                        string strTemp = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString();\n\n                        if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) != (int)ReportCommon.RP_Status.FirstApprove)\n                        {\n                            if (_listReport.SelectedRows.Count == 1)\n                            {\n                                if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) <= (int)ReportCommon.RP_Status.Examination)\n                                {\n                                    break;\n                                }\n\n                                if (!unapprovedReportGuidList.Contains(strTemp))\n                                {\n                                    unapprovedReportGuidList.Add(strTemp);\n                                }\n\n                                if (inPeriod4PrintUnapproved)\n                                {\n                                    if (!_canPrintPatientTypes.Contains(strPatientType))\n                                    {\n                                        accNos += strAccNo + \",\";\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    accNos += strAccNo + \",\";\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) <= (int)ReportCommon.RP_Status.Examination)\n                                {\n                                    continue;\n                                }\n\n                                if (!unapprovedReportGuidList.Contains(strTemp))\n                                {\n                                    unapprovedReportGuidList.Add(strTemp);\n                                }\n\n                                if (inPeriod4PrintUnapproved)\n                                {\n                                    if (!_canPrintPatientTypes.Contains(strPatientType))\n                                    {\n                                        accNos += strAccNo + \",\";\n                                        continue;\n                                    }\n                                }\n                                else\n                                {\n                                    accNos += strAccNo + \",\";\n                                    continue;\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (!approvedReportGuidList.Contains(strTemp))\n                            {\n                                approvedReportGuidList.Add(strTemp);\n                            }\n                        }\n\n                        if (!reportGuid.Contains(strTemp))\n                        {\n                            reportGuid += strTemp + \",\";\n                        }\n                    }\n                }\n            }\n\n            reportGuid = reportGuid.Trim(\", \".ToCharArray());\n            accNos = accNos.Trim(\", \".ToCharArray());\n\n            if (reportGuid.Length < 1 && accNos.Length < 1)\n            {\n                if (_listReport.SelectedRows.Count == 0)\n                {\n                    strWarninng = \"No row selected!\";\n                }\n                else\n                {\n                    strWarninng = \"Selected rows have not reports!\";\n                }\n                ClientCommonFunction.ShowMessageBox_Warning(strWarninng);\n                return;\n            }\n\n            if (checkBoxBatchreport.Checked)\n            {\n                if (ClientCommonFunction.ShowMessageBox_Question3(\"Should print all reports in the list, do you continue?\") == DialogResult.No)\n                {\n                    return;\n                }\n            }\n\n            if (_bSignBeforePrintReport)\n            {\n                buttonGrant_Click(null, null);\n            }\n\n            if (_canPrintUnapprovedReport)\n            {\n                if (_canPopupWarningMsg4PrintUnapprovedReport && unapprovedReportGuidList.Count > 0)\n                {\n                    if (ClientCommonFunction.ShowMessageBox_Question3(\"Contains unapproved report, do you want to continue to print?\") == DialogResult.Yes)\n                    {\n                        if (reportGuid.Length > 0)\n                        {\n                            PrintReport3(true, ref reportGuid);\n                        }\n                    }\n                    else\n                    {\n                        if (approvedReportGuidList.Count > 0)\n                        {\n                            string approvedReportGuids = string.Join(\",\", approvedReportGuidList);\n                            PrintReport3(true, ref approvedReportGuids);\n                            accNos = string.Empty;\n                        }\n                    }\n                }\n                else\n                {\n                    if (reportGuid.Length > 0)\n                    {\n                        PrintReport3(true, ref reportGuid);\n                    }\n                }\n            }\n            else\n            {\n                if (approvedReportGuidList.Count > 0)\n                {\n                    string approvedReportGuids = string.Join(\",\", approvedReportGuidList);\n                    PrintReport3(true, ref approvedReportGuids);\n                    accNos = string.Empty;\n                }\n            }\n\n            if (accNos.Length > 0)\n            {\n                ClientFrameworkBuilder.Instance.CommonManager.ShowMsgBox(\n                string.Format(ClientCommonFunction.GetLanguage(strWarninng), accNos),\n                System.Windows.Forms.MessageBoxButtons.OK,\n                System.Windows.Forms.MessageBoxIcon.Warning);\n            }\n        }\n\n        private bool CanPrintUnapprovedReport()\n        {\n            DateTime now = DateTime.Now;\n            foreach (string[] arr in _canPrintTimes)\n            {\n                try\n                {\n                    if (now.CompareTo(Convert.ToDateTime(now.ToString(\"yyyy/MM/dd\") + \" \" + arr[0])) >= 0\n                        && now.CompareTo(Convert.ToDateTime(now.ToString(\"yyyy/MM/dd\") + \" \" + arr[1])) <= 0)\n                    {\n                        return true;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    ClientCommonFunction.RISLog_Error(0, \"ReportPrintPanel::CanPrintUnapprovedReport, Error=\" + ex.Message, \"\", 0);\n                }\n            }\n            return false;\n        }\n        //US27953-100021853\n        #region\n        bool isReprintAlerted = false;\n        #endregion\n        private bool PrintReport3(bool bPrintReport, ref string reportGuids)\n        {\n            try\n            {\n\n                #region Check Printer\n                {\n                    //string curPrinter = ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"DefaultPrinter\", \"0000\");\n\n                    //if (!IsExistPrinter(curPrinter))\n                    if (!ClientCommonFunction.IsExistPrinter())\n                    {\n                        ClientCommonFunction.ShowMessageBox_Error(\"Invalid printer setting!\");\n\n                        return false;\n                    }\n                }\n                #endregion\n\n                string[] reportGuidlist = reportGuids.Split(',');\n\n                for (int i = 0; reportGuidlist != null && i < reportGuidlist.Length; i++)\n                {\n                    string reportGuid = reportGuidlist.GetValue(i) as string;\n                    bool isApproved = Convert.ToInt32(getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, _RPSTATUS, _listReport.Tag as DataTable)) == (int)ReportCommon.RP_Status.FirstApprove;\n\n                    string isCharge = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_ORDER_ISCHARGE, _listReport.Tag as DataTable) as string;\n                    if (!ClientCommonFunction.CanPrintReportAccdCharge(isCharge))\n                    {\n                        //string PatientName = GetPatientNameFromClient(reportGuid);\n                        //string AccNo = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_ACCNO) as string;\n                        //string ProcedureCodeDescription = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODEDESC) as string;\n                        string PatientName = \"\";\n                        string AccNo = \"\";\n                        string ProcedureCodeDescription = \"\";\n                        getReportRelatedInfo(reportGuid, ref PatientName, ref AccNo, ref ProcedureCodeDescription);\n                        string prompt = \"Patient Name:{0},AccNo:{1},Procedure:{2}'s report can not be printed,because this exam has not been paid!\";\n                        prompt = ClientCommonFunction.GetLanguage(prompt);\n                        prompt = string.Format(prompt, PatientName, AccNo, ProcedureCodeDescription);\n                        ClientCommonFunction.ShowMessageBox_Warning(prompt);\n                        continue;\n                    }\n\n                    int numofCopiesforPrinting = getNumofCopiesforPrinting(reportGuid);\n                    if (ClientCommonFunction.IsExceedRestrictPrintCopies(reportGuid, numofCopiesforPrinting, 1))\n                    {\n                        string PatientName = GetPatientNameFromClient(reportGuid);\n                        string AccNo = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_ACCNO, _listReport.Tag as DataTable);\n\n                        string ProcedureCodeDescription = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODEDESC, _listReport.Tag as DataTable);\n\n                        string prompt = \"Patient Name:{0},AccNo:{1},Procedure:{2}'s report can not be printed,because of printing more than max report print copies is not allowed!\";\n                        prompt = ClientCommonFunction.GetLanguage(prompt);\n                        prompt = string.Format(prompt, PatientName, AccNo, ProcedureCodeDescription);\n                        ClientCommonFunction.ShowMessageBox_Warning(prompt);\n                        continue;//do next report print\n                    }\n\n                    if (_chkShowOrderMessage.Checked)\n                    {\n                        //string orderGuid = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_ORDERGUID) as string;\n                        string orderGuid = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_ORDERGUID, _listReport.Tag as DataTable);\n                        string orderMessage = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, \"tRegOrder__OrderMessage\", _listReport.Tag as DataTable);\n\n                        if (!string.IsNullOrEmpty(orderMessage))\n                        {\n                            using (Kodak.GCRIS.Client.Common.FormOrderMessage form = new Kodak.GCRIS.Client.Common.FormOrderMessage(orderGuid, true))\n                            {\n                                form.Text = getReportInfoString(reportGuid);\n                                form.ShowDialog();\n\n                                if (form.Operation == Kodak.GCRIS.Client.Common.ORDERMESSAGEOPERATION.CANCELPRINT)\n                                {\n                                    refreshGrid4OrderMessageIcon(orderGuid, form);\n\n                                    continue;\n                                }\n                                else if (form.Operation == Kodak.GCRIS.Client.Common.ORDERMESSAGEOPERATION.CANCELALLPRINT)\n                                {\n                                    refreshGrid4OrderMessageIcon(orderGuid, form);\n\n                                    return false; // break;\n                                }\n                            }\n                        }\n                    }\n                    string strOrderGuid = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_ORDERGUID) as string;\n                    if (string.IsNullOrWhiteSpace(strOrderGuid))\n                    {\n                        strOrderGuid = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_ORDERGUID, _listReport.Tag as DataTable);\n                    }\n\n                    if (isApproved)\n                    {\n                        int nResult = RePrint(true, strOrderGuid, reportGuid);\n                        if (nResult == 1)\n                        {\n                            reportGuids = reportGuids.Replace(reportGuid, \"\");\n                            continue;\n                        }\n                        else if (nResult == 2)\n                        {\n                            string PatientName = GetPatientNameFromClient(reportGuid);\n                            string AccNo = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_ACCNO, _listReport.Tag as DataTable);\n\n                            string ProcedureCodeDescription = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, _RPDESC, _listReport.Tag as DataTable);\n\n                            string prompt = \"Patient Name:{0},AccNo:{1},Procedure:{2}'s report has been printed, you can not print again!\";\n                            prompt = ClientCommonFunction.GetLanguage(prompt);\n                            prompt = string.Format(prompt, PatientName, AccNo, ProcedureCodeDescription);\n                            ClientCommonFunction.ShowMessageBox_Warning(prompt);\n                            reportGuids = reportGuids.Replace(reportGuid, \"\");\n                            //ClientCommonFunction.ShowMessageBox_Warning(ClientCommonFunction.GetLanguage(\"This record has been printed, you can not print again\"));\n                            //US27953-100021853\n                            #region\n                            isReprintAlerted = true;\n                            #endregion\n                            continue;\n                        }\n                    }\n\n                    if (PrintReport4(reportGuid, ReportCommon.ExportType.PRINTER, \"\"))\n                    {\n                        AfterPrint(reportGuid, isApproved, bPrintReport);\n                    }\n                }\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                //ClientFrameworkBuilder.Instance.CommonManager.ShowMsgBox(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, \"ReportPrintPanel::PrintReport3, Error=\" + ex.Message, \"\", 0);\n            }\n\n            return false;\n        }\n\n\n        private bool CheckLock(string reportGuid, DataTable dtReport, bool bPopup)\n        {\n\n            try\n            {\n                string myip = ClientCommonFunction.GetMyIP();\n                {\n\n                    string orderGuid = \"\", patientid = \"\", localname = \"\", accno = \"\", strRpguids = \"\";\n\n                    if (dtReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDERGUID))\n                    {\n                        orderGuid = System.Convert.ToString(dtReport.Rows[0][ReportCommon.ReportCommon.FIELDNAME_ORDERGUID]);\n                    }\n                    if (dtReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_PATIENTID))\n                    {\n                        patientid = System.Convert.ToString(dtReport.Rows[0][ReportCommon.ReportCommon.FIELDNAME_PATIENTID]);\n                    }\n                    if (dtReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_LOCALNAME))\n                    {\n                        localname = System.Convert.ToString(dtReport.Rows[0][ReportCommon.ReportCommon.FIELDNAME_LOCALNAME]);\n                    }\n                    if (dtReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ACCNO))\n                    {\n                        accno = System.Convert.ToString(dtReport.Rows[0][ReportCommon.ReportCommon.FIELDNAME_ACCNO]);\n                    }\n                    if (dtReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID))\n                    {\n                        strRpguids = System.Convert.ToString(dtReport.Rows[0][ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID]);\n                    }\n\n\n                    Dictionary<string, string> paramMap = new Dictionary<string, string>();\n                    paramMap.Add(\"lockType\", System.Convert.ToInt32(ReportCommon.LockType.Register).ToString());\n                    paramMap.Add(\"lockGuid\", orderGuid);\n                    paramMap.Add(\"Action\", \"QUERY\");\n                    paramMap.Add(\"Owner\", ClientFrameworkBuilder.Instance.LoginManager.GetUserGuid());\n                    paramMap.Add(\"OwnerIP\", myip);\n                    paramMap.Add(\"RpGuids\", strRpguids);\n                    paramMap.Add(\"PatientID\", patientid);\n                    paramMap.Add(\"LocalName\", localname);\n                    paramMap.Add(\"AccNo\", accno);\n\n\n                    Context context = new Context();\n                    context.MessageName = \"Rpt_GetLock\";\n                    context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n                    DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n\n                    if (dsrt != null && dsrt.DataSetData != null &&\n                        dsrt.DataSetData.Tables.Count > 0 && dsrt.DataSetData.Tables[0].Rows.Count > 0)\n                    {\n                        if (bPopup)\n                        {\n                            ClientCommonFunction.ShowMessageBox_Warning(\"This record has been locked, Print it late please\");\n                        }\n                        return true;\n\n                    }\n\n                }\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n\n            return false;\n\n        }\n\n        //update file to ftp for SR\n        private void SRCallback(object sender, EventArgs e)\n        {\n            if (_isSR)\n            {\n                string snapShotSrvPath = \"\";\n                if (ClientCommonFunction.GetReportProfile_BOOL(ReportCommon.ProfileName.Report_NeedSaveFileOnExport))\n                {\n                    snapShotSrvPath = SavePrintingSnapshotToFtpServer(_filepath, _reportGuid);\n                }\n\n                ClientCommonFunction.RecordPrintLog(_reportGuid, 1, \"\", snapShotSrvPath, ReportCommon.ReportCommon.LOGTYPEEXPORT, _printTemplateGuid);\n            }\n        }\n\n        /// <summary>\n        /// PrintReport4\n        /// </summary>\n        /// <param name=\"reportGuid\"></param>\n        /// <param name=\"outType\"></param>\n        /// <param name=\"fileName\"></param>\n        private bool PrintReport4(string reportGuid, ReportCommon.ExportType outType, string fileName)\n        {\n\n\n\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 0, Get data from Server, reportGuid = \" + reportGuid + \", type=\" + outType.ToString() + \", filename=\" + fileName, \"\", 0);\n\n            #region Data from Server\n            DataSet dsReportInfo = ClientCommonFunction.GetReportInfoDataSet(reportGuid, \"\");\n\n            DataTable dtReportInfo = null;\n            DataTable dtReportFile = null;\n\n            #region Added by Kevin For SR 27/10/2015\n            string srnaturalhtml = ClientCommonFunction.GetSingleStringFromDataTable(dsReportInfo.Tables[3], \"NaturalContentHtml\");\n\n            if (!String.IsNullOrEmpty(srnaturalhtml))\n            {\n                _srPrintHelper.BodyHtml = srnaturalhtml;\n                LoadReportInfoFromDataSet(dsReportInfo);\n                SetSignImage(dsReportInfo);\n                _srPrintHelper.FildFieldsMap = _fieldsMap;\n            }\n            #endregion\n            if (dsReportInfo.Tables.Contains(\"ReportInfo\"))\n            {\n                dtReportInfo = dsReportInfo.Tables[\"ReportInfo\"];\n            }\n\n            if (dtReportInfo == null || dtReportInfo.Rows.Count < 1)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(\"Fail to print!\");\n\n                ClientCommonFunction.RISLog_Error(0, \"Fail to print, because of failing to get report info.\", \"\", 0);\n                return false;\n            }\n            //Check the report is been locked or not\n            if (CheckLock(reportGuid, dtReportInfo, true))\n            {\n                return false;\n            }\n\n            if (!_dicRptInfo.ContainsKey(reportGuid.ToUpper()))\n            {\n                _dicRptInfo.Add(reportGuid.ToUpper(), dtReportInfo);\n            }\n            else\n            {\n                _dicRptInfo[reportGuid.ToUpper()] = dtReportInfo;\n            }\n\n            if (dsReportInfo.Tables.Contains(\"ReportFile\"))\n            {\n                dtReportFile = dsReportInfo.Tables[\"ReportFile\"];\n            }\n            #endregion\n\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 1, read print template\", \"\", 0);\n\n            #region template\n            #region Added by Blue for RC595 - US16558, 05/08/2014\n            int ptType = 3;\n            string isReturnVisit = ClientCommonFunction.GetStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_tReport__Optional3);\n            if (ClientCommonFunction.GetReportProfile_BOOL(\"Report_CanUseReturnVisit\") && isReturnVisit.Equals(\"1\"))\n            {\n                ptType = ClientCommonFunction.GetPrintTemplateType(\"ReturnVisit\");\n            }\n            #endregion\n            string modalityType = ClientCommonFunction.GetStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_MODALITYTYPE);\n\n            //fisrt print or modality type change or no selection template , we should reload the template\n            if (_txtCurrentTemplate.Text.Length == 0)\n            {\n                string templateName = \"\";\n                string templateFile = \"\";\n                string printTemplateGuid = \"\";\n                string localFile = \"\";\n\n                //1.first no selected template, so get the printtemplate file by the report's saved printtemplateguid\n                //2.get the print template by type and patient type\n                //3.if have never print, get the default print template by type and modality type\n                printTemplateGuid = ClientCommonFunction.GetStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTTEMPLATEGUID);\n                string szPatientType = ClientCommonFunction.GetStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_ORDER_PATIENTTYPE);\n                string szApproveSite = ClientCommonFunction.GetStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_tReport__FirstApproveSite);\n                string szApproveDomain = ClientCommonFunction.GetStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_tReport__FirstApproveDomain);\n\n                templateFile = PrintTemplateUtility.getPrintTemplateByTemplateGuid_PatientType_ModalityType_MultiSite(\n                    printTemplateGuid, ptType, modalityType, szPatientType, szApproveSite, szApproveDomain, out templateName);\n\n                localFile = ClientCommonFunction.GetCurrentWorkPath() + \"\\\\Template_print.xml\";\n\n                //get the print template guid from the template file name!\n                int idx = templateFile.LastIndexOf(\"Template\");\n                if (idx > 0)\n                {\n                    int GuidLen = Guid.NewGuid().ToString().Length;\n\n                    _printTemplateGuid = templateFile.Substring(idx - GuidLen - 1, GuidLen);\n                }\n\n                if (templateFile != null && templateFile.Length > 0 && System.IO.File.Exists(templateFile))\n                {\n                    ClientCommonFunction.OverwriteFile(templateFile, localFile);\n                }\n                else\n                {\n                    ClientCommonFunction.RISLog_Info(0, \"Failed to get print template.\", \"\", 0);\n                }\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 1_1, refresh print template, modalityType=\" + modalityType, \"\", 0);\n\n            }\n\n            //template seleted and (previous modality type is empty or current modality type is differ with previous modality type)\n            if (_txtCurrentTemplate.Text.Length > 0)\n            {\n                string templateName = \"\";\n                string templateFile = \"\";\n                string printTemplateGuid = \"\";\n                string localFile = \"\";\n                //1.first no selected template, so get the printtemplate file by the report's saved printtemplateguid\n                printTemplateGuid = ClientCommonFunction.GetStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTTEMPLATEGUID);\n\n                //selected print template's modality type not same with report's modality type, so use modality type default print template\n                if (string.IsNullOrEmpty(_printTemplateModalityType) || _printTemplateModalityType != modalityType)\n                {\n                    //modality type not same and previous has printed\n                    if (!string.IsNullOrEmpty(printTemplateGuid))\n                    {\n                        templateFile = Kodak.GCRIS.Client.Common.PrintTemplate.PrintTemplateUtility.GetPrintTemplate(out templateName, printTemplateGuid, ptType.ToString());\n                    }\n                    else//do not printed\n                    {\n                        templateFile = Kodak.GCRIS.Client.Common.PrintTemplate.PrintTemplateUtility.GetDefaultPrintTemplate(ptType, modalityType, out templateName);\n                    }\n                }\n                //use modality type same ,so use selected print template\n                else if (_printTemplateModalityType == modalityType)\n                {\n                    templateFile = Kodak.GCRIS.Client.Common.PrintTemplate.PrintTemplateUtility.GetPrintTemplate(out templateName, _printTemplateGuidCurrentSelected, ptType.ToString());\n                }\n\n                localFile = ClientCommonFunction.GetCurrentWorkPath() + \"\\\\Template_print.xml\";\n\n                //get the print template guid from the template file name!\n                int idx = templateFile.LastIndexOf(\"Template\");\n                if (idx > 0)\n                {\n                    int GuidLen = Guid.NewGuid().ToString().Length;\n\n                    _printTemplateGuid = templateFile.Substring(idx - GuidLen - 1, GuidLen);\n                }\n\n                if (templateFile != null && templateFile.Length > 0 && System.IO.File.Exists(templateFile))\n                {\n                    ClientCommonFunction.OverwriteFile(templateFile, localFile);\n                }\n                else\n                {\n                    ClientCommonFunction.RISLog_Info(0, \"Failed to get print template.\", \"\", 0);\n                }\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 1_1, refresh print template, modalityType=\" + modalityType, \"\", 0);\n            }\n\n            _strPrevModalityType = modalityType;\n\n            #endregion\n\n            //\n\n            _c1rpt.Load(ClientCommonFunction.GetCurrentWorkPath() + \"\\\\Template_print.xml\", \"Template\");\n\n            _dt4Print.TableName = _c1rpt.ReportName;\n            _dt4Print.Clear();\n\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 2, prepare data structure\", \"\", 0);\n\n            #region build table structure\n            // add columns from database\n            foreach (DataColumn col in dtReportInfo.Columns)\n            {\n                string key = col.ColumnName.ToUpper();\n\n                if (_dt4Print.Columns.Contains(key))\n                {\n                    continue;\n                }\n\n                //if (dataField.fieldType == ReportEditorCtrl_FieldType.Image ||\n                //    dataField.fieldValue.GetType() == System.Type.GetType(\"System.Byte[]\"))\n                if (dtReportInfo.Columns[key].GetType() == System.Type.GetType(\"System.Byte[]\"))\n                {\n                    _dt4Print.Columns.Add(key, System.Type.GetType(\"System.Byte[]\"));\n                }\n                else\n                {\n                    _dt4Print.Columns.Add(key, System.Type.GetType(\"System.String\"));\n                }\n            }\n\n            // add columns from template\n            foreach (C1.C1Report.Field fld in _c1rpt.Fields)\n            {\n                string key = \"\";\n                if (fld.Text != null && fld.Calculated)\n                {\n                    key = fld.Text.ToUpper().Trim();\n                    if (!_dt4Print.Columns.Contains(key))\n                        _dt4Print.Columns.Add(key, System.Type.GetType(\"System.String\"));\n                }\n                else if (fld.Picture != null)\n                {\n                    C1.C1Report.Util.PictureHolder ph = fld.Picture as C1.C1Report.Util.PictureHolder;\n\n                    if (!string.IsNullOrEmpty(fld.Name))\n                    {\n                        key = string.IsNullOrEmpty(ph.FieldName) ? fld.Name.ToUpper().Trim() : ph.FieldName; //default use picture's field name\n                        if (ph != null && ph.IsBound && !_dt4Print.Columns.Contains(key))\n                            _dt4Print.Columns.Add(key, System.Type.GetType(\"System.Byte[]\"));\n                    }\n                }\n            }\n            #endregion\n\n            DataRow dr = _dt4Print.NewRow();\n\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 3, prepare text data\", \"\", 0);\n\n            #region add text data\n            foreach (DataColumn dataFld in _dt4Print.Columns)\n            {\n                try\n                {\n                    string fieldName = dataFld.ColumnName;\n                    string key = fieldName.ToUpper();\n\n                    if (!dtReportInfo.Columns.Contains(key))\n                    {\n                        continue;\n                    }\n                    if (fieldName.ToUpper() == ReportCommon.ReportCommon.FIELDNAME_WYS.ToUpper() || fieldName.ToUpper() == ReportCommon.ReportCommon.FIELDNAME_WYG.ToUpper())\n                    {\n                        dr[key] = ClientCommonFunction.RemoveUnderline(ClientCommonFunction.GetStringForPrinting(dtReportInfo, fieldName));\n                    }\n                    else\n                    {\n                        dr[key] = ClientCommonFunction.GetStringForPrinting(dtReportInfo, fieldName);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    System.Diagnostics.Debug.WriteLine(dataFld.ColumnName + \",\" + ex.Message);\n                }\n            }\n            #endregion\n\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 4, prepare image data\", \"\", 0);\n\n            #region add image data\n            if (dtReportFile != null && dtReportFile.Rows.Count > 0)\n            {\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4, 4_0, Open ftp connection.\", \"\", 0);\n\n                FtpClient ftpClient = ClientCommonFunction.GetFtpObject();\n\n                DataView dvFile = new DataView(dtReportFile, null, \"imagePosition\", DataViewRowState.CurrentRows);\n\n                string tmpPath = ClientCommonFunction.GetCurrentWorkPath() + \"\\\\temp\";\n\n                int imageIndex = 0;\n                if (String.IsNullOrEmpty(srnaturalhtml))//not sr\n                {\n                    foreach (C1.C1Report.Field fld in _c1rpt.Fields)\n                    {\n                        if (fld == null)\n                            continue;\n\n                        if (fld.Picture != null && imageIndex < dtReportFile.Rows.Count)\n                        {\n                            C1.C1Report.Util.PictureHolder ph = fld.Picture as C1.C1Report.Util.PictureHolder;\n                            //string key = ph.FieldName.Trim().ToUpper();\n                            string key = string.IsNullOrEmpty(ph.FieldName) ? fld.Name.ToUpper().Trim() : ph.FieldName.ToUpper().Trim();\n\n                            if (ph != null && ph.IsBound && _dt4Print.Columns.Contains(key))\n                            {\n                                string fguid = dvFile[imageIndex][\"fileGuid\"] as string;\n                                string fname = dvFile[imageIndex][\"fileName\"] as string;\n                                string rpath = dvFile[imageIndex][\"RelativePath\"] as string;\n\n                                int fType = System.Convert.ToInt32(dvFile[imageIndex][\"fileType\"]);\n                                int showWidth = System.Convert.ToInt32(dvFile[imageIndex][\"showWidth\"]);\n                                int showHeight = System.Convert.ToInt32(dvFile[imageIndex][\"showHeight\"]);\n\n                                if (1 == fType)\n                                {\n                                    string localFilePath = tmpPath + \"\\\\\" + fname;\n\n                                    ClientCommonFunction.RISLog_Info(0,\n                                        \"ReportPrintPanel::PrintReport4, 4_1, fileindex=\" + imageIndex.ToString()\n                                        + \", serverPath=\" + rpath + \"\\\\\" + fname\n                                        + \", localPath=\" + localFilePath, \"\", 0);\n\n                                    ftpClient.DownloadFile(rpath + \"\\\\\" + fname, localFilePath);\n\n                                    if (System.IO.File.Exists(localFilePath))\n                                    {\n                                        using (Bitmap jpg = new Bitmap(localFilePath))\n                                        {\n                                            using (Bitmap newJpg = new Bitmap(jpg, showWidth, showHeight))\n                                            {\n                                                byte[] imagebytes = null;\n\n                                                System.IO.MemoryStream mem = new System.IO.MemoryStream();\n\n                                                newJpg.Save(mem, System.Drawing.Imaging.ImageFormat.Bmp);\n\n                                                imagebytes = mem.ToArray();\n\n                                                dr[key] = (Byte[])imagebytes;\n\n                                                if (mem != null)\n                                                    mem.Close();\n                                            }\n                                        }\n                                    }\n\n                                    System.IO.File.Delete(localFilePath);\n\n                                    ClientCommonFunction.RISLog_Info(0,\n                                        \"ReportPrintPanel::PrintReport4, 4_2, fileindex=\" + imageIndex.ToString()\n                                        + \", read OK\", \"\", 0);\n                                }\n\n                                ++imageIndex;\n                            }\n                        }\n                    }\n                }\n\n                ftpClient.Close();\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4, 4_3, Close ftp connection.\", \"\", 0);\n            }\n            #endregion\n\n\n            //{Bruce Deng 20080220\n            //Add doctor sign image to report \n            if (!_dt4Print.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_CREATORSIGNIMAGE))\n            {\n                _dt4Print.Columns.Add(ReportCommon.ReportCommon.FIELDNAME_CREATORSIGNIMAGE);\n            }\n\n            if (!_dt4Print.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE))\n            {\n                _dt4Print.Columns.Add(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE);\n            }\n\n            if (!_dt4Print.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE))\n            {\n                _dt4Print.Columns.Add(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE);\n            }\n\n            if (!_dt4Print.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_EXAMNUMBER))\n            {\n                _dt4Print.Columns.Add(ReportCommon.ReportCommon.FIELDNAME_EXAMNUMBER);\n            }\n\n            if (!_dt4Print.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE_CA))\n            {\n                _dt4Print.Columns.Add(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE_CA);\n            }\n\n            if (!_dt4Print.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE_CA))\n            {\n                _dt4Print.Columns.Add(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE_CA);\n            }\n\n            if (!_dt4Print.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNIMAGE_CA))\n            {\n                _dt4Print.Columns.Add(ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNIMAGE_CA);\n            }\n\n\n            string strReportGuid = ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_REPORTGUID);\n\n            Context context = new Context();\n            //context.Model = model;\n            context.MessageName = \"Rpt_GetSignImage\";\n            Dictionary<string, string> paramMap = new Dictionary<string, string>();\n            paramMap.Add(\"REPORTGUID\", strReportGuid);\n            context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n            DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n\n            if (dsrt.Result && dsrt.DataSetData.Tables[\"CreaterSignImage\"] != null && dsrt.DataSetData.Tables[\"CreaterSignImage\"].Rows.Count > 0)\n            {\n                dr[ReportCommon.ReportCommon.FIELDNAME_CREATORSIGNIMAGE] = dsrt.DataSetData.Tables[\"CreaterSignImage\"].Rows[0][\"SignImage\"];\n\n            }\n\n            if (dsrt.Result && dsrt.DataSetData.Tables[\"FirstApproverSignImage\"] != null && dsrt.DataSetData.Tables[\"FirstApproverSignImage\"].Rows.Count > 0)\n            {\n                dr[ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE] = dsrt.DataSetData.Tables[\"FirstApproverSignImage\"].Rows[0][\"SignImage\"];\n\n            }\n\n            if (dsrt.Result && dsrt.DataSetData.Tables[\"SubmitterSignImage\"] != null && dsrt.DataSetData.Tables[\"SubmitterSignImage\"].Rows.Count > 0)\n            {\n                dr[ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE] = dsrt.DataSetData.Tables[\"SubmitterSignImage\"].Rows[0][\"SignImage\"];\n\n            }\n\n            #region add digital signed pic\n            string signActions = \"\";\n            signActions += (ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGN).Length > 0 ? SignAction.SubmitReport + \",\" : \"\");\n            signActions += (ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGN).Length > 0 ? SignAction.ApproveReport + \",\" : \"\");\n            signActions += (ClientCommonFunction.GetStringForPrinting(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGN).Length > 0 ? SignAction.SecondApproveReport : \"\");\n            if (signActions.Length > 0)\n            {\n                paramMap.Clear();\n                paramMap.Add(\"IsGetDigitalSignImage\", \"true\");\n                paramMap.Add(\"ReportGuid\", reportGuid);\n                paramMap.Add(\"SignActions\", signActions);\n                context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n                dsrt = ClientCommonFunction.RequestWebService(context);\n                if (dsrt.Result && dsrt.DataSetData != null && dsrt.DataSetData.Tables.Count > 0)\n                {\n                    if (dsrt.Result && dsrt.DataSetData.Tables[\"SubmitterSignImage\"] != null && dsrt.DataSetData.Tables[\"SubmitterSignImage\"].Rows.Count > 0)\n                    {\n                        dr[ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE_CA] = dsrt.DataSetData.Tables[\"SubmitterSignImage\"].Rows[0][\"signPic\"];\n\n                    }\n\n                    if (dsrt.Result && dsrt.DataSetData.Tables[\"FirstApproverSignImage\"] != null && dsrt.DataSetData.Tables[\"FirstApproverSignImage\"].Rows.Count > 0)\n                    {\n                        dr[ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE_CA] = dsrt.DataSetData.Tables[\"FirstApproverSignImage\"].Rows[0][\"signPic\"];\n\n                    }\n\n                    if (dsrt.Result && dsrt.DataSetData.Tables[\"SecondApproverSignImage\"] != null && dsrt.DataSetData.Tables[\"SecondApproverSignImage\"].Rows.Count > 0)\n                    {\n                        dr[ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNIMAGE_CA] = dsrt.DataSetData.Tables[\"SecondApproverSignImage\"].Rows[0][\"signPic\"];\n\n                    }\n                }\n            }\n            #endregion\n\n            //add patient exam No.\n            dr[ReportCommon.ReportCommon.FIELDNAME_EXAMNUMBER] = SetExamNumber(dtReportInfo);\n\n            //}\n\n            _dt4Print.Rows.Add(dr);\n\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 5, binding to C1Report\", \"\", 0);\n\n            OverWriteUserIDWithUserName(_dt4Print);\n\n            _c1rpt.DataSource.Recordset = _dt4Print.DefaultView;\n\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 6, C1Report output\", \"\", 0);\n\n            #region output\n            if (outType == ReportCommon.ExportType.HTML)\n            {\n                _c1rpt.RenderToFile(fileName, C1.C1Report.FileFormatEnum.HTMLPaged);\n            }\n            else if (outType == ReportCommon.ExportType.JPG)\n            {\n                _isSR = false;\n                if (!String.IsNullOrEmpty(srnaturalhtml))\n                {\n                    //Snapshot Callback binding\n                    _srPrintHelper.SaveSnapshotEvent -= SRCallback;\n                    _srPrintHelper.SaveSnapshotEvent += SRCallback;\n                    _isSR = true;\n                    _reportGuid = reportGuid;\n                    _filepath = fileName;\n                    _srPrintHelper.SavePath = fileName;\n                    _srPrintHelper.ExportToJpg();\n                }\n                else\n                {\n                    CommonFuncs.Export2JPG(_c1rpt, fileName);\n                }\n\n            }\n            else if (outType == ReportCommon.ExportType.TXT)\n            {\n                _c1rpt.RenderToFile(fileName, C1.C1Report.FileFormatEnum.Text);\n            }\n            else if (outType == ReportCommon.ExportType.XML)\n            {\n                System.Xml.XmlTextWriter xw = new System.Xml.XmlTextWriter(fileName, System.Text.Encoding.UTF8);\n                _c1rpt.Save(xw, true);\n                xw.Close();\n            }\n            else if (outType == ReportCommon.ExportType.PDF)\n            {\n                _c1rpt.RenderToFile(fileName, C1.C1Report.FileFormatEnum.PDF);\n            }\n            else if (outType == ReportCommon.ExportType.PRINTER)\n            {\n                #region Added by Kevin For SR 28/10/2015\n                if (!String.IsNullOrEmpty(srnaturalhtml))\n                {\n                    string currentSite = ClientFrameworkBuilder.Instance.CommonManager.GetCurSite();\n                    var physicalCompany = GetStringFromDataSet(dsReportInfo, ReportCommon.ReportCommon.FIELDNAME_ORDER_PHYSICALCOMPANY) ?? \"\";\n                    var srPrintTemplateInfoList = SrTemplateHelper.GetModalityPrintTemplateInfo(modalityType, physicalCompany, \"1\", \"\");\n                    var templateInfo = srPrintTemplateInfoList.FirstOrDefault(t => t.IsDefaultTemplateExists && t.PhysicalCompany == physicalCompany && t.CurrentSite == currentSite);\n                    if (templateInfo == null)\n                    {\n                        templateInfo = srPrintTemplateInfoList.FirstOrDefault(t => t.IsDefaultTemplateExists && t.PhysicalCompany == physicalCompany && t.CurrentSite == \"\");\n                    }\n                    if (templateInfo == null)\n                    {\n                        templateInfo = srPrintTemplateInfoList.FirstOrDefault(t => t.IsDefaultTemplateExists && t.PhysicalCompany == \"\" && t.CurrentSite == currentSite);\n                    }\n                    if (templateInfo == null)\n                    {\n                        templateInfo = srPrintTemplateInfoList.FirstOrDefault(t => t.IsDefaultTemplateExists && t.PhysicalCompany == \"\" && t.CurrentSite == \"\");\n                    }\n\n                    if (templateInfo == null)\n                    {\n                        ClientCommonFunction.ShowMessageBox_Warning(\"Structured Report Print Template doesn't exist!\");\n                        return false;\n                    }\n\n                    _srPrintHelper.ReportUrl = string.Format(\"{0}/structuredReport/PreviewPrintJH?id={1}\", ClientFrameworkBuilder.Instance.ProfileManager.GetSystemProfileValueByName(\"StructuredReportUrl\", \"0000\").Trim(), templateInfo.Id);\n                    _srPrintHelper.Print();\n                }\n                #endregion\n                else\n                {\n                    _c1rpt.Render();\n\n                    string curPrinter = ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"DefaultPrinter\", \"0000\");\n                    if (ClientCommonFunction.IsExistPrinter(curPrinter))\n                    {\n                        _c1rpt.Document.PrinterSettings.PrinterName = curPrinter;\n                    }\n\n                    if (checkBoxBatchreport.Checked)\n                    {\n                        _c1rpt.Document.Print();\n                    }\n                    else\n                    {\n                        string patientType = ClientCommonFunction.GetSingleStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_tRegOrder__PatientType);\n                        string applyDept = ClientCommonFunction.GetSingleStringFromDataTable(dtReportInfo, ReportCommon.ReportCommon.FIELDNAME_tRegOrder__ApplyDept);\n\n                        int numofCopies = ClientCommonFunction.getNumofCopiesforCurrentSitePrinting(patientType, applyDept);\n\n                        for (int i = 0; i < numofCopies; ++i)\n                        {\n                            _c1rpt.Document.Print();\n                        }\n                    }\n                }\n            }\n            else\n            {\n                _c1rpt.RenderToFile(fileName, C1.C1Report.FileFormatEnum.RTF);\n            }\n            #endregion\n            if (_c1rpt != null)\n            {\n                _c1rpt.Clear();\n            }\n            ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::PrintReport4 7, end\", \"\", 0);\n            return true;\n        }\n\n        private void OverWriteUserIDWithUserName(DataTable dtSource)\n        {\n            if (dtSource == null || dtSource.Rows.Count == 0)\n            {\n                return;\n            }\n            foreach (DataColumn dc in dtSource.Columns)\n            {\n                if (stringUserIDUserNameDic.ContainsKey(dc.ColumnName) && dtSource.Columns.Contains(stringUserIDUserNameDic[dc.ColumnName]))\n                {\n                    string userName = Convert.ToString(dtSource.Rows[0][stringUserIDUserNameDic[dc.ColumnName]]);\n                    if (!string.IsNullOrEmpty(userName))\n                    {\n                        dtSource.Rows[0][dc.ColumnName] = userName;\n                    }\n                }\n            }\n        }\n\n        //dispose the our created objects\n        public void ClearUsedResources()\n        {\n            if (_c1rpt != null)\n            {\n                _c1rpt.Clear();\n                _c1rpt.Dispose();\n                _c1rpt = null;\n            }\n            if (_dicRptInfo != null)\n            {\n                _dicRptInfo.Clear();\n                _dicRptInfo = null;\n            }\n            if (_dt4Print != null)\n            {\n                _dt4Print.Clear();\n                _dt4Print.Dispose();\n                _dt4Print = null;\n            }\n            if (m_dsDictionary != null)\n            {\n                m_dsDictionary.Clear();\n                m_dsDictionary.Dispose();\n                m_dsDictionary = null;\n            }\n        }\n\n        private int SetExamNumber(DataTable DtReportInfo)\n        {\n\n            string strPatientID = ClientCommonFunction.GetStringFromDataTable(DtReportInfo, ReportCommon.ReportCommon.FIELDNAME_PATIENTID);\n            string strOrderGuid = ClientCommonFunction.GetStringFromDataTable(DtReportInfo, ReportCommon.ReportCommon.FIELDNAME_ORDERGUID);\n\n            if (string.IsNullOrEmpty(strPatientID) || string.IsNullOrEmpty(strPatientID))\n            {\n                return 1;\n            }\n            Dictionary<string, string> paramMap = new Dictionary<string, string>();\n            paramMap.Add(\"PATIENTID\", strPatientID);\n            paramMap.Add(\"ORDERGUID\", strOrderGuid);\n            BaseDataSetModel model = new BaseDataSetModel();\n\n\n            Context context = new Context();\n            context.Model = model;\n            context.MessageName = \"Rpt_GetExamNumber\";\n            context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n            DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n\n            if (!dsrt.Result)\n            {\n                return 1;\n            }\n            else\n            {\n                return dsrt.recode;\n            }\n\n        }\n\n        private int GetReportsCount()\n        {\n            try\n            {\n                string cond = _conditionBuilder.GetCondition();\n                if (cond != null && cond.Length > 0)\n                    cond += \" and tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n                else\n                    cond = \" tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n\n                Dictionary<string, string> paramMap = new Dictionary<string, string>();\n                // Condition filters string\n                paramMap.Add(\"condition\", cond);\n\n                Context context = new Context();\n                context.MessageName = \"Rpt_GetReportsListCount\";\n                context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n                DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n\n                if (dsrt.recode < 0)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Failed to get the count!\");\n                }\n\n                return dsrt.recode;\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n\n            return -1;\n        }\n\n        private void RefreshListCountProc()\n        {\n            _iListCount = -1;\n\n            _iListCount = GetReportsCount();\n        }\n\n        private void RefreshListCountTimer_Tick(object sender, EventArgs e)\n        {\n            try\n            {\n                if (_iListCount >= 0 && _lblCurrentPage != null)\n                {\n                    _lblCurrentPage.Text =\n                        ClientCommonFunction.GetLanguage(\"CurrentPage\") + \":\" + System.Convert.ToString(_iCurPage + 1)\n                        + \" / \" + ClientCommonFunction.GetLanguage(\"Count\") + \":\" + _iListCount;\n                }\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        private void AfterPrint(string reportGuid, bool isApproved, bool bPrintReport)\n        {\n            try\n            {\n                string key = reportGuid.ToUpper().Trim();\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::AfterPrint, set client print status\", \"\", 0);\n\n                #region Client print status\n                try\n                {\n                    if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID) &&\n                        _listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_ISPRINT) && isApproved)\n                    {\n\n                        bool bReportPrintCopies = false;\n                        for (int idx = 0; idx < _listReport.Rows.Count; idx++)\n                        {\n                            GridViewDataRowInfo rr = _listReport.Rows[idx];\n                            if (rr == null)\n                                continue;\n\n                            string rptid = rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value as string;\n                            if (string.IsNullOrEmpty(rptid))\n                            {\n                                continue;\n                            }\n\n                            if (rptid.ToUpper().Trim() == reportGuid.ToUpper().Trim())\n                            {\n                                rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_ISPRINT].Value = ClientCommonFunction.GetLanguage(\"Y\");\n\n                                if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_OPTIONAL1))\n                                {\n                                    rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_OPTIONAL1].Value = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n                                }\n                                if (!bReportPrintCopies)\n                                {\n                                    if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_EFILMNUMBER) && !bPrintReport)\n                                        rr.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_EFILMNUMBER].Value = 1;\n\n                                    if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES))\n                                        rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES].Value = GetPrintCopies(rptid) + 1;\n\n                                    bReportPrintCopies = true;\n                                }\n                                else\n                                {\n                                    if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES))\n                                        rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES].Value = \"\";\n                                }\n                            }\n\n\n                        }\n\n\n\n                    }\n                }\n                catch (Exception ex)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Fail to set the print status!\");\n\n                    ClientCommonFunction.RISLog_Error(0, \"Fail to set the print status! ID=\" + reportGuid + \", MSG=\" + ex.Message, \"\", 0);\n                }\n                #endregion\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::AfterPrint, Print Log\", \"\", 0);\n\n                #region Print Log\n                string snapShotSrvPath = \"\";\n\n                try\n                {\n                    if (isApproved && ClientCommonFunction.GetReportProfile_BOOL(ReportCommon.ProfileName.Report_NeedSaveImageOnPrinting))\n                    {\n                        ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::AfterPrint, Save Printing Snapshot 1\", \"\", 0);\n\n                        string tmpPrintImage = ClientCommonFunction.GetCurrentWorkPath() + \"\\\\temp\\\\\" + Guid.NewGuid().ToString() + \".jpg\";\n\n                        PrintReport4(reportGuid, ReportCommon.ExportType.JPG, tmpPrintImage);\n\n                        snapShotSrvPath = SavePrintingSnapshotToFtpServer(tmpPrintImage, reportGuid);\n\n                        System.IO.File.Delete(tmpPrintImage);\n\n                        ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::AfterPrint, Save Printing Snapshot 2\", \"\", 0);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Fail to record print log!\");\n\n                    ClientCommonFunction.RISLog_Error(0, ex.Message, \"\", 0);\n                    ClientCommonFunction.RISLog_Error(0, \"Fail to record print log! ID=\" + reportGuid, \"\", 0);\n                }\n\n                int numofCopiesforPrinting = getNumofCopiesforPrinting(reportGuid);\n                if (isApproved)\n                {\n                    ClientCommonFunction.RecordPrintLog(reportGuid, numofCopiesforPrinting, \"\", snapShotSrvPath, ReportCommon.ReportCommon.LOGTYPEPRINT, _printTemplateGuid);\n                }\n                else\n                {\n                    ClientCommonFunction.RecordPrintLog(reportGuid, 0, \"\", snapShotSrvPath, ReportCommon.ReportCommon.LOGTYPEPRINT, _printTemplateGuid);\n                }\n                #endregion\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::AfterPrint, Event Log\", \"\", 0);\n\n                #region event log\n                try\n                {\n                    if (_dicRptInfo != null && _dicRptInfo.ContainsKey(key) && _dicRptInfo[key].Rows.Count > 0)\n                    {\n                        DataRow dr = _dicRptInfo[key].Rows[0];\n\n                        string mType = dr[ReportCommon.ReportCommon.FIELDNAME_MODALITYTYPE] as string;\n\n                        if (mType != null)\n                        {\n                            DateTime tmExam = dr[ReportCommon.ReportCommon.FIELDNAME_REGPROCEDURE_EXAMINEDT] is DBNull ? DateTime.Now : System.Convert.ToDateTime(dr[ReportCommon.ReportCommon.FIELDNAME_REGPROCEDURE_EXAMINEDT]);\n                            DateTime tmPrint = DateTime.Now;\n\n                            TimeSpan ts0 = tmPrint - tmExam;\n\n                            ClientCommonFunction.RecordEventLog(ReportCommon.ReportLog_Type.EventLog_Exam2Print, reportGuid, mType, (int)ts0.TotalSeconds);\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Fail to write event log!\");\n\n                    ClientCommonFunction.RISLog_Error(0, \"Fail to write event log! ID=\" + reportGuid, \"\", 0);\n                }\n                #endregion\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::AfterPrint, End\", \"\", 0);\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(\"Fail to print the report!\");\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message, \"\", 0);\n                ClientCommonFunction.RISLog_Error(0, \"Fail to print the report!, ID=\" + reportGuid, \"\", 0);\n            }\n        }\n\n        private int GetPrintCopies(string strReportGuid)\n        {\n            if (string.IsNullOrWhiteSpace(strReportGuid))\n            {\n                return 0;\n            }\n            DataTable dt = _listReport.DataSource as DataTable;\n            if (dt == null || dt.Rows.Count == 0)\n            {\n                return 0;\n            }\n\n            string strExpress = string.Format(\"treport__reportguid='{0}'\", strReportGuid);\n            DataRow[] drfound = dt.Select(strExpress);\n            if (drfound.Length == 0)\n            {\n                return 0;\n            }\n            int nCopies = 0;\n            foreach (DataRow dr in drfound)\n            {\n                if (dr[\"treport__printcopies\"] is DBNull || Convert.ToString(dr[\"treport__printcopies\"]).Length == 0)\n                    continue;\n                nCopies = Convert.ToInt32(dr[\"treport__printcopies\"]);\n                break;\n            }\n            return nCopies;\n        }\n\n\n\n        private string SavePrintingSnapshotToFtpServer(string imagePath, string reportGuid)\n        {\n            try\n            {\n                if (!System.IO.File.Exists(imagePath))\n                {\n                    return \"\";\n                }\n\n                string ftppath = MakeFtpPath(reportGuid);\n\n                //\n                // Start to Ftp\n                FtpClient ftpClient = ClientCommonFunction.GetFtpObject();\n\n                ftpClient.UploadFile(imagePath, ftppath);\n\n                ftpClient.Close();\n                // End ftp\n                //\n\n                return ftppath + \"/\" + ReportCommon.ReportCommon.GetFileNameFromPath(imagePath);\n            }\n            catch (Exception ex)\n            {\n                string msg = ClientCommonFunction.GetLanguage(\"Fail to upload the images of printing snapshot, Message=\") + ex.Message;\n\n                ClientCommonFunction.ShowMessageBox(msg);\n\n                ClientCommonFunction.RISLog_Error(0, msg,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n\n            return \"\";\n        }\n\n        private string MakeFtpPath(string reportGuid)\n        {\n            string key = reportGuid.ToUpper().Trim();\n\n            if (_dicRptInfo.ContainsKey(key) && _dicRptInfo[key].Rows.Count > 0)\n            {\n                DateTime orderDt = new DateTime(1, 1, 1);\n\n                orderDt = System.Convert.ToDateTime(_dicRptInfo[key].Rows[0][ReportCommon.ReportCommon.FIELDNAME_ORDER_CREATEDT]);\n\n                // Name formula\n                string ftppath = Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.CommonManager.GetCurDomain() + \"/\" + ClientCommonFunction.GetReportProfile_String(ReportCommon.ProfileName.ReportSnapshotFtpSubFolder)\n                    + \"/\" + orderDt.ToString(\"yyyyMMdd\") + \"/\" + reportGuid;\n\n                return ftppath;\n            }\n\n            return \"\";\n        }\n\n        private void SetConditionBuilderHeight(int iHeight)\n        {\n            if (iHeight < 28)\n            {\n                iHeight = 28;\n            }\n            _conditionBuilder.Height = iHeight;\n\n\n            _chkQuickPrint.Top = _conditionBuilder.Bottom + 5;\n            checkBoxBatchreport.Top = _conditionBuilder.Bottom + 5;\n            checkboxBatchFilm.Top = _conditionBuilder.Bottom + 5;\n            _lblCurrentTemplate.Top = _conditionBuilder.Bottom + 5;\n            _txtCurrentTemplate.Top = _conditionBuilder.Bottom + 5;\n            _btnFirstPage.Top = _conditionBuilder.Bottom + 5;\n            _btnLastPage.Top = _conditionBuilder.Bottom + 5;\n            _btnNextPage.Top = _conditionBuilder.Bottom + 5;\n            _btnPrevPage.Top = _conditionBuilder.Bottom + 5;\n            this._lblCurrentPage.Top = _conditionBuilder.Bottom + 5;\n            this.labelCount.Top = _conditionBuilder.Bottom + 5;\n            csLabel1.Top = _conditionBuilder.Bottom + 5;\n            cbbEFilmPrinter.Top = _conditionBuilder.Bottom + 5;\n            this.chkQuickSendFilm.Top = _conditionBuilder.Bottom + 5;\n\n            //line two\n            _btnSearchReport.Top = _btnFirstPage.Bottom;\n\n            buttonGrant.Top = _btnFirstPage.Bottom;\n            _btnPrint.Top = _btnFirstPage.Bottom;\n            _btnTemplate.Top = _btnFirstPage.Bottom;\n            _btnLog.Top = _btnFirstPage.Bottom;\n\n\n\n            buttonClearList.Top = _btnFirstPage.Bottom;\n            buttonClearRecord.Top = _btnFirstPage.Bottom;\n            buttonExport.Top = _btnFirstPage.Bottom;\n            buttonPrintList.Top = _btnFirstPage.Bottom;\n            buttonViewSign.Top = _btnFirstPage.Bottom;\n\n            _listReport.Top = buttonViewSign.Bottom;\n            _listReport.Height = this.Height - _listReport.Top;\n        }\n\n        private void OnGotFocus(object sender, ClosingEventArgs e)\n        {\n            // 2017-04-17, Oscar added. (US38531, Defect 100039332)\n            if (this._chkQuickPrint.Checked || this.chkQuickSendFilm.Checked)\n                return;\n\n            try\n            {\n                BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithoutNotice);\n                ClientCommonFunction.SelectFlexGridRow(_listReport, ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID, _strNotifiedRPList);\n\n\n                if (!_bCondtionLoaded)\n                {\n                    _bCondtionLoaded = _conditionBuilder.InitControls(_PanelName, System.Convert.ToInt32(ReportCommon.PanelID.PrintingList));\n                }\n\n                ClientCommonFunction.RISLog_Info(0, \"OnGotFocus, End, panelname=\" + _PanelName, \"\", 0);\n                _conditionBuilder.GetFirstInputCtrl().Focus();\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        private bool isOnlyOneReport(DataTable dt)\n        {\n            if (dt == null || dt.Rows.Count < 1 ||\n                !dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID))\n                return false;\n\n            string tmpRptGuid = \"\";\n            //US27953-创建时间是最新的order,而非部位\n            #region\n            //如果所有记录均为已检查，算1份报告\n            int currentExamRecordCount = 0;\n            #endregion\n            foreach (DataRow dr in dt.Rows)\n            {\n                string tmp = System.Convert.ToString(dr[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID]);\n                if (string.IsNullOrEmpty(tmp))\n                {\n                    //US27953-100021865\n                    #region\n                    //只有一行记录，且该记录为已检查状态时\n                    if (dt.Rows.Count.Equals(1))\n                    {\n                        return true;\n                    }\n                    #endregion\n\n                    //US27953-创建时间是最新的order,而非部位\n                    #region\n                    //如果所有记录均为已检查，算1份报告\n                    if (dr[ReportCommon.ReportCommon.FIELDNAME_RPSTATUS].ToString().Trim().Equals(((int)ReportCommon.RP_Status.Examination).ToString().Trim()))\n                    {\n                        currentExamRecordCount++;\n                    }\n                    #endregion\n                    continue;\n                }\n\n\n\n                if (tmpRptGuid != null && tmpRptGuid.Length > 0 &&\n                    tmp != null && tmp.Length > 0 &&\n                    tmpRptGuid != tmp)\n                {\n                    return false;\n                }\n                tmpRptGuid = tmp;\n            }\n\n            //US27953-创建时间是最新的order,而非部位\n            #region\n            //如果所有记录均为已检查，算1份报告\n            if (currentExamRecordCount.Equals(dt.Rows.Count))\n            {\n                return true;\n            }\n            #endregion\n\n            if (tmpRptGuid == string.Empty) //No Reports\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        private void SetDataTablePrint(DataTable dt, string reportGuid)\n        {\n\n            if (CheckLock(reportGuid, dt, false))\n            {\n                return;\n            }\n\n\n            if (dt == null ||\n                !dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID) ||\n                !dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_ISPRINT))\n                return;\n            bool bReportPrintCopies = false;\n            for (int idx = 0; idx < _listReport.Rows.Count; idx++)\n            {\n                GridViewDataRowInfo rr = _listReport.Rows[idx];\n                if (rr == null)\n                    continue;\n\n                string rptid = rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value as string;\n                if (string.IsNullOrEmpty(rptid))\n                {\n                    continue;\n                }\n\n                if (rptid.ToUpper().Trim() == reportGuid.ToUpper().Trim())\n                {\n                    rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_ISPRINT].Value = ClientCommonFunction.GetLanguage(\"Y\");\n\n                    if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_OPTIONAL1))\n                    {\n                        rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_OPTIONAL1].Value = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n                    }\n                    if (!bReportPrintCopies)\n                    {\n                        if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_EFILMNUMBER) && checkboxBatchFilm.Checked)\n                            rr.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_EFILMNUMBER].Value = 1;\n\n                        if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES))\n                            rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES].Value = GetPrintCopies(rptid) + 1;\n\n                        bReportPrintCopies = true;\n                    }\n                    else\n                    {\n                        if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES))\n                            rr.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_PRINTCOPIES].Value = \"\";\n                    }\n                }\n\n\n            }\n        }\n\n        private void Panel_ClosingEvent(object sender, Kodak.GCRIS.Client.FrameWork.Panels.ClosingEventArgs e)\n        {\n            Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.ClosingEvent -= new ClosingEventHandler(Panel_ClosingEvent);\n            //Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.AfterGotFocusEvent -= new AfterGotFocusEventHandler(OnGotFocus);\n            Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.PanelManager.AfterChangeToCurrentEvent -= new AfterChangeToCurrentEventHandler(OnGotFocus);\n\n            _asyncCount.OnCompleted -= new AsyncRequestReportListCount.CompletedEventHandler(_asyncCount_OnCompleted);\n        }\n\n        private void buttonGrant_Click(object sender, EventArgs e)\n        {\n            try\n            {\n\n                if (_listReport.Rows.Count == 0)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Please select one report to show sign\");\n\n                    return;\n                }\n\n                List<string> listReportGuid = new List<string>();\n                List<GridViewDataRowInfo> listRowSelect = new List<GridViewDataRowInfo>();\n                foreach (GridViewDataRowInfo row in _listReport.Rows)\n                {\n                    if (checkBoxBatchreport.Checked)\n                    {\n                        if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) != (int)ReportCommon.RP_Status.FirstApprove)\n                        {\n                            continue;\n                        }\n\n                        string strReportGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString();\n                        listReportGuid.Add(strReportGuid);\n                        listRowSelect.Add(row);\n                    }\n                    else\n                    {\n                        if (row.IsSelected)\n                        {\n                            if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) != (int)ReportCommon.RP_Status.FirstApprove)\n                            {\n                                ClientCommonFunction.ShowMessageBox(\"The report is not approved,Can not sign\");\n                                return;\n                            }\n\n                            string strReportGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString();\n                            listReportGuid.Add(strReportGuid);\n                            listRowSelect.Add(row);\n\n                        }\n                    }\n                }\n\n                if (listReportGuid.Count == 0)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"The report is not approved,Can not sign\");\n                    return;\n                }\n\n                Context context = new Context();\n                //context.Model = model;\n                context.MessageName = \"Rpt_GetDrawerSign\";\n                Dictionary<string, string> paramMap = new Dictionary<string, string>();\n\n                string strReportGuids = \"\";\n                foreach (string str in listReportGuid)\n                {\n                    strReportGuids += str;\n                    strReportGuids += \"|\";\n                }\n                strReportGuids = strReportGuids.TrimEnd('|');\n\n                paramMap.Add(\"ReportGuid\", strReportGuids);\n                context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n                DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n\n                DataTable dtSign = dsrt.DataSetData.Tables[0].Clone();\n\n\n                Object objDrawerSign = null;\n                string strTakeFilmDept = \"\", strTakeFilmRegion = \"\", strTakeFilmComment = \"\";\n                if (dsrt.Result && dsrt.DataSetData.Tables[0] != null && dsrt.DataSetData.Tables[0].Rows.Count > 0)\n                {\n\n                    string strExpression = \"IsDraw=1\";\n                    DataRow[] foundRowsSigned = dsrt.DataSetData.Tables[0].Select(strExpression);\n                    bool bHasSigned = foundRowsSigned.Length > 0 ? true : false;\n\n                    if (bHasSigned && !_bEditTakeReportSign)\n                    {\n                        string strMessage = dsrt.DataSetData.Tables[0].Rows.Count > 1 ? \"All or some of report has signed, can not edit sign!\" : \"The report has signed, can not edit sign!\";\n                        ClientCommonFunction.ShowMessageBox_Error(strMessage);\n                        return;\n                    }\n\n                    if (bHasSigned && _bEditTakeReportSign)\n                    {\n\n                        DialogResult dr = ClientCommonFunction.ShowMessageBox_Question2(\"Report has signed, do you override the report sign?\");\n                        if (dr != DialogResult.Yes)\n                        {\n                            if (dr == DialogResult.No)\n                            {\n                                strExpression = \"IsDraw=0\";\n                                DataRow[] foundRowsNoSigned = dsrt.DataSetData.Tables[0].Select(strExpression);\n\n                                foreach (DataRow dr1 in foundRowsNoSigned)\n                                {\n                                    dtSign.Rows.Add(dr1.ItemArray);\n                                }\n\n                                //if (_bAutoClearSignedReport)\n                                {\n                                    #region remove the signed report records\n                                    List<string> listRPGuid = new List<string>();\n\n                                    List<GridViewDataRowInfo> rowRemove = new List<GridViewDataRowInfo>();\n                                    foreach (GridViewDataRowInfo row in listRowSelect)\n                                    {\n                                        string strDraw = Convert.ToString(row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_ISDRAW].Value);\n\n                                        if (strDraw.ToUpper() == ClientCommonFunction.GetLanguage(\"Y\").ToUpper() || strDraw.ToUpper() == ClientCommonFunction.GetLanguage(\"1\").ToUpper() || strDraw.ToUpper() == ClientCommonFunction.GetLanguage(\"Yes\").ToUpper())\n                                        {\n                                            listRPGuid.Add(Convert.ToString(row.Cells[ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID].Value));\n                                            rowRemove.Add(row);\n\n                                        }\n                                    }\n\n                                    foreach (GridViewDataRowInfo row in rowRemove)\n                                    {\n                                        listRowSelect.Remove(row);\n\n                                        if (_bAutoClearSignedReport)\n                                            _listReport.Rows.Remove(row);\n                                    }\n\n\n\n\n                                    #endregion\n                                }\n\n                            }\n                            else\n                            {\n                                return;\n                            }\n\n                        }\n                        else\n                        {\n                            dtSign = dsrt.DataSetData.Tables[0].Copy();\n                        }\n\n                    }\n                    else\n                    {\n                        dtSign = dsrt.DataSetData.Tables[0].Copy();\n                    }\n\n\n                }\n\n                if (dtSign == null || dtSign.Rows.Count == 0)\n                {\n                    // ClientCommonFunction.ShowMessageBox_Error(\"Please select one report to show sign\");\n\n                    return;\n                }\n\n\n\n                objDrawerSign = dtSign.Rows[0][\"DrawerSign\"];\n\n                if (dtSign.Rows[0][\"takefilmDept\"] != null)\n                {\n                    strTakeFilmDept = Convert.ToString(dtSign.Rows[0][\"takefilmDept\"]);\n                }\n\n                if (dtSign.Rows[0][\"takefilmregion\"] != null)\n                {\n                    strTakeFilmRegion = Convert.ToString(dtSign.Rows[0][\"takefilmregion\"]);\n                }\n                if (dtSign.Rows[0][\"takefilmcomment\"] != null)\n                {\n                    strTakeFilmComment = Convert.ToString(dtSign.Rows[0][\"takefilmcomment\"]);\n                }\n\n                FormSign form = new FormSign(objDrawerSign, strTakeFilmDept, strTakeFilmRegion, strTakeFilmComment, 1);\n                //Get the \n                Screen screen = Screen.PrimaryScreen;\n                int nWeight = screen.WorkingArea.Width;\n                int nHeight = screen.WorkingArea.Height;\n\n                form.Location = new Point(nWeight - form.Width, nHeight - form.Height);\n\n                if (form.ShowDialog() == DialogResult.OK)\n                {\n                    BaseDataSetModel bdsm = new BaseDataSetModel();\n                    bdsm.DataSetParameter = new DataSet();\n\n\n                    foreach (DataRow dr in dtSign.Rows)\n                    {\n                        dr[\"TakeFilmDept\"] = form.TAKEFILMDEPT;\n                        dr[\"TakeFilmRegion\"] = form.TAKEFILMREGION;\n                        dr[\"TakeFilmComment\"] = form.TAKEFILMCOMMENT;\n\n                        Image image = form.GetDrawSign();\n                        if (image != null)\n                        {\n                            ImageConverter ic = new ImageConverter();\n                            byte[] buffer = (byte[])ic.ConvertTo(image, typeof(byte[]));\n\n                            dr[\"DrawerSign\"] = buffer;\n                        }\n                    }\n\n\n                    bdsm.DataSetParameter.Tables.Add(dtSign);\n                    context = new Context();\n                    context.MessageName = \"Rpt_SetDrawer\";\n                    context.Model = bdsm;\n\n\n                    BaseActionResult bar = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(context);\n                    if (bar == null)\n                    {\n                        ClientCommonFunction.ShowMessageBox_Error(\"Network Offline,Contact with administrator please!\");\n                    }\n\n                    if (!bar.Result)\n                    {\n                        ClientCommonFunction.ShowMessageBox_Error(\"Set drawer sign failure!\");\n\n                    }\n\n                    foreach (GridViewDataRowInfo row in listRowSelect)\n                    {\n                        string rptid1 = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value as string;\n                        foreach (GridViewDataRowInfo row1 in _listReport.Rows)\n                        {\n                            string rptid2 = row1.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value as string;\n                            if (rptid1 == rptid2)\n                            {\n                                row1.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_ISDRAW].Value = ClientCommonFunction.GetLanguage(\"Y\");\n\n                                if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_TAKEFILMDEPT))\n                                    row1.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_TAKEFILMDEPT].Value = form.TAKEFILMDEPTDESC;\n                                if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_TAKEFILMREGION))\n                                    row1.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_TAKEFILMREGION].Value = form.TAKEFILMREGIONDESC;\n                                if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_TAKEFILMCOMMENT))\n                                    row1.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_TAKEFILMCOMMENT].Value = form.TAKEFILMCOMMENT;\n                                if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_DRAWTIME))\n                                    row1.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORT_DRAWTIME].Value = DateTime.Now.ToString();\n                            }\n\n                        }\n                    }\n\n\n\n                }\n\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n        private void buttonClear_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                if (_listReport.DataSource != null)\n                {\n                    DataTable dt = _listReport.DataSource as DataTable;\n                    dt.Rows.Clear();\n                }\n                //_listReport.Rows.Clear();\n\n                _lblCurrentPage.Text = \"\";\n\n                labelCount.Text = \"\";\n\n\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        private void buttonExport_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                if (checkBoxBatchreport.Checked)\n                {\n                    if (this._listReport.RowCount > 0)\n                        ClientCommonFunction.ExportGrid2Excel(this._listReport);\n                }\n                else\n                {\n                    //string strCondition = _conditionBuilder.GetCondition().ToUpper();\n                    if (_conditionBuilder.isAllEmpty)\n                        return;\n                    if (this.labelCount.Tag != null && Convert.ToInt32(this.labelCount.Tag) > 20000)\n                    {\n                        RCCommonFunction.ShowMessageBox_Warning(\"Too many record(more than 20000), can not export\");\n                        return;\n                    }\n                    this.Cursor = Cursors.WaitCursor;\n                    DataSetActionResult dsar = RequestServerData(0xFFFFFFF);\n\n                    DataSet ds = dsar.DataSetData;\n\n                    if (ds != null && ds.Tables.Contains(\"ReportList\"))\n                    {\n                        ClientCommonFunction.UpdateDataTableText(ds.Tables[\"ReportList\"], _listReport);\n                        this._listReport.Tag = ds.Tables[\"ReportList\"];\n                    }\n\n                    RCCommonFunction.Export2Excel(this._listReport, System.Convert.ToInt32(ReportCommon.PanelID.PrintingList));\n                    this.Cursor = Cursors.Arrow;\n                }\n            }\n            catch (Exception ex)\n            {\n\n                ClientCommonFunction.ShowMessageBox_Error(\"May be not install excel in your system, please install it\");\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        private void buttonPrintList_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                if (!ClientCommonFunction.IsExistPrinter())\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Invalid printer setting!\");\n\n                    return;\n                }\n\n                string strFileName = PrintTemplateUtility.GetPrintTemplateByName(8, \"ReportPrintListTemplate\");\n                if (strFileName.Length == 0)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Not exists print template\");\n                    return;\n                }\n\n                if (_bSignBeforePrintList)\n                {\n                    buttonGrant_Click(null, null);\n                }\n\n                string strTitle = \"\";\n                /* if (m_strShortcutName.Length > 0)\n                 {\n                     strTitle = string.Format(labelCount.Text + \"  \" + labelCharge.Text + \"({0})\" + \" \\t\\t\" + DateTime.Now.ToString(), m_strShortcutName);\n                 }\n                 else\n                 {*/\n                strTitle = labelCount.Text + \"  \" + DateTime.Now.ToString();\n                //}\n\n                ///////////////////////////////////////////////\n                C1.C1Report.C1Report c1ReportNotice = new C1Report();\n                if (!File.Exists(strFileName))\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Can not found the notice template file\");\n                    return;\n                }\n                else\n                {\n                    c1ReportNotice.Load(strFileName, \"Template\");\n\n                }\n\n\n                //ClientCommonFunction.UpdateTableText(ref m_dtPrint);\n\n                //string s = Convert.ToString(m_dtPrint.Rows[0][ReportCommon.ReportCommon.FIELDNAME_REPORT_ISDRAW]);\n                DataTable dtPrint = new DataTable();\n                foreach (GridViewDataColumn col in _listReport.Columns)\n                {\n                    if (!dtPrint.Columns.Contains(col.FieldName))\n                    {\n                        dtPrint.Columns.Add(col.FieldName);\n                    }\n\n                }\n\n                foreach (GridViewDataRowInfo row in _listReport.Rows)\n                {\n                    DataRow dr = dtPrint.Rows.Add();\n                    foreach (DataColumn dc in dtPrint.Columns)\n                    {\n                        string userName = \"\";\n                        if (stringUserIDUserNameDic.ContainsKey(dc.ColumnName))\n                        {\n                            if (row.Cells[dc.ColumnName].CellElement != null)\n                                userName = Convert.ToString(row.Cells[dc.ColumnName].CellElement.Text);\n                        }\n                        if (!string.IsNullOrEmpty(userName))\n                        {\n                            dr[dc.ColumnName] = userName;\n                        }\n                        else\n                        {\n                            dr[dc.ColumnName] = row.Cells[dc.ColumnName].Value;\n                        }\n                    }\n                }\n\n\n\n                c1ReportNotice.DataSource.Recordset = dtPrint;\n\n                string strDefaultPrinter = cdManager.GetConfigDicValue(\"DefaultPrinter\", \"0000\");\n\n\n                if (strDefaultPrinter.Length > 0)\n                {\n                    c1ReportNotice.Document.PrinterSettings.PrinterName = strDefaultPrinter;\n                }\n\n                c1ReportNotice.Document.Print();\n                ////////////////////////////////////////////////\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        private void buttonClearRecord_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                List<string> listRPGuid = new List<string>();\n                List<GridViewDataRowInfo> listRow = new List<GridViewDataRowInfo>();\n                foreach (GridViewDataRowInfo row in _listReport.Rows)\n                {\n                    if (row.IsSelected)\n                    {\n                        string strRPGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_PROCEDUREGUID].Value.ToString();\n                        listRPGuid.Add(strRPGuid);\n                        listRow.Add(row);\n                    }\n                }\n\n\n                foreach (GridViewDataRowInfo row in listRow)\n                {\n                    _listReport.Rows.Remove(row);\n\n                }\n\n\n\n\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        private void buttonViewSign_Click(object sender, EventArgs e)\n        {\n            try\n            {\n\n                List<string> listReportGuid = new List<string>();\n                List<GridViewDataRowInfo> listRowSelect = new List<GridViewDataRowInfo>();\n\n\n                foreach (GridViewDataRowInfo row in _listReport.Rows)\n                {\n                    if (row.IsSelected)\n                    {\n                        if (Convert.ToInt32(row.Cells[_RPSTATUS].Value) != (int)ReportCommon.RP_Status.FirstApprove)\n                        {\n                            ClientCommonFunction.ShowMessageBox_Error(\"This report is not signed\");\n                            return;\n                        }\n\n                        string strReportGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString();\n                        listReportGuid.Add(strReportGuid);\n                        listRowSelect.Add(row);\n\n                    }\n\n                }\n                if (listReportGuid.Count == 0)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Please select one report to show sign\");\n                    return;\n                }\n\n                if (listReportGuid.Count > 1)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Please select only one report to show sign\");\n                    return;\n                }\n\n\n\n                Context context = new Context();\n                //context.Model = model;\n                context.MessageName = \"Rpt_GetDrawerSign\";\n                Dictionary<string, string> paramMap = new Dictionary<string, string>();\n\n                string strReportGuids = \"\";\n                foreach (string str in listReportGuid)\n                {\n                    strReportGuids = str;\n\n                }\n\n                paramMap.Add(\"ReportGuid\", strReportGuids);\n                context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n                DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n\n                int nIsDraw = 0;\n                Object objDrawerSign = null;\n                string strTakeFilmDept = \"\", strTakeFilmRegion = \"\", strTakeFilmComment = \"\";\n                if (dsrt.Result && dsrt.DataSetData.Tables[0] != null && dsrt.DataSetData.Tables[0].Rows.Count > 0)\n                {\n\n                    if (dsrt.DataSetData.Tables[0].Rows[0][\"IsDraw\"] is DBNull)\n                    {\n                        nIsDraw = 0;\n                    }\n                    else\n                    {\n                        nIsDraw = Convert.ToInt32(dsrt.DataSetData.Tables[0].Rows[0][\"IsDraw\"]);\n                    }\n\n                    if (nIsDraw == 1)\n                    {\n\n                        objDrawerSign = dsrt.DataSetData.Tables[0].Rows[0][\"DrawerSign\"];\n\n                        if (dsrt.DataSetData.Tables[0].Rows[0][\"TakeFilmDept\"] != null)\n                        {\n                            strTakeFilmDept = Convert.ToString(dsrt.DataSetData.Tables[0].Rows[0][\"TakeFilmDept\"]);\n                        }\n\n                        if (dsrt.DataSetData.Tables[0].Rows[0][\"TakeFilmRegion\"] != null)\n                        {\n                            strTakeFilmRegion = Convert.ToString(dsrt.DataSetData.Tables[0].Rows[0][\"TakeFilmRegion\"]);\n                        }\n                        if (dsrt.DataSetData.Tables[0].Rows[0][\"TakeFilmComment\"] != null)\n                        {\n                            strTakeFilmComment = Convert.ToString(dsrt.DataSetData.Tables[0].Rows[0][\"TakeFilmComment\"]);\n                        }\n\n\n                    }\n                    else\n                    {\n                        ClientCommonFunction.ShowMessageBox_Error(\"This report is not signed\");\n                        return;\n                    }\n                    DataTable dt = dsrt.DataSetData.Tables[0].Copy();\n\n                    FormSign form = new FormSign(objDrawerSign, strTakeFilmDept, strTakeFilmRegion, strTakeFilmComment, 3);\n                    Screen screen = Screen.PrimaryScreen;\n                    int nWeight = screen.WorkingArea.Width;\n                    int nHeight = screen.WorkingArea.Height;\n\n                    form.Location = new Point(nWeight - form.Width, nHeight - form.Height);\n\n                    form.Show();\n\n\n                }\n\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        private void _listReport_AfterSort(object sender, SortColEventArgs e)\n        {\n            //Kodak.GCRIS.Client.FrameWork.SortArg arg = new Kodak.GCRIS.Client.FrameWork.SortArg();\n            //arg.Col = e.Col;\n            //arg.SortFlag = e.Order;\n            //Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.FrameWorkUI.SaveSortArgInFrameWork(arg, \"ReportPrint\");\n\n        }\n\n        private void _listReport_AfterResizeColumn(object sender, RowColEventArgs e)\n        {\n            //if (ApplicationStatus.OnlineStatus == OfflineBlockConnectionState.OffLine)\n            //{\n            //    return;\n            //}\n            //try\n            //{\n            //    Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.FrameWorkUI.SaveFlexGridColumnWidth2UserProfile(_listReport, \"ReportPrint\", _listReport.Cols[e.Col].Name, \"0400\");\n            //}\n            //catch (Exception ex)\n            //{\n\n            //    ClientCommonFunction.RISLog_Error(0, ex.Message,\n            //        (new System.Diagnostics.StackFrame()).GetFileName(),\n            //        (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            //}\n        }\n\n        private void _listReport_ColumnWidthChanged(object sender, System.Windows.Forms.ColumnWidthChangedEventArgs e)\n        {\n            if (ApplicationStatus.OnlineStatus == OfflineBlockConnectionState.OffLine)\n            {\n                return;\n            }\n\n            try\n            {\n                if (MouseButtons == System.Windows.Forms.MouseButtons.Left)\n                {\n                    ClientFrameworkBuilder.Instance.FrameWorkUI.SaveGridViewColumnWidth2UserProfile(_listReport, \"ReportPrint\", \"0400\");\n                }\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        //US31620\n        #region\n        private string listPrefix = \"list_\";\n        private string currentListNode = \"ReportPrint\";\n        protected void _listReport_ColumnIndexChanged(object sender, ColumnIndexChangedEventArgs e)\n        {\n\n            Kodak.GCRIS.Client.FrameWork.Comment cmt = new Comment();\n            cmt.syncFromUISettingForList(this._listReport, listPrefix, currentListNode);\n\n        }\n        #endregion\n\n        private void _listReport_Click(object sender, EventArgs e)\n        {\n            lblSelectedCount.Text = ClientCommonFunction.GetLanguage(\"SelectedCount\") + _listReport.SelectedRows.Count.ToString();\n        }\n\n        private void _listReport_SelectionChanged(object sender, System.EventArgs e)\n        {\n            _listReport_Click(null, null);\n\n            // 2017-07-04, Oscar added. (US40000)\n            var hasUnexaminedRows = this._listReport.SelectedRows.Any(r => Convert.ToInt32(r.GetValue(\"RPStatus\")) < (int)ReportCommon.RP_Status.Examination);\n            this.btnLoadImage.Enabled = this._listReport.SelectedRows.Count > 0 && !hasUnexaminedRows;\n            this.btnLoadMultiImage.Enabled = this.m_bCanLoadMultiPatientImage && this._listReport.SelectedRows.Count > 1 && !hasUnexaminedRows;\n        }\n\n        private void _listReport_SortChanged(object sender, Telerik.WinControls.UI.GridViewCollectionChangedEventArgs e)\n        {\n            if (e.NewItems.Count > 0)\n            {\n                GridSortField gsf = e.NewItems[0] as GridSortField;\n                if (gsf == null)\n                    return;\n\n                Kodak.GCRIS.Client.FrameWork.SortSetting arg = new Kodak.GCRIS.Client.FrameWork.SortSetting();\n                arg.FieldName = gsf.FieldName;\n                arg.bAscending = gsf.SortOrder == RadSortOrder.Ascending;\n                Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.FrameWorkUI.SaveSortArgInFrameWork(\n                    arg, _PanelName, this._listReport);\n            }\n            else\n            {\n                // Remove its sort setting\n                Kodak.GCRIS.Client.FrameWork.SortSetting arg = new Kodak.GCRIS.Client.FrameWork.SortSetting();\n                arg.FieldName = \"\";\n                Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.FrameWorkUI.SaveSortArgInFrameWork(\n                    arg, _PanelName, this._listReport);\n            }\n\n            // 2017-02-21, Oscar added. (US37226)\n            string sortAll = ClientCommonFunction.GetProfile_String(ReportCommon.ProfileName.Report_SortAllPage, ReportCommon.ModuleID.Global);\n            if (sortAll == \"1\" && _manualSort)\n            {\n                BindDataSet(ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice);\n            }\n        }\n\n        private void buttonSendFilm_Click(object sender, EventArgs e)\n        {\n\n\n            try\n            {\n                int mode = ClientCommonFunction.GetProfile_Int(\"PrintFilmIntegrationMode\", ReportCommon.ModuleID.Integration);\n                if (mode == 1)\n                {\n                    SendFilm();\n                }\n                #region Modified by Blue for RC574, 05/19/2014\n                //else\n                //{\n                //    PrintFilm();\n                //}\n                else if (mode == 2)\n                {\n                    PrintFilm();\n                }\n                else if (mode == 3)\n                {\n                    PrintBarcode();\n                }\n                #endregion\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n\n        }\n\n\n\n\n\n        private void SendFilm()\n        {\n\n\n            try\n            {\n\n                Dictionary<string, string> dicAcc2OrderGuid = new Dictionary<string, string>();\n                Dictionary<string, string> paramMap = new Dictionary<string, string>();\n                List<string> listAccNo = new List<string>();\n\n                //Modified by Blue for [RC617] - US17985, 07/23/2014\n                //if (checkBoxBatchreport.Checked)\n                if (checkBoxBatchreport.Checked || this.chkQuickSendFilm.Checked)\n                {\n                    foreach (GridViewDataRowInfo row in _listReport.Rows.Where(r => Convert.ToInt32(r.GetValue(\"RPStatus\")) >= (int)ReportCommon.RP_Status.Examination))\n                    {\n                        string strAccNo = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value.ToString();\n                        string strOrderGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDERGUID].Value.ToString();\n                        if (!listAccNo.Contains(strAccNo))\n                        {\n                            listAccNo.Add(strAccNo);\n                            dicAcc2OrderGuid.Add(strAccNo, strOrderGuid);\n                        }\n                    }\n                }\n                else\n                {\n\n                    foreach (GridViewDataRowInfo row in _listReport.SelectedRows.Where(r => Convert.ToInt32(r.GetValue(\"RPStatus\")) >= (int)ReportCommon.RP_Status.Examination))\n                    {\n                        string strAccNo = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value.ToString();\n                        string strOrderGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDERGUID].Value.ToString();\n                        if (!listAccNo.Contains(strAccNo))\n                        {\n                            listAccNo.Add(strAccNo);\n                            dicAcc2OrderGuid.Add(strAccNo, strOrderGuid);\n                        }\n                    }\n                }\n\n\n                string strAccNos = \"\";\n                foreach (string str in listAccNo)\n                {\n                    strAccNos += str + \",\";\n\n                }\n                if (string.IsNullOrWhiteSpace(strAccNos))\n                {\n                    return;\n                }\n\n                strAccNos = strAccNos.TrimEnd(',');\n                paramMap.Add(\"AccNo\", strAccNos);\n                paramMap.Add(\"ActionName\", \"CheckExistSentFilm\");\n                string strParmas = Utilities.MakeDicParameter(paramMap);\n\n                Context context = new Context();\n                context.MessageName = \"FilmOperation\";\n                context.Parameters = strParmas;\n                BaseActionResult bar = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(context);\n                if (!bar.Result)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(bar.ReturnMessage);\n                    return;\n                }\n                if (bar.recode == 1)\n                {\n                    DialogResult dr = ClientCommonFunction.ShowMessageBox_Question(\"Film has been sent,Do you still want to continue?\");\n                    if (dr == DialogResult.Cancel)\n                    {\n                        return;\n                    }\n                }\n\n                if (this._listReport.CurrentRow == null\n                    || Convert.ToInt32(this._listReport.CurrentRow.GetValue(\"RPStatus\")) < (int)ReportCommon.RP_Status.Examination)\n                    return;\n\n                Object objDrawerSign = null;\n                string strFilmDrawDept = \"\", strFilmDrawRegion = \"\", strFilmDrawComment = \"\", strSignName = \"\";\n                string strCurOrderGuid = \"\";\n                if (_listReport.Columns.Contains(\"tRegOrder__OrderGuid\"))\n                {\n                    strCurOrderGuid = System.Convert.ToString(_listReport.CurrentRow.Cells[\"tRegOrder__OrderGuid\"].Value);\n\n                    DataTable dt = _listReport.DataSource as DataTable;\n                    if (dt == null || dt.Rows.Count == 0)\n                    {\n                        return;\n                    }\n\n                    string strExpress = string.Format(\"tregorder__orderguid='{0}'\", strCurOrderGuid);\n                    DataRow[] drfound = dt.Select(strExpress);\n                    if (drfound.Length == 0)\n                    {\n                        return;\n                    }\n\n                    objDrawerSign = drfound[0][\"tregorder__FilmDrawerSign\"];\n\n                    if (drfound[0][\"tregorder__FilmDrawDept\"] != null)\n                    {\n                        strFilmDrawDept = Convert.ToString(drfound[0][\"tregorder__FilmDrawDept\"]);\n                    }\n\n                    if (drfound[0][\"tregorder__FilmDrawRegion\"] != null)\n                    {\n                        strFilmDrawRegion = Convert.ToString(drfound[0][\"tregorder__FilmDrawRegion\"]);\n                    }\n                    if (drfound[0][\"tregorder__FilmDrawComment\"] != null)\n                    {\n                        strFilmDrawComment = Convert.ToString(drfound[0][\"tregorder__FilmDrawComment\"]);\n                    }\n                }\n\n                DataTable dtSign = new DataTable();\n\n                dtSign.Columns.Add(\"DrawerSign\", typeof(byte[]));\n\n                if (ClientCommonFunction.GetProfile_Int(\"ReportPrintList_SignNameWhenReleaseFilm\", ReportCommon.ModuleID.Report) == 1)\n                {\n                    #region sign for send film\n\n\n                    FormSign form = new FormSign(objDrawerSign, strFilmDrawDept, strFilmDrawRegion, strFilmDrawComment, 2);\n                    //Get the \n                    Screen screen = Screen.PrimaryScreen;\n                    int nWeight = screen.WorkingArea.Width;\n                    int nHeight = screen.WorkingArea.Height;\n\n                    form.Location = new Point(nWeight - form.Width, nHeight - form.Height);\n\n                    if (form.ShowDialog() == DialogResult.OK)\n                    {\n                        strSignName = \"1\";\n                        strFilmDrawDept = form.TAKEFILMDEPT;\n                        strFilmDrawRegion = form.TAKEFILMREGION;\n                        strFilmDrawComment = form.TAKEFILMCOMMENT;\n\n                        Image image = form.GetDrawSign();\n\n                        if (image != null)\n                        {\n                            ImageConverter ic = new ImageConverter();\n                            byte[] buffer = (byte[])ic.ConvertTo(image, typeof(byte[]));\n                            DataRow dr = dtSign.Rows.Add();\n                            dr[\"DrawerSign\"] = buffer;\n                            objDrawerSign = buffer;\n                        }\n\n                    }\n                    #endregion\n                }\n\n\n                BaseDataSetModel bdsm = new BaseDataSetModel();\n                bdsm.DataSetParameter = new DataSet();\n                bdsm.DataSetParameter.Tables.Add(dtSign);\n\n\n\n                paramMap.Clear();\n                paramMap.Add(\"AccNo\", strAccNos);\n                paramMap.Add(\"ActionName\", \"SendFilm\");\n                paramMap.Add(\"FilmCount\", \"0\");\n                paramMap.Add(\"FilmDrawDept\", strFilmDrawDept);\n                paramMap.Add(\"FilmDrawRegion\", strFilmDrawRegion);\n                paramMap.Add(\"FilmDrawComment\", strFilmDrawComment);\n                paramMap.Add(\"SignName\", strSignName);\n\n                string strParmas2 = Utilities.MakeDicParameter(paramMap);\n\n                Context context2 = new Context();\n                context2.MessageName = \"FilmOperation\";\n                context2.Parameters = strParmas2;\n                context2.Model = bdsm;\n\n\n\n                BaseActionResult bar2 = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(context2);\n                if (!bar2.Result)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(bar2.ReturnMessage);\n                    return;\n                }\n\n                foreach (GridViewDataRowInfo row in _listReport.Rows)\n                {\n                    if (strAccNos.Contains(Convert.ToString(row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value)))\n                    {\n\n                        row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_ISFILMSENT].Value = ClientCommonFunction.GetLanguage(\"Y\");\n                        row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMSENDT].Value = DateTime.Now;\n                        row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMSENTOPERATOR].Value = ClientFrameworkBuilder.Instance.LoginManager.GetLocalName();\n\n                        if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWDEPT))\n                            row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWDEPT].Value = strFilmDrawDept;\n\n                        if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWREGION))\n                            row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWREGION].Value = strFilmDrawRegion;\n\n                        if (_listReport.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWCOMMENT))\n                            row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWCOMMENT].Value = strFilmDrawComment;\n\n\n                    }\n                }\n                if (strSignName == \"1\")\n                {\n                    UpdateLocalTable(strAccNos, strFilmDrawDept, strFilmDrawRegion, strFilmDrawComment, objDrawerSign);\n                }\n\n                #region Modified by Blue for [RC617] - US17985, 07/23/2014\n                if (_canCallQueue)\n                {\n                    CallQueue(listAccNo);\n                }\n                #endregion\n\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n\n        }\n\n        private void UpdateLocalTable(string strAccNos, string strFilmDrawDept, string strFilmDrawRegion, string strFilmDrawComment, Object objDrawerSign)\n        {\n            DataTable dt = _listReport.DataSource as DataTable;\n            if (dt == null)\n                return;\n            foreach (DataRow dr in dt.Rows)\n            {\n                if (strAccNos.Contains(Convert.ToString(dr[ReportCommon.ReportCommon.FIELDNAME_ACCNO])))\n                {\n\n                    if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWDEPT))\n                        dr[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWDEPT] = strFilmDrawDept;\n\n                    if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWREGION))\n                        dr[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWREGION] = strFilmDrawRegion;\n\n                    if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWCOMMENT))\n                        dr[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWCOMMENT] = strFilmDrawComment;\n\n                    if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWERSIGN))\n                    {\n                        //ImageConverter ic = new ImageConverter();\n                        //byte[] buffer = (byte[])ic.ConvertTo(objDrawerSign, typeof(byte[]));\n                        dr[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMDRAWERSIGN] = objDrawerSign;\n                    }\n\n\n                }\n            }\n        }\n\n\n\n\n        private void PrintFilm()\n        {\n\n            try\n            {\n                if (cbbEFilmPrinter.Visible && string.IsNullOrWhiteSpace(cbbEFilmPrinter.SelectedName))\n                {\n                    ClientCommonFunction.ShowMessageBox_Warning(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Select efilmprinter please\", \"0300\"));\n                    return;\n                }\n\n\n                Dictionary<string, string> dicAcc2OrderGuid = new Dictionary<string, string>();\n                Dictionary<string, string> paramMap = new Dictionary<string, string>();\n                List<string> listAccNo = new List<string>();\n\n                if (checkboxBatchFilm.Checked)\n                {\n                    foreach (GridViewDataRowInfo row in _listReport.Rows.Where(r => Convert.ToInt32(r.GetValue(\"RPStatus\")) >= (int)ReportCommon.RP_Status.Examination))\n                    {\n                        string strAccNo = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value.ToString();\n                        string strOrderGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDERGUID].Value.ToString();\n                        if (!listAccNo.Contains(strAccNo))\n                        {\n                            listAccNo.Add(strAccNo);\n                            dicAcc2OrderGuid.Add(strAccNo, strOrderGuid);\n                        }\n                    }\n                }\n                else\n                {\n                    foreach (GridViewDataRowInfo row in _listReport.SelectedRows.Where(r => Convert.ToInt32(r.GetValue(\"RPStatus\")) >= (int)ReportCommon.RP_Status.Examination))\n                    {\n                        string strAccNo = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value.ToString();\n                        string strOrderGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDERGUID].Value.ToString();\n                        if (!listAccNo.Contains(strAccNo))\n                        {\n                            listAccNo.Add(strAccNo);\n                            dicAcc2OrderGuid.Add(strAccNo, strOrderGuid);\n                        }\n                    }\n                }\n\n\n\n                foreach (string strAcc in listAccNo)\n                {\n                    string strOrderGuid = \"\";\n                    dicAcc2OrderGuid.TryGetValue(strAcc, out strOrderGuid);\n\n\n                    int nResult = RePrint(false, strOrderGuid, \"\");\n                    if (nResult == 1)\n                    {\n                        continue;\n                    }\n                    else if (nResult == 2)\n                    {\n                        ClientCommonFunction.ShowMessageBox_Warning(ClientCommonFunction.GetLanguage(\"This record has been printed, you can not print again\"));\n                        continue;\n                    }\n\n\n                    string strErrorMessage = Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Print film error\", \"0000\");\n                    string strSuccessMessage = Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Print film success\", \"0000\");\n                    string strEFilmPrinter = cbbEFilmPrinter.SelectedName == null ? \"\" : cbbEFilmPrinter.SelectedName;\n\n                    int nFilm = Kodak.GCRIS.Client.Common.CommonFuncs.FilmPrintIntegration(strAcc, strEFilmPrinter);\n                    bool bEFilmNumber = false;\n                    if (nFilm > 0)\n                    {\n                        ClientCommonFunction.RecordPrintLog(strOrderGuid, 1, \"Print Film, Printer =\" + strEFilmPrinter, \"\", \"Film\");\n\n                        paramMap.Clear();\n                        paramMap.Add(\"AccNo\", strAcc);\n                        paramMap.Add(\"ActionName\", \"SendFilm\");\n                        paramMap.Add(\"FilmCount\", nFilm.ToString());\n                        string strParmas2 = Utilities.MakeDicParameter(paramMap);\n\n                        Context context2 = new Context();\n                        context2.MessageName = \"FilmOperation\";\n                        context2.Parameters = strParmas2;\n                        BaseActionResult bar2 = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(context2);\n                        if (!bar2.Result)\n                        {\n                            ClientCommonFunction.ShowMessageBox_Error(bar2.ReturnMessage);\n                            return;\n                        }\n\n\n                        MessageBox.Show(strSuccessMessage);\n\n\n                        foreach (GridViewDataRowInfo row in _listReport.Rows)\n                        {\n                            if (strAcc.ToUpper() == (Convert.ToString(row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value)).ToUpper())\n                            {\n\n                                row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_ISFILMSENT].Value = ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Y\", \"0400\");\n                                row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMSENDT].Value = DateTime.Now;\n                                row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_FILMSENTOPERATOR].Value = ClientFrameworkBuilder.Instance.LoginManager.GetLocalName();\n                                if (!bEFilmNumber)\n                                {\n                                    row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_EFILMNUMBER].Value = nFilm.ToString();\n                                    bEFilmNumber = true;\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        MessageBox.Show(string.Format(strErrorMessage, strAcc));\n\n                    }\n\n                }\n\n\n\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        #region Modified by Blue for RC574, 05/19/2014\n        private void PrintBarcode()\n        {\n            try\n            {\n                if (cbbEFilmPrinter.Visible && string.IsNullOrWhiteSpace(cbbEFilmPrinter.SelectedName))\n                {\n                    ClientCommonFunction.ShowMessageBox_Warning(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Select barcode printer please\", \"0300\"));\n                    return;\n                }\n\n                if (!ClientCommonFunction.IsExistPrinter())\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Invalid printer setting!\", \"0300\"));\n                    return;\n                }\n\n                if (this._listReport.SelectedRows == null || this._listReport.SelectedRows.Count == 0)\n                {\n                    ClientCommonFunction.ShowMessageBox_Warning(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"No row selected!\", \"0300\"));\n                    return;\n                }\n\n                bool canPrintUnapprovedReport = CanPrintUnapprovedReport();\n                List<string> warningMsgList = new List<string>();\n                Dictionary<string, string> dicAcc2OrderGuid = new Dictionary<string, string>();\n                Dictionary<string, string> dicAcc2ModalityType = new Dictionary<string, string>();\n                Dictionary<string, string> dicAcc2ReportGuid = new Dictionary<string, string>();\n                Dictionary<string, int> dicAcc2ReportStatus = new Dictionary<string, int>();\n                Dictionary<string, string> dicAcc2PatientType = new Dictionary<string, string>();\n                var dicAcc2RemoteAccNo = new Dictionary<string, string>();\n                Dictionary<string, string> paramMap = new Dictionary<string, string>();\n                List<string> listAccNo = new List<string>();\n                List<GridViewRowInfo> selectedRowList = new List<GridViewRowInfo>();\n\n                if (checkboxBatchFilm.Checked)\n                {\n                    selectedRowList.AddRange(_listReport.Rows);\n                }\n                else\n                {\n                    selectedRowList.AddRange(_listReport.SelectedRows);\n                }\n\n                foreach (GridViewRowInfo row in selectedRowList)\n                {\n                    string strAccNo = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value.ToString();\n                    if (!listAccNo.Contains(strAccNo))\n                    {\n                        listAccNo.Add(strAccNo);\n                        dicAcc2OrderGuid.Add(strAccNo, row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDERGUID].Value.ToString());\n                        dicAcc2ModalityType.Add(strAccNo, row.Cells[ReportCommon.ReportCommon.FIELDNAME_tRegProcedure__ModalityType].Value.ToString());\n                        dicAcc2ReportGuid.Add(strAccNo, row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString());\n                        dicAcc2PatientType.Add(strAccNo, row.Cells[ReportCommon.ReportCommon.FIELDNAME_ORDER_PATIENTTYPE].Value.ToString());\n                        dicAcc2ReportStatus.Add(strAccNo, Convert.ToInt32(row.Cells[_RPSTATUS].Value));\n                        dicAcc2RemoteAccNo.Add(strAccNo, row.GetValue(ReportCommon.ReportCommon.FIELDNAME_tRegOrder__RemoteAccNo).ToString());\n                    }\n                }\n\n                foreach (string strAcc in listAccNo)\n                {\n                    string strOrderGuid = dicAcc2OrderGuid[strAcc];\n                    int nResult = RePrint(false, strOrderGuid, \"\");\n                    if (nResult == 1)\n                    {\n                        continue;\n                    }\n                    else if (nResult == 2)\n                    {\n                        ClientCommonFunction.ShowMessageBox_Warning(ClientCommonFunction.GetLanguage(\"This record has been printed, you can not print again\"));\n                        continue;\n                    }\n\n                    string strDefaultPrinter = ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"DefaultPrinter\", \"0000\");\n                    string strBarcodePrinter = ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"BarcodePrinter\", \"0300\");\n                    strBarcodePrinter = strBarcodePrinter.Trim() == \"\" ? strDefaultPrinter : strBarcodePrinter;\n\n                    try\n                    {\n                        string modalityType = dicAcc2ModalityType[strAcc];\n                        string reportGuid = dicAcc2ReportGuid[strAcc];\n                        string patientType = dicAcc2PatientType[strAcc];\n                        int reportStatus = dicAcc2ReportStatus[strAcc];\n                        var remoteAccNo = dicAcc2RemoteAccNo[strAcc];\n\n                        //Check whether the AccNo can be printed or not\n                        if (reportStatus <= (int)ReportCommon.RP_Status.Examination)\n                        {\n                            warningMsgList.Add(string.Format(ClientCommonFunction.GetLanguage(\"AccNo{0} has no report, cannot be printed\"), strAcc));\n                            continue;\n                        }\n                        else if (reportStatus > (int)ReportCommon.RP_Status.Examination && reportStatus < (int)ReportCommon.RP_Status.FirstApprove)\n                        {\n                            if (!canPrintUnapprovedReport)\n                            {\n                                warningMsgList.Add(string.Format(ClientCommonFunction.GetLanguage(\"AccNo{0} has not been approved, doesnt match the print time period\"), strAcc));\n                                continue;\n                            }\n                            else if (_canPrintPatientTypes == null || !_canPrintPatientTypes.Contains(patientType))\n                            {\n                                warningMsgList.Add(string.Format(ClientCommonFunction.GetLanguage(\"AccNo{0} has not been approved, doesnt match the print type\"), strAcc));\n                                continue;\n                            }\n                        }\n\n                        if (!CanPrintBarCode(strAcc, patientType, remoteAccNo))\n                            continue;\n\n                        if (!LoadBarcodePrintTemplate(modalityType))\n                        {\n                            return;\n                        }\n\n                        BindDataSourceToReport(strAcc, reportGuid);\n\n                        if (_c1rpt != null && _c1rpt.Document != null)\n                        {\n                            if (ClientCommonFunction.IsExistPrinter(strBarcodePrinter))\n                            {\n                                _c1rpt.Document.PrinterSettings.PrinterName = strBarcodePrinter;\n                            }\n                            lock (_c1rpt)\n                            {\n                                _c1rpt.Document.Print();\n                            }\n                            SetAllowToPrintFlagToBroker(strAcc);\n                        }\n                    }\n                    catch\n                    {\n                        ClientCommonFunction.ShowMessageBox_Error(Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Print barcode error\", \"0000\"));\n                    }\n                }\n\n                if (warningMsgList.Count > 0)\n                {\n                    string warningMsg = string.Empty;\n                    warningMsgList.ForEach(w => warningMsg += w + Environment.NewLine);\n                    ClientCommonFunction.ShowMessageBox_Warning(warningMsg.TrimEnd(Environment.NewLine.ToCharArray()));\n                }\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n        private bool LoadBarcodePrintTemplate(string modalityType)\n        {\n            bool val = false;\n            try\n            {\n                _c1rpt = new C1Report();\n                string errorMsg = string.Empty;\n                string fileName = RefreshPrintTemplate(modalityType, ref errorMsg);\n                if (!string.IsNullOrEmpty(errorMsg))\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(errorMsg, \"0300\"));\n                }\n\n                if (System.IO.File.Exists(fileName))\n                {\n                    _c1rpt.Load(fileName, \"Template\");\n                    val = true;\n                }\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                       (new System.Diagnostics.StackFrame()).GetFileName(),\n                       (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n            return val;\n        }\n\n        private string RefreshPrintTemplate(string modalityType, ref string errorMsg)\n        {\n            string val = string.Empty;\n            try\n            {\n                int iRegBarcode = 5;\n                string templateFile = string.Empty;\n                string strFileName = PrintTemplateUtility.getPrintTemplateByModalityType_Type_MultiSite(iRegBarcode, modalityType, out templateFile);\n\n                if (!File.Exists(strFileName))\n                {\n                    errorMsg = \"Cannot retrieve registration barcode print template\";\n                    ClientCommonFunction.RISLog_Error(0, errorMsg,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n                }\n                val = strFileName;\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n            return val;\n        }\n\n        private string GetCurrentWorkingPath()\n        {\n            string strCurPath = System.Windows.Forms.Application.ExecutablePath;\n            int pos = strCurPath.LastIndexOf('\\\\');\n            if (pos > 0)\n            {\n                strCurPath = strCurPath.Substring(0, pos);\n            }\n            return strCurPath;\n        }\n\n        private void BindDataSourceToReport(string accNo, string reportGuid)\n        {\n            if (_c1rpt != null)\n            {\n                try\n                {\n                    DataSet dsReportInfo = ClientCommonFunction.GetReportInfoDataSet(reportGuid, \"\");\n                    DataTable dtC1Report = new DataTable();\n                    foreach (Field field in _c1rpt.Fields)\n                    {\n                        if (field.Calculated && !string.IsNullOrEmpty(field.Text) && !dtC1Report.Columns.Contains(field.Text))\n                        {\n                            dtC1Report.Columns.Add(field.Text);\n                        }\n                    }\n                    dtC1Report.Columns.Add(\"Image\", typeof(Image));\n\n                    //Fill in data source values\n                    DataRow dr = dtC1Report.NewRow();\n                    string colName = string.Empty;\n                    foreach (DataColumn col in dtC1Report.Columns)\n                    {\n                        colName = col.ColumnName;\n                        if (colName.Contains(\"__\"))\n                        {\n                            int splitIndex = colName.IndexOf(\"__\");\n                            colName = colName.Substring(splitIndex + 2, colName.Length - splitIndex - 2);\n                        }\n\n                        if (colName.Equals(\"Image\"))\n                        {\n                            //Generate Barcode image\n                            Barcode bc = new Barcode();\n                            Bitmap bmp = null;\n                            bc.GenerateBarcode(\"\", true, accNo, ref bmp);\n                            dr[col] = bmp;\n                        }\n                        else\n                        {\n                            dr[col] = GetValueByColumnName(colName, dsReportInfo.Tables[0]);\n                        }\n                    }\n\n                    dtC1Report.Rows.Add(dr);\n                    _c1rpt.DataSource.Recordset = dtC1Report;\n                }\n                catch (Exception ex)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                    ClientCommonFunction.RISLog_Error(0, ex.Message,\n                        (new System.Diagnostics.StackFrame()).GetFileName(),\n                        (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n                }\n            }\n        }\n\n        private string GetValueByColumnName(string columnName, DataTable dtDataSource)\n        {\n            string val = string.Empty;\n            if (!string.IsNullOrEmpty(columnName) && dtDataSource != null && dtDataSource.Columns.Count > 0 && dtDataSource.Rows.Count > 0)\n            {\n                foreach (DataColumn col in dtDataSource.Columns)\n                {\n                    string colName = col.ColumnName;\n                    if (colName.Contains(\"__\"))\n                    {\n                        int splitIndex = colName.IndexOf(\"__\");\n                        colName = colName.Substring(splitIndex + 2, colName.Length - splitIndex - 2);\n                    }\n                    if (colName.ToUpper().Equals(columnName.ToUpper()))\n                    {\n                        val = dtDataSource.Rows[0][col].ToString();\n                    }\n                }\n            }\n            return val;\n        }\n\n        private void SetAllowToPrintFlagToBroker(string accNo)\n        {\n            Dictionary<string, string> paramMap = new Dictionary<string, string>();\n            paramMap.Add(\"ActionName\", \"AllowToPrintSendToGateServer\");\n            paramMap.Add(\"AccNo\", accNo);\n            paramMap.Add(\"LoginName\", ClientFrameworkBuilder.Instance.LoginManager.GetLoginName());\n            paramMap.Add(\"LocalName\", ClientFrameworkBuilder.Instance.LoginManager.GetLocalName());\n            string strParmas2 = Utilities.MakeDicParameter(paramMap);\n\n            Context context2 = new Context();\n            context2.MessageName = \"FilmOperation\";\n            context2.Parameters = strParmas2;\n            BaseActionResult bar2 = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(context2);\n            if (!bar2.Result)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(bar2.ReturnMessage);\n                return;\n            }\n        }\n        #endregion\n\n        private string getReportInfoString(string reportGuid)\n        {\n            //string pid = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_PATIENTID) as string;\n            //string patientName = GetPatientNameFromClient(reportGuid);\n            //string sex = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_GENDER) as string;\n            //string currentAge = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_ORDER_CURRENTAGE) as string;\n            //string accNo = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_ACCNO) as string;\n            //string procedureCodeDescription = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODEDESC) as string;\n\n            string pid =\n                getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_PATIENTID, _listReport.Tag as DataTable);\n            string patientName =\n                getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_LOCALNAME, _listReport.Tag as DataTable);\n            string sex =\n                getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_GENDER, _listReport.Tag as DataTable);\n            string currentAge =\n                getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_ORDER_CURRENTAGE, _listReport.Tag as DataTable);\n            string accNo =\n                getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_ACCNO, _listReport.Tag as DataTable);\n            string procedureCodeDescription =\n                getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, reportGuid, ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODEDESC, _listReport.Tag as DataTable);\n\n            currentAge = ClientCommonFunction.LocalizeCurrentAge(currentAge);\n\n            return pid + \",\" + patientName + \",\" + sex + \",\" + currentAge + \",\" + accNo + \",\" + procedureCodeDescription;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"matchingColumnName\"></param>\n        /// <param name=\"matchingColumnValue\"></param>\n        /// <param name=\"returnColumnName\"></param>\n        /// <param name=\"dt\"></param>\n        /// <returns></returns>\n        public static string getStringfromDataTable(string matchingColumnName, string matchingColumnValue, string returnColumnName, DataTable dt)\n        {\n            try\n            {\n                if (dt != null && dt.Columns.Contains(returnColumnName) && dt.Columns.Contains(matchingColumnName))\n                {\n                    DataRow[] drs = dt.Select(matchingColumnName + \"='\" + matchingColumnValue + \"'\");\n\n                    if (drs.Length > 0)\n                        return System.Convert.ToString(drs[0][returnColumnName]);\n                }\n            }\n            catch (System.Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine(ex.Message);\n            }\n\n            return string.Empty;\n        }\n\n        /// <summary>\n        /// Add Status column which type is int32.\n        /// </summary>\n        private void AddRPStatusColumn()\n        {\n            if (!_listReport.Columns.Contains(_RPSTATUS))\n            {\n                GridViewDataColumn gvDc = new GridViewDataColumn();\n                gvDc.FieldName = _RPSTATUS;\n                gvDc.HeaderText = ReportCommon.ReportCommon.FIELDNAME_RPSTATUS;\n                gvDc.DataType = typeof(Int32);\n                gvDc.IsVisible = false;\n                _listReport.Columns.Add(gvDc);\n            }\n        }\n\n        private void refreshGrid4OrderMessageIcon(string orderGuid, Kodak.GCRIS.Client.Common.FormOrderMessage form)\n        {\n            DataTable dt = _listReport.Tag as DataTable;\n            DataTable dt1 = _listReport.DataSource as DataTable;\n\n            if (dt != null)\n            {\n                foreach (DataRow row in dt.Rows)\n                {\n                    string rowOrderguid = System.Convert.ToString(row[\"tRegOrder__OrderGuid\"]);\n\n                    if (rowOrderguid == orderGuid)\n                    {\n                        row[\"tRegOrder__OrderMessage\"] = form.Type;\n                        row[\"OrderMessageXml\"] = form.OrderMessage;\n                    }\n                }\n\n            }\n\n            if (dt1 != null)\n            {\n                foreach (DataRow row in dt1.Rows)\n                {\n                    string rowOrderguid = System.Convert.ToString(row[\"tRegOrder__OrderGuid\"]);\n\n                    if (rowOrderguid == orderGuid)\n                    {\n                        row[\"tRegOrder__OrderMessage\"] = form.Type;\n                        row[\"OrderMessageXml\"] = form.OrderMessage;\n                    }\n                }\n\n                ClientCommonFunction.PrepareImageColumnForGridBinding(dt1, _PanelName);\n            }\n        }\n\n        private int getNumofCopiesforPrinting(string reportGuid)\n        {\n            try\n            {\n                string patientType = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_ORDER_PATIENTTYPE) as string;\n                string applyDept = GetColumnValueFromClientFlexGrid(reportGuid, _listReport, ReportCommon.ReportCommon.FIELDNAME_ORDER_DEPT) as string;\n\n                return ClientCommonFunction.getNumofCopiesforCurrentSitePrinting(patientType, applyDept);\n            }\n            catch (System.Exception ex)\n            {\n                ClientCommonFunction.RISLog_Info(0, \"getNumofCopiesforPrinting, ERR=\" + ex.Message, \"\", 0);\n            }\n\n            return 1;\n        }\n\n        private void btnLoadImage_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                GridViewRowInfo gvri = _listReport.CurrentRow;\n                if (gvri == null)\n                {\n                    return;\n                }\n\n                string strAccNo = Convert.ToString(gvri.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value);\n                Kodak.GCRIS.Client.Common.PACSImage.LoadPacsImage oPacsImage\n                    = Kodak.GCRIS.Client.Common.PACSImage.LoadPacsImage.GetInstance();\n\n                if (oPacsImage != null)\n                {\n                    m_ImageLoaded = m_ImageLoaded | oPacsImage.LoadStudy(strAccNo, false);\n                    if (m_ImageLoaded)\n                    {\n                        m_ImageLoadAccNo = strAccNo;\n                    }\n\n                }\n            }\n            catch (Exception ex)\n            {\n                m_ImageLoaded = m_ImageLoaded || false;\n                ClientCommonFunction.RISLog_Error(0, \"btnLoadImage_Click:\" + ex.StackTrace, (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n\n        private void ClosePACSInstance()\n        {\n            if (m_ImageLoaded)\n            {\n                Kodak.GCRIS.Client.Common.PACSImage.LoadPacsImage oPacsImage\n                    = Kodak.GCRIS.Client.Common.PACSImage.LoadPacsImage.GetInstance();\n                if (oPacsImage != null)\n                {\n                    oPacsImage.CloseSession(m_ImageLoadAccNo);\n                }\n            }\n        }\n\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"bPrintReport\"></param>\n        /// <param name=\"strOrderGuid\"></param>\n        /// <param name=\"strReportGuid\"></param>\n        /// <returns>0--normal  1--Can not print due to permission  2--Cancel print</returns>\n        private int RePrint(bool bPrintReport, string strOrderGuid, string strReportGuid)\n        {\n\n            Context context = new Context();\n            context.MessageName = \"Rpt_GetRePrint\";\n\n            context.Parameters = string.Format(\"OrderGuid={0}&ReportGuid={1}\", bPrintReport ? \"\" : strOrderGuid, strReportGuid);\n\n            BaseActionResult bar = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(context);\n\n            if (!bar.Result)\n            {//first print\n                return 0;\n            }\n\n            if (ClientFrameworkBuilder.Instance.ProfileManager.GetUserProfileValueByName(\"RePrintPermission\", \"0000\") == \"0\")\n            {\n                return 2;\n            }\n\n            if (ClientCommonFunction.GetProfile_Int(\"ReportPrintList_RePrintReason\", ReportCommon.ModuleID.Report, 0) == 0)\n            {\n                return 0;\n            }\n\n            string orderMessage = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, strReportGuid, \"tRegOrder__OrderMessage\", _listReport.Tag as DataTable);\n            string strAccNo = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_REPORTGUID, strReportGuid, \"tRegOrder__AccNo\", _listReport.Tag as DataTable);\n            if (string.IsNullOrWhiteSpace(strAccNo))\n            {\n                strAccNo = getStringfromDataTable(ReportCommon.ReportCommon.FIELDNAME_ORDERGUID, strOrderGuid, \"tRegOrder__AccNo\", _listReport.Tag as DataTable);\n            }\n\n            using (Kodak.GCRIS.Client.Common.FormOrderMessage form = new Kodak.GCRIS.Client.Common.FormOrderMessage(strOrderGuid, orderMessage, 3))\n            {\n                form.Text = ClientCommonFunction.GetLanguage(form.Text) + \"    \" + ClientCommonFunction.GetLanguage(\"tRegOrder__AccNo\") + \":\" + strAccNo;\n                form.ShowDialog();\n                if (form.Operation == Kodak.GCRIS.Client.Common.ORDERMESSAGEOPERATION.CANCELPRINT)\n                {\n                    return 1;\n                }\n\n                refreshGrid4OrderMessageIcon(strOrderGuid, form);\n            }\n\n            return 0;\n\n\n        }\n\n        #endregion\n\n        private void cbbEFilmPrinter_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            ClientFrameworkBuilder.Instance.ClientStorageManager.Add(\"ReportPrint_EFilmPrinter\", \"0300\", cbbEFilmPrinter.SelectedName);\n        }\n\n        private void _listReport_RowFormatting(object sender, Telerik.WinControls.UI.RowFormattingEventArgs e)\n        {\n            // 2017-05-23, Oscar added. (US39998)\n            if (e.RowElement is GridFilterRowElement)\n                return;\n\n            try\n            {\n                string str = e.RowElement.RowInfo.GetValue(ReportCommon.ReportCommon.FIELDNAME_REPORT_ISPRINT).ToString();\n\n                int nPrinted = 0;\n                if (string.IsNullOrWhiteSpace(str))\n                {\n                    nPrinted = 0;\n                }\n                else if (str.Contains(\"Y\") || str.Contains(\"是\") || str.Contains(\"Yes\"))\n                {\n                    nPrinted = 1;\n                }\n\n                if (nPrinted > 0)\n                {\n                    FillRowColor(e, _clrPrinted);\n                }\n                else\n                {\n                    FillRowColor(e, Color.White);\n                }\n\n                if (e.RowElement.RowInfo.IsCurrent || e.RowElement.RowInfo.IsSelected)\n                {\n                    e.RowElement.GradientStyle = Telerik.WinControls.GradientStyles.Solid;\n                    e.RowElement.BackColor = Color.Orange;\n                }\n                else\n                {\n                    //US29440 High light Not Scan records Wade changed.\n                    if (unScanColor.ToArgb() != 0)\n                    {\n                        GridViewDataRowInfo row = e.RowElement.RowInfo as GridViewDataRowInfo;\n                        if (row.GetValue(\"tRegOrder__IsScan\").ToString() == \"否\" || row.GetValue(\"tRegOrder__IsScan\").ToString().ToUpper() == \"Y\" || row.GetValue(\"tRegOrder__IsScan\").ToString() == \"0\")\n                        {\n                            e.RowElement.GradientStyle = Telerik.WinControls.GradientStyles.Solid;\n                            row.VisualElement.BackColor = unScanColor;\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n\n            }\n\n        }\n\n        private void FillRowColor(Telerik.WinControls.UI.RowFormattingEventArgs e, Color color)\n        {\n            e.RowElement.BackColor = color;\n            e.RowElement.BackColor2 = color;\n            e.RowElement.BackColor3 = color;\n            e.RowElement.BackColor4 = color;\n            e.RowElement.DrawFill = true;\n        }\n        private void _btnViewFilmSign_Click(object sender, EventArgs e)\n        {\n            try\n            {\n\n                List<string> listReportGuid = new List<string>();\n                List<GridViewDataRowInfo> listRowSelect = new List<GridViewDataRowInfo>();\n\n\n                foreach (GridViewDataRowInfo row in _listReport.Rows)\n                {\n                    if (row.IsSelected)\n                    {\n\n                        string strReportGuid = row.Cells[ReportCommon.ReportCommon.FIELDNAME_REPORTGUID].Value.ToString();\n                        listReportGuid.Add(strReportGuid);\n                        listRowSelect.Add(row);\n\n                    }\n\n                }\n                if (listReportGuid.Count == 0)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Please select one report to show sign\");\n                    return;\n                }\n\n                if (listReportGuid.Count > 1)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Please select only one report to show sign\");\n                    return;\n                }\n\n                string strOrderGuid = \"\";\n                if (_listReport.Columns.Contains(\"tRegOrder__OrderGuid\"))\n                {\n                    strOrderGuid = System.Convert.ToString(_listReport.CurrentRow.Cells[\"tRegOrder__OrderGuid\"].Value);\n                }\n                else\n                {\n                    return;\n                }\n                DataTable dt = _listReport.DataSource as DataTable;\n                if (dt == null || dt.Rows.Count == 0)\n                {\n                    return;\n                }\n\n                string strExpress = string.Format(\"tregorder__orderguid='{0}'\", strOrderGuid);\n                DataRow[] drfound = dt.Select(strExpress);\n                if (drfound.Length == 0)\n                {\n                    return;\n                }\n\n\n\n                Object objDrawerSign = null;\n                string strFilmDrawDept = \"\", strFilmDrawRegion = \"\", strFilmDrawComment = \"\";\n\n\n                objDrawerSign = drfound[0][\"tregorder__FilmDrawerSign\"];\n\n                if (drfound[0][\"tregorder__FilmDrawDept\"] != null)\n                {\n                    strFilmDrawDept = Convert.ToString(drfound[0][\"tregorder__FilmDrawDept\"]);\n                }\n\n                if (drfound[0][\"tregorder__FilmDrawRegion\"] != null)\n                {\n                    strFilmDrawRegion = Convert.ToString(drfound[0][\"tregorder__FilmDrawRegion\"]);\n                }\n                if (drfound[0][\"tregorder__FilmDrawComment\"] != null)\n                {\n                    strFilmDrawComment = Convert.ToString(drfound[0][\"tregorder__FilmDrawComment\"]);\n                }\n\n\n                FormSign form = new FormSign(objDrawerSign, strFilmDrawDept, strFilmDrawRegion, strFilmDrawComment, 4);\n                Screen screen = Screen.PrimaryScreen;\n                int nWeight = screen.WorkingArea.Width;\n                int nHeight = screen.WorkingArea.Height;\n\n                form.Location = new Point(nWeight - form.Width, nHeight - form.Height);\n\n                form.Show();\n\n\n\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        #region Modified by Blue for [RC617] - US17985, 07/23/2014\n        private void CallQueue(List<string> accNoList)\n        {\n            try\n            {\n                string strQirData = string.Empty;\n                if (accNoList.Count > 0)\n                {\n                    DataTable dt = this._listReport.DataSource as DataTable;\n                    foreach (string acc in accNoList)\n                    {\n                        string strPatientID = string.Empty, strPatientName = string.Empty, strPatientSex = string.Empty, strBirthday = string.Empty\n                                , strPatientType = string.Empty, strModality = string.Empty, strModalityType = string.Empty, strPCode = string.Empty, strPDes = string.Empty;\n                        DataRow[] dr = dt.Select(string.Format(\"{0}='{1}'\", ReportCommon.ReportCommon.FIELDNAME_ACCNO, acc));\n                        if (dr != null && dr.Length > 0)\n                        {\n                            List<DataRow> drList = new List<DataRow>(dr);\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_PATIENTID))\n                            {\n                                strPatientID = drList[0][ReportCommon.ReportCommon.FIELDNAME_PATIENTID].ToString().Trim();\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME))\n                            {\n                                strPatientName = drList[0][ReportCommon.ReportCommon.FIELDNAME_PATIENT_LOCALNAME].ToString().Trim();\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_GENDER))\n                            {\n                                strPatientSex = drList[0][ReportCommon.ReportCommon.FIELDNAME_GENDER].ToString().Trim();\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_tRegPatient__Birthday))\n                            {\n                                strBirthday = Convert.ToDateTime(drList[0][ReportCommon.ReportCommon.FIELDNAME_tRegPatient__Birthday]).ToString(\"yyyyMMdd\");\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_ORDER_PATIENTTYPE))\n                            {\n                                strPatientType = drList[0][ReportCommon.ReportCommon.FIELDNAME_ORDER_PATIENTTYPE].ToString().Trim();\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_MODALITY))\n                            {\n                                drList.ForEach(d => strModality += d[ReportCommon.ReportCommon.FIELDNAME_MODALITY].ToString().Trim() + \",\");\n                                strModality = strModality.TrimEnd(',');\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_MODALITYTYPE))\n                            {\n                                drList.ForEach(d => strModalityType += d[ReportCommon.ReportCommon.FIELDNAME_MODALITYTYPE].ToString().Trim() + \",\");\n                                strModalityType = strModalityType.TrimEnd(',');\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODE))\n                            {\n                                drList.ForEach(d => strPCode += d[ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODE].ToString().Trim() + \",\");\n                                strPCode = strPCode.TrimEnd(',');\n                            }\n                            if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODEDESC))\n                            {\n                                drList.ForEach(d => strPDes += d[ReportCommon.ReportCommon.FIELDNAME_PROCEDURECODEDESC].ToString().Trim() + \",\");\n                                strPDes = strPDes.TrimEnd(',');\n                            }\n                        }\n\n                        StringBuilder builder = new StringBuilder();\n                        builder.Append(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\")\n                        .Append(\"<QueueInfoRQ>\")\n                        .AppendFormat(\"<PatientID>{0}</PatientID>\", strPatientID)\n                        .AppendFormat(\"<PatientName >{0}</PatientName>\", strPatientName)\n                        .AppendFormat(\"<PatientSex>{0}</PatientSex>\", strPatientSex)\n                        .AppendFormat(\"<PatientBod>{0}</PatientBod>\", strBirthday)\n                        .AppendFormat(\"<PatientType>{0}</PatientType>\", strPatientType)\n                        .AppendFormat(\"<AccNumber>{0}</AccNumber>\", acc)\n                        .AppendFormat(\"<ExamModality>{0}</ExamModality>\", strModality)\n                        .AppendFormat(\"<ExamType>{0}</ExamType>\", strModalityType)\n                        .AppendFormat(\"<ExamRoom>{0}</ExamRoom>\", string.Empty)\n                        .AppendFormat(\"<ExamRoomID>{0}</ExamRoomID>\", string.Empty)\n                        .AppendFormat(\"<ProcedureCode>{0}</ProcedureCode>\", strPCode)\n                        .AppendFormat(\"<CheckingDesc>{0}</CheckingDesc>\", strPDes)\n                        .AppendFormat(\"<QueueNumber>{0}</QueueNumber>\", string.Empty)\n                        .AppendFormat(\"<Note></Note>\")\n                        .Append(\"</QueueInfoRQ>\");\n                        strQirData = builder.ToString();\n\n                        DoQueueAction(strQirData);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        private void DoQueueAction(string strQirData)\n        {\n            try\n            {\n                int nRetCode = 0;\n                string strQiaData = string.Empty;\n                QueueClass queue = new QueueClass();\n                queue.DoAction(1, ref strQirData, ref strQiaData, ref nRetCode);\n                switch (nRetCode)\n                {\n                    case 1000:\n                        break;\n                    case 1001:\n                        throw new Exception(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Queue failure\", (int)ModuleID.Report, \"Queue failure\") + \" Q_DBEXCEPTION\");\n                        break;\n                    case 1002:\n                        throw new Exception(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Queue failure\", (int)ModuleID.Report, \"Queue failure\") + \" Q_OPENDBFAIL\");\n                        break;\n                    case 1003:\n                        throw new Exception(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Queue failure\", (int)ModuleID.Report, \"Queue failure\") + \" Q_QUESYSFAIL\");\n                        break;\n                    case 1004:\n                        throw new Exception(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Queue failure\", (int)ModuleID.Report, \"Queue failure\") + \" Q_QUESYSDOWN\");\n                        break;\n                    default:\n                        throw new Exception(ClientFrameworkBuilder.Instance.MultiLanManager.GetString(\"Queue failure\", (int)ModuleID.Report, \"Queue failure\") + \" Q_RETURNUNKNOWCODE\");\n                        break;\n\n                }\n                if (strQiaData != null && strQiaData.Trim().Length > 0)\n                {\n\n                    System.Text.UTF8Encoding encoder = new UTF8Encoding();\n                    MemoryStream ms = new MemoryStream(encoder.GetBytes(strQiaData));\n                    XmlTextReader tr = new XmlTextReader(ms);\n\n                    tr.WhitespaceHandling = WhitespaceHandling.None;\n                    XmlDocument xmlDoc = new XmlDocument();\n                    //Load the file into the XmlDocument\n                    xmlDoc.Load(tr);\n                    //Close off the connection to the file.\n                    tr.Close();\n\n\n                    XmlNode root = xmlDoc.FirstChild;\n\n                    XmlNode xn = root.NextSibling;\n                    XmlNodeList nodeList = xn.SelectNodes(\"EffectLevel\");\n                    string strEffectLevel = string.Empty, strPatientID = string.Empty, strAccNo = string.Empty, strProcedureCode = string.Empty, strModality = string.Empty, strReturnCode = string.Empty;\n                    if (nodeList != null || nodeList.Count > 0)\n                    {\n                        strEffectLevel = nodeList[0].InnerText.Trim();\n                    }\n                    nodeList = xn.SelectNodes(\"PatientID\");\n                    if (nodeList != null || nodeList.Count > 0)\n                    {\n                        strPatientID = nodeList[0].InnerText.Trim();\n                    }\n                    nodeList = xn.SelectNodes(\"AccNumber\");\n                    if (nodeList != null || nodeList.Count > 0)\n                    {\n                        strAccNo = nodeList[0].InnerText.Trim();\n                    }\n                    nodeList = xn.SelectNodes(\"ProcedureCode\");\n                    if (nodeList != null || nodeList.Count > 0)\n                    {\n                        strProcedureCode = nodeList[0].InnerText.Trim();\n                    }\n                    nodeList = xn.SelectNodes(\"ExamModality\");\n                    if (nodeList != null || nodeList.Count > 0)\n                    {\n                        strModality = nodeList[0].InnerText.Trim();\n                    }\n\n                    nodeList = xn.SelectNodes(\"ReturnCode\");\n                    if (nodeList != null || nodeList.Count > 0)\n                    {\n                        strReturnCode = nodeList[0].InnerText.Trim();\n                    }\n\n                    Context oContext = null;\n\n                    oContext = new Context();\n                    oContext.MessageName = \"Exam_UpdateQueue\";\n                    oContext.Parameters = string.Format(\"EffectLevel={0}&PatientID={1}&AccNO={2}&ProcedureCode={3}&Modality={4}\", strEffectLevel, strPatientID, strAccNo, strProcedureCode, strModality.Trim());\n                    BaseActionResult oActionResult = ClientFrameworkBuilder.Instance.WebserviceManager.DoCommand(oContext) as BaseActionResult;\n                    if (!oActionResult.Result)\n                    {\n                        throw new Exception(oActionResult.ReturnMessage);\n                    }\n                    //Update local record                          \n                    string strExpression = \"\";\n                    switch (strEffectLevel)\n                    {\n                        case \"1001\":\n                            strExpression = string.Format(\"PatientID='{0}'\", strPatientID);\n\n                            break;\n                        case \"1002\":\n                            strExpression = string.Format(\"AccNo='{0}'\", strAccNo);\n\n                            break;\n                        case \"1003\":\n                            strExpression = string.Format(\"AccNo='{0}' and ProcedureCode='{1}'\", strAccNo, strProcedureCode);\n                            break;\n                        case \"1004\":\n                            strExpression = string.Format(\"AccNo='{0}' and Modality='{1}'\", strAccNo, strModality);\n                            break;\n                        default:\n                            break;\n                    }\n\n                    DataTable dt = this._listReport.DataSource as DataTable;\n                    if (dt.Columns.Contains(ReportCommon.ReportCommon.FIELDNAME_REPORT_OPTIONAL1))\n                    {\n                        DataRow[] drFound = dt.Select(strExpression);\n                        foreach (DataRow dr in drFound)\n                        {\n                            dr[ReportCommon.ReportCommon.FIELDNAME_REPORT_OPTIONAL1] = YesNoText(1);\n                            dr.AcceptChanges();\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox_Error(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n\n            }\n        }\n\n        public string YesNoText(int nValue)\n        {\n            string strText = nValue.ToString();\n            try\n            {\n                Dictionary<string, string> dicYesNo = new Dictionary<string, string>();\n\n                foreach (DataRow dr in Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.DictionaryManager.GetDictionary(70).Rows)\n                {\n\n                    string v = dr[\"Value\"] as string;\n                    string t = dr[\"Text\"] as string;\n                    v = v.ToUpper();\n                    if (!dicYesNo.ContainsKey(v))\n                    {\n                        dicYesNo.Add(v, t);\n                    }\n                }\n\n\n                strText = dicYesNo[nValue.ToString()];\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.Assert(false, ex.Message);\n\n            }\n            return strText;\n\n        }\n        #endregion\n\n        private void btnLoadMultiImage_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                ClientCommonFunction.RISLog_Info(0, System.DateTime.Now.ToString(\"mm:ss.fff \") + \"btnLoadMultiImage_Click\", \"\", 0);\n\n                if (_listReport.SelectedRows == null || _listReport.SelectedRows.Count <= 1)\n                {\n                    ClientCommonFunction.ShowMessageBox_Warning(\"Need select more than one row !\");\n                    return;\n                }\n                long nReadMode = ClientCommonFunction.GetReportProfile_Int(ReportCommon.ProfileName.Report_ReadModeForLoadingImage);\n                int isleepTime = ClientCommonFunction.GetProfile_Int(ReportCommon.ProfileName.Report_Integration_LoadDiffernetOrderImageSleepTime, ReportCommon.ModuleID.Integration);\n\n                foreach (GridViewDataRowInfo row in _listReport.Rows)\n                {\n                    if (row.IsSelected)\n                    {\n                        string accNo = row.Cells[ReportCommon.ReportCommon.FIELDNAME_ACCNO].Value.ToString();\n\n                        if (string.IsNullOrEmpty(accNo))\n                        {\n                            ClientCommonFunction.ShowMessageBox_Warning(\"No row selected!\");\n                            return;\n                        }\n\n                        Kodak.GCRIS.Client.Common.PACSImage.LoadPacsImage.GetInstance().LoadStudy(\n                      accNo,\n                      true,\n                      \"\", nReadMode);\n                        System.Threading.Thread.Sleep(isleepTime * 1000);\n                    }\n                }\n                ClientCommonFunction.RISLog_Info(0, System.DateTime.Now.ToString(\"mm:ss.fff \") + \"btnLoadMultiImage_Click, \", \"\", 0);\n            }\n            catch (Exception ex)\n            {\n                ClientCommonFunction.ShowMessageBox(ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                        (new System.Diagnostics.StackFrame()).GetFileName(),\n                        (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n        }\n\n\n        //US27953-6. 如果不符合快速打印的条件，则列表中显示查询结果\n        #region\n        private void setTerminalSearchResultToGridView(ReportCommon.ReportList_ActionOnEmptyCondition actionOnEmptyCondition, DataSet ds)\n        {\n            RCCommonFunction.Performance(\"4007\", \"Begin\", \"Query print report list\");\n            try\n            {\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 1\", \"\", 0);\n                if (ApplicationStatus.OnlineStatus == OfflineBlockConnectionState.OffLine)\n                {\n                    return;\n                }\n                if (ReportCommon.ReportList_ActionOnEmptyCondition.StopWithoutNotice == actionOnEmptyCondition && _conditionBuilder.isAllEmpty)\n                {\n                    return;\n                }\n                else if (ReportCommon.ReportList_ActionOnEmptyCondition.StopWithNotice == actionOnEmptyCondition && _conditionBuilder.isAllEmpty)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"Please choose the condition!\");\n\n                    return;\n                }\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 2, _strPrevCondition = \" + _strPrevCondition, \"\", 0);\n\n                string condition = _conditionBuilder.GetCondition();\n                if (!string.IsNullOrWhiteSpace(_strPrevCondition) && string.Compare(_strPrevCondition, condition, true) != 0)\n                {\n                    _iCurPage = 0;\n                }\n\n\n                _strPrevCondition = condition;\n                if (_strPrevCondition.Length > 3072)\n                {\n                    ClientCommonFunction.ShowMessageBox_Error(\"The query conditions is too long!\");\n                    return;\n                }\n                //US27953-100021850-100021858\n                #region\n                if (ds == null || ds.Tables.Count.Equals(0))\n                #endregion\n                {\n                    //US27953-2:查询不出来的结果，保留查询条件，提示用户未找到满足打印条件的报告；\n                    #region\n                    //US27953-100021850-100021858 ClientCommonFunction.ShowMessageBox(\"No record is found as per current conditions\");\n                    #region\n                    ClientCommonFunction.ShowMessageBox(\"No record is found\");\n                    if (checkBoxBatchreport.Checked)\n                    {\n                        if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                        {\n                            buttonClear_Click(null, null);\n\n                        }\n                    }\n                    //US27953-非批量情况下，为显示及时结果，如无数据一律执行清除GRIDVIEW操作\n                    #region\n                    else\n                    {\n                        buttonClear_Click(null, null);\n\n                    }\n                    #endregion\n                    #endregion\n                    #endregion\n                    return;\n                }\n                //US27953-100021850-100021858\n                //US27953-100021853\n                #region\n                else\n                {\n                    int currentRowCountForVerify = 0;\n                    foreach (DataTable dt in ds.Tables)\n                    {\n                        currentRowCountForVerify = currentRowCountForVerify + dt.Rows.Count;\n                    }\n\n                    if (currentRowCountForVerify.Equals(0))\n                    {\n                        ClientCommonFunction.ShowMessageBox(\"No record is found\");\n                        if (checkBoxBatchreport.Checked)\n                        {\n                            if (ClientFrameworkBuilder.Instance.ConfigDicManager.GetConfigDicValue(\"ClearListForBatchReportQuery\", \"0400\") == \"1\")\n                            {\n                                buttonClear_Click(null, null);\n\n                            }\n                        }\n                        //US27953-非批量情况下，为显示及时结果，如无数据一律执行清除GRIDVIEW操作\n                        #region\n                        else\n                        {\n                            buttonClear_Click(null, null);\n\n                        }\n                        #endregion\n                        return;\n                    }\n                }\n                #endregion\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 3, _strPrevCondition = \" + _strPrevCondition, \"\", 0);\n\n                _iCurRowsCount = ds.Tables[0].Rows.Count;\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 4, sending to printer ok\", \"\", 0);\n\n                this._listReport.ColumnIndexChanged -= new Telerik.WinControls.UI.ColumnIndexChangedEventHandler(this._listReport_ColumnIndexChanged);\n                ClientCommonFunction.GenerateGridHeader(_PanelName, _listReport);\n                this._listReport.ColumnIndexChanged += new Telerik.WinControls.UI.ColumnIndexChangedEventHandler(this._listReport_ColumnIndexChanged);\n\n                ClientCommonFunction.LocalizeGridHeader(_listReport);\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 5, make columns ok\", \"\", 0);\n\n                ClientCommonFunction.UpdateDataTableText(ds.Tables[\"ReportPage\"], _listReport);\n                ClientCommonFunction.PrepareImageColumnForGridBinding(ds.Tables[\"ReportPage\"], _PanelName);\n                _listReport.DataSource = ds.Tables[\"ReportPage\"];\n                _listReport.Tag = ds.Tables[\"ReportList\"];\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 6, Binding ok\", \"\", 0);\n\n                // ClientCommonFunction.LocalizeGridHeader(_listReport);\n                AddRPStatusColumn();\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 7, Localization ok\", \"\", 0);\n\n                if (_chkQuickPrint.Checked || this.chkQuickSendFilm.Checked || checkBoxBatchreport.Checked)\n                {\n                    _conditionBuilder.Focus();\n                    //US27953-结果不为空时才清理GRIDVIEW,结果为空时要清理\n                    #region\n                    if ((_listReport.DataSource as DataTable).Rows.Count != 0)\n                    {\n                        _conditionBuilder.Clear(\"AccNo,PatientID\");\n                    }\n                    #endregion\n                }\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet 8\", \"\", 0);\n\n                Kodak.GCRIS.Client.FrameWork.ClientFrameworkBuilder.Instance.FrameWorkUI.FlexGridRememberSort(\n                    _listReport, _PanelName);\n\n                lblSelectedCount.Text = ClientCommonFunction.GetLanguage(\"SelectedCount\") + _listReport.SelectedRows.Count.ToString();\n\n                ClientCommonFunction.SelectGridRow(_listReport, 0);\n\n                ClientCommonFunction.RISLog_Info(0, \"BindDataSet 60, Async Request Count\", \"\", 0);\n\n                string cond = string.Empty;\n\n                if (_bOnlyShowApproved)\n                {\n                    if (string.IsNullOrEmpty(_strPrevCondition))\n                        cond = \"  tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n                    else\n                        cond = _strPrevCondition + \" and tRegProcedure.status=\" + System.Convert.ToInt32(ReportCommon.RP_Status.FirstApprove).ToString();\n                }\n                else\n                {\n                    if (string.IsNullOrEmpty(_strPrevCondition))\n                        cond = \"  tRegProcedure.status >=\" + System.Convert.ToInt32(ReportCommon.RP_Status.Examination).ToString();\n                    else\n                        cond = _strPrevCondition + \" and tRegProcedure.status >=\" + System.Convert.ToInt32(ReportCommon.RP_Status.Examination).ToString();\n                }\n                //US27953-1. 快速打印checked，病人编号只查询创建时间是最新的order或放射编号查询；\n                #region\n                if (isQuickPrintAsPID)\n                {\n                    //US27953-创建时间是最新的order,而非部位\n                    #region\n                    //cond += \" and tRegProcedure.CreateDt=(select max(a.CreateDt) from tRegProcedure a,tRegOrder b,tRegPatient c where a.OrderGuid=b.OrderGuid and b.PatientGuid=c.PatientGuid and c.PatientID='\"+currentPid.Trim()+\"')\";\n                    cond += \" and tRegOrder.CreateDt=(select max(b.CreateDt) from tRegProcedure a,tRegOrder b,tRegPatient c where a.OrderGuid=b.OrderGuid and b.PatientGuid=c.PatientGuid and c.PatientID='\" + currentPid.Trim() + \"')\";\n                    #endregion\n                }\n                #endregion\n\n                _asyncCount.Start(cond);\n\n                ClientCommonFunction.RISLog_Info(0, \"ReportPrintPanel::BindDataSet END\", \"\", 0);\n                //this._listReport.MasterGridViewTemplate.BestFitColumns();\n                //foreach (GridViewDataColumn col in _listReport.Columns)\n                //{\n                //    string colName = col.FieldName.ToUpper();\n                //    if (col.IsVisible && !colName.EndsWith(\"WYSTEXT\") && !colName.EndsWith(\"WYGTEXT\") && !colName.EndsWith(\"COMMENTS\") && !colName.EndsWith(\"HEALTHHISTORY\") && !colName.EndsWith(\"OBSERVATION\"))\n                //        col.BestFit();\n                //}\n            }\n\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.Assert(false, ex.Message);\n\n                ClientCommonFunction.RISLog_Error(0, ex.Message,\n                    (new System.Diagnostics.StackFrame()).GetFileName(),\n                    (new System.Diagnostics.StackFrame()).GetFileLineNumber());\n            }\n            RCCommonFunction.Performance(\"4007\", \"End\", \"Query print report list\");\n\n        }\n        #endregion\n\n        //US27953-3,4,7\n        #region\n        private string verifyCurrentSearchedReportPRsApproveStatus(DataTable dt)\n        {\n\n            //全部已审返回1\n            int approveCount = 0;\n            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                if (ReportCommon.Converter.toInt(dt.Rows[i][_RPSTATUS]) == (int)ReportCommon.RP_Status.FirstApprove)\n                {\n                    approveCount++;\n                }\n            }\n\n            if (approveCount.Equals(dt.Rows.Count))\n            {\n\n                return \"1\";\n            }\n            //全部未审返回2\n            int unApproveCount = 0;\n            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                //US27953-100021851  if (ReportCommon.Converter.toInt(dt.Rows[i][_RPSTATUS]) != (int)ReportCommon.RP_Status.FirstApprove)\n                #region\n                if (ReportCommon.Converter.toInt(dt.Rows[i][_RPSTATUS]) > (int)ReportCommon.RP_Status.Examination\n                   && ReportCommon.Converter.toInt(dt.Rows[i][_RPSTATUS]) < (int)ReportCommon.RP_Status.FirstApprove)\n                #endregion\n                {\n                    unApproveCount++;\n                }\n            }\n            if (unApproveCount.Equals(dt.Rows.Count))\n            {\n\n                return \"2\";\n            }\n\n            //其它情况返回3\n            return \"3\";\n\n        }\n\n        private bool verifyCurrentSearchedReportUnApprovePRsPrintOrNot(DataTable dt, List<string> _canPrintPatientTypes, string strPatientType)\n        {\n            int isPrintCount = 0;\n            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                if (_canPrintPatientTypes.Contains(strPatientType) && CanPrintUnapprovedReport() && _canPrintUnapprovedReport\n                                && dt.Rows[i][ReportCommon.ReportCommon.FIELDNAME_REPORTGUID] != DBNull.Value\n                                && dt.Rows[i][ReportCommon.ReportCommon.FIELDNAME_REPORTGUID] != null\n                                && dt.Rows[i][ReportCommon.ReportCommon.FIELDNAME_REPORTGUID] != \"\")\n                {\n\n                    isPrintCount++;\n                }\n\n            }\n\n            if (isPrintCount.Equals(dt.Rows.Count))\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        #endregion\n\n        #region Added by Kevin For SR Print 2015.10.26\n\n        private void LoadReportInfoFromDataSet(DataSet _curReportDataSet)\n        {\n\n            if (_curReportDataSet.Tables.Count > 0 && _curReportDataSet.Tables[0].Rows.Count > 0)\n            {\n                string wys, wyg, techinfo, appendinfo, isPositive, isDiagnosisRight, acrCode, aDesc, pDesc, operationStep, doctorAdvice, keyword, reportQuality, accordRate, scoringVersion, submitSite, checkitemName, comments, inspection, bedside, modalitytype, submitterSign, firstApproverSign, secondApproverSign, submitterSignTimeStamp, firstApproverSignTimeStamp, secondApproverSignTimeStamp;\n                string bodypart;\n                string observation = wys = wyg = techinfo = appendinfo = isPositive = isDiagnosisRight = acrCode = aDesc = pDesc = operationStep = doctorAdvice = keyword = reportQuality = accordRate = scoringVersion = submitSite = checkitemName = comments = inspection = bedside = modalitytype = submitterSign = firstApproverSign = secondApproverSign = submitterSignTimeStamp = firstApproverSignTimeStamp = secondApproverSignTimeStamp = \"\";\n\n                foreach (DataColumn col in _curReportDataSet.Tables[0].Columns)\n                {\n                    object objValue = _curReportDataSet.Tables[0].Rows[0][col.ColumnName];\n                    string fldValue = \"\";\n                    if (objValue.GetType() == System.Type.GetType(\"System.Byte[]\"))\n                    {\n                        Byte[] buff = objValue as Byte[];\n                        //fldValue = System.Text.Encoding.Unicode.GetString(buff);\n                        fldValue = Encoding.Default.GetString(buff);\n                    }\n                    else\n                    {\n                        fldValue = objValue.ToString();\n                    }\n\n                    if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_WYS) == 0)\n                    {\n                        wys = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_WYG) == 0)\n                    {\n                        wyg = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_TECHINFO) == 0)\n                    {\n                        techinfo = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_OBSERVATION) == 0)\n                    {\n                        observation = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_APPENDINFO) == 0)\n                    {\n                        appendinfo = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_ISPOSITIVE) == 0)\n                    {\n                        isPositive = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_ISDIAGNOSISRIGHT) == 0)\n                    {\n                        isDiagnosisRight = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_ACRCODE) == 0)\n                    {\n                        acrCode = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_ACRANATOMIC) == 0)\n                    {\n                        aDesc = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_ACRPATHOLOGIC) == 0)\n                    {\n                        pDesc = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_REGPROCEDUREOPERATIONSTEP) == 0)\n                    {\n                        operationStep = GetStringFromDataSet(_curReportDataSet, ReportCommon.ReportCommon.FIELDNAME_tRegProcedure__OperationStep);\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_DOCTORADVICE) == 0)\n                    {\n                        doctorAdvice = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_KEYWORD) == 0)\n                    {\n                        keyword = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_REPORTQUALITY) == 0)\n                    {\n                        reportQuality = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_ACCORDRATE) == 0)\n                    {\n                        accordRate = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_SCORINGVERSION) == 0)\n                    {\n                        scoringVersion = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_REPORT_CHECKITEMNAME) == 0)\n                    {\n                        //checkitemName = GetStringFromDataSet(_curReportDataSet, ReportCommon.ReportCommon.FIELDNAME_tProcedureCode__CheckingItem);\n                        checkitemName = fldValue;//Johnson for DE34880\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_REPORT_COMMENTS) == 0)\n                    {\n                        comments = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_INSPECTION) == 0)\n                    {\n                        inspection = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_ORDER_BEDSIDE) == 0)\n                    {\n                        bedside = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_tRegProcedure__ModalityType) == 0)\n                    {\n                        modalitytype = fldValue;\n                        AddDataField(col.ColumnName,\n                         ReportEditorCtrl_FieldType.Default,\n                          ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName));\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_tRegProcedure__Bodypart) == 0)\n                    {\n                        bodypart = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGN) == 0)\n                    {\n                        submitterSign = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGN) == 0)\n                    {\n                        firstApproverSign = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGN) == 0)\n                    {\n                        secondApproverSign = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNTIMESTAMP) == 0)\n                    {\n                        submitterSignTimeStamp = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNTIMESTAMP) == 0)\n                    {\n                        firstApproverSignTimeStamp = fldValue;\n                    }\n                    else if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNTIMESTAMP) == 0)\n                    {\n                        secondApproverSignTimeStamp = fldValue;\n                    }\n                    else\n                    {\n                        if (ReportCommon.ReportCommon.CompareStringWithoutCase(col.ColumnName, ReportCommon.ReportCommon.FIELDNAME_tReport__SubmitSite) == 0)\n                        {\n                            submitSite = fldValue;\n                        }\n                        AddDataField(col.ColumnName,\n                            ReportEditorCtrl_FieldType.Default,\n                             ClientCommonFunction.GetStringForPrinting(_curReportDataSet.Tables[0], col.ColumnName));\n                    }\n                }\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_WYS,\n                    ReportEditorCtrl_FieldType.RichText2,\n                    wys);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_WYG,\n                     ReportEditorCtrl_FieldType.RichText3,\n                     wyg);\n\n                Color colorBk = Color.White;\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_REPORT_CHECKITEMNAME,\n                    ReportEditorCtrl_FieldType.Dynamic_Text,\n                    checkitemName);\n\n                Color _colorReadOnly = Color.FromArgb(212, 208, 200);\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_REGPROCEDUREOPERATIONSTEP,\n                    ReportEditorCtrl_FieldType.Dynamic_RichText,\n                    operationStep);\n\n\n                colorBk = Color.White;\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_TECHINFO,\n                ReportEditorCtrl_FieldType.Dynamic_MultilineText,\n                techinfo);\n\n                colorBk = Color.White;\n\n\n                // EK_HI00119478, Observation does not use the default value.\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_OBSERVATION,\n                    ReportEditorCtrl_FieldType.Dynamic_CheckedListBox,\n                    // MakeDictionaryText(DictionaryTag.Observation, observation, isNew), //MakePositiveString(isPositive),\n                    // MakeDictionaryText(DictionaryTag.Observation, observation));\n                    MakeDictionaryText(ReportCommon.DictionaryTag.Observation, observation));//Johnson \n                //EK_HI00113028\n                colorBk = Color.White;\n\n                #region set new report's defaul inspection\n                string temp = \"\";\n                //if this order's inspection is empty and is new report use dictionary default value\n                //if (string.IsNullOrEmpty(inspection) && isNew && !string.IsNullOrEmpty((temp = ClientCommonFunction.GetDictionaryDefaultDesc((int)DictionaryTag.Inspection))))\n                //{\n                //    inspection = temp;\n                //}\n                #endregion\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_INSPECTION,\n                    ReportEditorCtrl_FieldType.Dynamic_ComboBox_DropDown,\n                     //MakeDictionaryText(DictionaryTag.Inspection, inspection, isNew));\n                     MakeSelectedComboString(inspection));\n                colorBk = Color.White;\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_ACRCODE,\n                    ReportEditorCtrl_FieldType.Dynamic_Text,\n                    acrCode);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_ACRANATOMIC,\n                    ReportEditorCtrl_FieldType.Dynamic_Text,\n                    aDesc);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_ACRPATHOLOGIC,\n                    ReportEditorCtrl_FieldType.Dynamic_Text,\n                    pDesc);\n                colorBk = Color.Transparent; // White;\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_ISPOSITIVE,\n                    ReportEditorCtrl_FieldType.Dynamic_Radio, // Dynamic_ComboBox Dynamic_BoolCheckBox\n                                                              // MakeDictionaryText(DictionaryTag.Positive, isPositive, isNew, true));\n                     MakeSelectedComboString(isPositive));\n\n                colorBk = Color.White;\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_REPORTQUALITY,\n                    ReportEditorCtrl_FieldType.Dynamic_ComboBox,\n                    // MakeReportQualityText(submitSite, scoringVersion, reportQuality));\n                    reportQuality);\n\n                colorBk = Color.White;\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_ACCORDRATE,\n                    ReportEditorCtrl_FieldType.Dynamic_ComboBox,\n                     // MakeDictionaryText(DictionaryTag.AccordRate, accordRate, isNew));\n                     MakeSelectedComboString(accordRate));\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_KEYWORD,\n                    ReportEditorCtrl_FieldType.Dynamic_Text,\n                    keyword);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_DOCTORADVICE,\n                        ReportEditorCtrl_FieldType.Dynamic_MultilineText,\n                        doctorAdvice);\n\n                if (comments != null)\n                {\n                    // _richComments.Text = comments;\n\n                    AddDataField(ReportCommon.ReportCommon.FIELDNAME_tReport__Comments,\n                        ReportEditorCtrl_FieldType.Default,\n                        comments);\n                }\n\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_ORDER_BEDSIDE,\n                    ReportEditorCtrl_FieldType.Default,\n                    // ClientCommonFunction.GetDictionary2((int)DictionaryTag.YesNo)[bedside]);\n                    bedside);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGN,\n                ReportEditorCtrl_FieldType.Default,\n                submitterSign);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGN,\n                ReportEditorCtrl_FieldType.Default,\n                firstApproverSign);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGN,\n                ReportEditorCtrl_FieldType.Default,\n                secondApproverSign);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNTIMESTAMP,\n                ReportEditorCtrl_FieldType.Default,\n                submitterSignTimeStamp);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNTIMESTAMP,\n                ReportEditorCtrl_FieldType.Default,\n                firstApproverSignTimeStamp);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNTIMESTAMP,\n                ReportEditorCtrl_FieldType.Default,\n                secondApproverSignTimeStamp);\n\n                //_srPrintHelper.BodyHtml = ClientCommonFunction.GetSingleStringFromDataTable(_curReportDataSet.Tables[3], \"NaturalContentHtml\");\n            }\n            else\n            {\n            }\n\n        }\n\n        private void SetSignImage(DataSet curReportDataSet)\n        {\n            try\n            {\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_CREATORSIGNIMAGE,\n                        ReportEditorCtrl_FieldType.Image,\n                        null);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE,\n                        ReportEditorCtrl_FieldType.Image,\n                        null);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE,\n                        ReportEditorCtrl_FieldType.Image,\n                        null);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNIMAGE,\n                        ReportEditorCtrl_FieldType.Image,\n                        null);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNIMAGE_CA,\n                 ReportEditorCtrl_FieldType.Image,\n                 null);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE_CA,\n                   ReportEditorCtrl_FieldType.Image,\n                   null);\n\n                AddDataField(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE_CA,\n                   ReportEditorCtrl_FieldType.Image,\n                   null);\n\n                string strReportGuid = ClientCommonFunction.GetStringForPrinting(curReportDataSet.Tables[0], ReportCommon.ReportCommon.FIELDNAME_REPORTGUID);\n\n                Context context = new Context();\n                //context.Model = model;\n                context.MessageName = \"Rpt_GetSignImage\";\n                Dictionary<string, string> paramMap = new Dictionary<string, string>();\n                paramMap.Add(\"REPORTGUID\", strReportGuid);\n                context.Parameters = ReportCommon.ReportCommon.MakeParameter(paramMap);\n\n                DataSetActionResult dsrt = ClientCommonFunction.RequestWebService(context);\n\n                if (dsrt.Result && dsrt.DataSetData.Tables[\"CreaterSignImage\"] != null && dsrt.DataSetData.Tables[\"CreaterSignImage\"].Rows.Count > 0)\n                {\n                    AddDataField(ReportCommon.ReportCommon.FIELDNAME_CREATORSIGNIMAGE,\n                   ReportEditorCtrl_FieldType.Image,\n                   dsrt.DataSetData.Tables[\"CreaterSignImage\"].Rows[0][\"SignImage\"]);\n\n                }\n\n                if (dsrt.Result && dsrt.DataSetData.Tables[\"FirstApproverSignImage\"] != null && dsrt.DataSetData.Tables[\"FirstApproverSignImage\"].Rows.Count > 0)\n                {\n                    AddDataField(ReportCommon.ReportCommon.FIELDNAME_FIRSTAPPROVERSIGNIMAGE,\n                     ReportEditorCtrl_FieldType.Image,\n                     dsrt.DataSetData.Tables[\"FirstApproverSignImage\"].Rows[0][\"SignImage\"]);\n                }\n\n                if (dsrt.Result && dsrt.DataSetData.Tables[\"SubmitterSignImage\"] != null && dsrt.DataSetData.Tables[\"SubmitterSignImage\"].Rows.Count > 0)\n                {\n                    AddDataField(ReportCommon.ReportCommon.FIELDNAME_SUBMITTERSIGNIMAGE,\n                      ReportEditorCtrl_FieldType.Image,\n                     dsrt.DataSetData.Tables[\"SubmitterSignImage\"].Rows[0][\"SignImage\"]);\n                }\n\n                if (dsrt.Result && dsrt.DataSetData.Tables[\"SecondApproverSignImage\"] != null && dsrt.DataSetData.Tables[\"SecondApproverSignImage\"].Rows.Count > 0)\n                {\n                    AddDataField(ReportCommon.ReportCommon.FIELDNAME_SECONDAPPROVERSIGNIMAGE,\n                      ReportEditorCtrl_FieldType.Image,\n                     dsrt.DataSetData.Tables[\"SecondApproverSignImage\"].Rows[0][\"SignImage\"]);\n                }\n            }\n            catch (Exception ex)\n            {\n            }\n        }\n\n        /// <summary>\n        /// AddDataField\n        /// </summary>\n        /// <param name=\"fieldName\"></param>\n        /// <param name=\"fieldType\"></param>\n        /// <param name=\"fieldValue\"></param>\n        /// <param name=\"replaceMode\"></param>\n        /// <param name=\"fieldVisibility\"></param>\n        private void AddDataField(string fieldName,\n            ReportEditorCtrl_FieldType fieldType,\n            object fieldValue)\n        //ReplaceMode replaceMode,\n        //Visibility fieldVisibility,\n        //Color colorBk)\n        {\n            lock (_fieldsMap)\n            {\n                bool bFound = false;\n\n                string key = fieldName.ToUpper();\n                if (_fieldsMap.ContainsKey(key))\n                {\n                    Kodak.GCRIS.Client.ReportPrintHelper.ReportEnumHelper.tagDataField dataField = (Kodak.GCRIS.Client.ReportPrintHelper.ReportEnumHelper.tagDataField)_fieldsMap[key];\n\n                    dataField.fieldType = fieldType;\n                    dataField.fieldValue = fieldValue;\n                    _fieldsMap[key] = dataField;\n                    bFound = true;\n                }\n                else\n                {\n                    Kodak.GCRIS.Client.ReportPrintHelper.ReportEnumHelper.tagDataField dataField = new Kodak.GCRIS.Client.ReportPrintHelper.ReportEnumHelper.tagDataField();\n\n                    dataField.fieldName = fieldName;\n                    dataField.fieldType = fieldType;\n                    dataField.fieldValue = fieldValue;\n                    // dataField.fieldVisibility = fieldVisibility;\n\n                    _fieldsMap.Add(key, dataField);\n                }\n            }\n        }\n\n        /// <summary>\n        /// Get value string, separated by comma, from DataSet by column.\n        /// </summary>\n        /// <param name=\"ds\"></param>\n        /// <param name=\"colName\">column name</param>\n        /// <returns>\n        ///     value string separated by comma;\n        ///     empty string when DataSet doesn't contain colName.\n        /// </returns>\n        private string GetStringFromDataSet(DataSet ds, string colName)\n        {\n            //\n            //may be multi-rows\n            if (ds.Tables.Count <= 0 || ds.Tables[0].Rows.Count <= 0)\n            {\n                return \"\";\n            }\n\n            if (!ds.Tables[0].Columns.Contains(colName))\n            {\n                return \"\";\n            }\n\n            string ret = \"\";\n            string tmp = \"\";\n            System.Collections.Specialized.StringCollection strCol = new System.Collections.Specialized.StringCollection();\n            foreach (DataRow dr in ds.Tables[0].Rows)\n            {\n                if (ds.Tables[0].Columns[colName].DataType == typeof(DateTime))\n                {\n                    tmp = (dr[colName] == DBNull.Value ? \"\" : Convert.ToDateTime(dr[colName]).ToString(\"yyyy-MM-dd HH:mm:ss\"));\n                }\n                else\n                {\n                    tmp = dr[colName].ToString();\n                }\n                if (!strCol.Contains(tmp))\n                {\n                    strCol.Add(tmp);\n                    ret += tmp + \",\";\n                }\n            }\n            ret = ret.Trim(\", \".ToCharArray());\n\n            return ret;\n        }\n\n        private string MakeSelectedComboString(string itemString)\n        {\n            return itemString + \",1\";\n        }\n\n        private string MakeDictionaryText(ReportCommon.DictionaryTag tag, string selectedValue)\n        {\n            Dictionary<string, string> dic = ClientCommonFunction.GetDictionary((int)tag);\n\n            string ret = \"\";\n\n            if (dic != null)\n            {\n                foreach (string key in dic.Keys)\n                {\n                    string rt = dic[key];\n\n                    if (key != null && rt != null)\n                    {\n                        if (selectedValue != null && key.ToUpper().CompareTo(selectedValue.ToUpper()) == 0)\n                        {\n                            ret += rt + \",1;\";\n                        }\n                        else\n                        {\n                            ret += rt + \",0;\";\n                        }\n                    }\n                }\n                if (!ret.Contains(\",1;\") && !string.IsNullOrEmpty(selectedValue))//for dropdown combobox,not in dropdown list\n                {\n                    ret += \"Ж\" + selectedValue + \"@\";\n                }\n            }\n\n            return ret;\n        }\n        #endregion\n\n        bool CanPrintBarCode(string accNo, string remoteAccNo, string patientType)\n        {\n            if (this.callChargeDLLBeforePrinting)\n            {\n                var xml = new PrintBarCodePlugInXml\n                {\n                    AccNo = accNo,\n                    RemoteAccNo = remoteAccNo,\n                    PatientType = patientType\n                };\n\n                var checkCharge = DllLoaderFactory<PrintBarCodePlugIn>.Create(ClientCommonFunction.Log);\n                if (!checkCharge.CanPrintBarCode(ClientCommonFunction.Log, xml))\n                {\n                    ClientCommonFunction.RISLog_Error(53, \"Checking Charge NOT passed.\", new System.Diagnostics.StackFrame(true).GetFileName(), new System.Diagnostics.StackFrame(true).GetFileLineNumber());\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}\n",
			"file": "/D/Workshop/Corp/GCRIS/SRC/Client/Report/ReportListPanel/ReportPrintPanel.cs",
			"file_size": 287216,
			"file_write_time": 131729094568834806,
			"settings":
			{
				"buffer_size": 279994,
				"line_ending": "Windows",
				"scratch": true
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control:install",
				"Package Control: Install Package"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"//shgwp1031/CSHHCIS/Temp/Robin/全景图文报告打印问题/上海/client log/Log/2018-06-08/2018-06-08-10.log",
		"/C/Windows/System32/drivers/etc/hosts",
		"/D/Workshop/Corp/GCRIS/SRC/Service.Tools/GCRISUpgrade/Script/RIS20/Update1.sql",
		"/D/Workshop/Corp/GCRIS/SRC/Client/Report/ReportEditor/ReportEditorImpl.cs",
		"//shgwp1031/CSHHCIS/Temp/Robin/全景图文报告打印问题/上海/client log/Log/2018-06-08/2018-06-08-11.log",
		"/D/Request.xsd",
		"/D/Workshop/Corp/kiosk/branches/Puma_MR1/PS/OCR/LeadOCR/RawFile.cs",
		"/D/Workshop/Corp/kiosk/branches/Puma_MR1/PS/3rdParty/XPDF/xpdf-chinese-simplified/README",
		"/D/Workshop/Corp/kiosk/branches/Puma_MR1/PS/3rdParty/ErrorCode/ErrorCode/zh-CN.json",
		"/D/Workshop/Corp/kiosk/branches/Puma_MR1/PS/OCR/OcrMain/OcrMain/OcrService.cs",
		"/D/Backup/Redmine/Plugin/redmine_issue_templates/.circleci/config.yml",
		"/D/production.log",
		"/D/a",
		"/D/Workshop/Corp/GCSolution/Documents/CustomerVisit/遵义医学院第二附属医院/数据结构/Request.xsd",
		"/D/Workshop/Corp/GCSolution/Documents/CustomerVisit/遵义医学院第二附属医院/数据结构/Notification.xsd",
		"/D/Workshop/Corp/GCSolution/Documents/CustomerVisit/遵义医学院第二附属医院/数据结构/Schedule.xsd",
		"/D/Workshop/GitHub/xiaomijimu/sandbox/myPython/guessTheNumber.py",
		"/D/Workshop/GitHub/xiaomijimu/sandbox/myPython/test.py",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/User/AdvancedNewFile.sublime-settings",
		"/D/Workshop/GitHub/xiaomijimu/sandbox/myPython/atest.py",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/Default (OSX).sublime-mousemap",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/User/SublimeREPL.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/User/SublimeCodeIntel.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/Jedi - Python autocompletion/sublime_jedi.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/User/trailing_spaces.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/TrailingSpaces/trailing_spaces.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/User/sublime_jedi.sublime-settings",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/User/Default.sublime-keymap",
		"/C/Users/jimzh/AppData/Roaming/Sublime Text 3/Packages/SublimeREPL/config/Python/Main.sublime-menu",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/Csh.Hcis.GC.VueScheduler.Web/app-resources/dependencies/Chart.js",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/Csh.Hcis.GC.VueScheduler.Common/Utils/Tuple2.cs",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/Csh.Hcis.GC.VueScheduler.Web/app/pages/scheduler-list/exam-confirm/exam-confirm.ctrl.js",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/Csh.Hcis.GC.VueScheduler.Service/Models/ManualBookingModel.cs",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/Csh.Hcis.GC.VueScheduler.Service/Audit/BookingProcedureAuditQuery.cs",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/Csh.Hcis.GC.VueScheduler.WebApi/Scripts/jquery.validate-vsdoc.js",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/Csh.Hcis.GC.VueScheduler.Web/app/pages/scheduler-list/scheduler-list.ctrl.js",
		"/D/Workshop/Corp/Platform/Gateway/CSH.HCIS.Platform.Gateway.Service/Entry/IntegrationService.cs",
		"/D/Workshop/Corp/Platform/Ucc/Csh.Hcis.GC.UCC.Service/IIntegrationService.cs",
		"/D/Workshop/Corp/Platform/Gateway/CSH.HCIS.Platform.Gateway.Common/ConstData.cs",
		"/D/Workshop/Corp/VueScheduler/trunk/SRC/VueScheduler.sln",
		"/D/bogus-nxdomain.china.conf",
		"/D/Temp/Sample Images/I1700000.dcm",
		"/D/Workshop/Corp/Platform/Gateway/CSH.HCIS.Platform.Gateway.WebApi/Controllers/DemoController.cs",
		"/D/accelerated-domains.china.conf",
		"/D/Temp/KIOSKIntegration/RISGCExportPdf/RISGCExportPdf.exe.config"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"D:\\Workshop\\Corp\\GCRIS\\SRC"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"<div class=\"result\" id=\"myDiv\" style=\"display: none;\">点击下载:",
			"</div>",
			"/a><br></div>",
			"</a><br>",
			"\" target=\"_self\" download=\"new\">",
			"<div class=\"result\" id=\"myDiv\" style=\"display: block;\">点击下载:",
			"<a href=\"",
			"</a><br>",
			"\" target=\"_self\" download=\"new\">",
			"<a href=\"",
			"</a><br><a href=\"",
			"\" target=\"_self\" download=\"new\">",
			"<div class=\"result\" id=\"myDiv\" style=\"display: block;\">点击下载:<a href=\"",
			"\" target=\"_self\" download=\"new\">",
			"    href=\"",
			"\" target=\"_self\" ",
			"确费",
			"退费",
			"itemcharged",
			"charged",
			"ReportEditorImpl",
			"ReportEditorImpl.reset",
			"GetStringForPrinting",
			".jpg",
			"error",
			"&quot;"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\n",
			"   ",
			"\n",
			"",
			"\""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/My Cloud/My Corp Documents/HCIS/VueGateway/Forward.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1793,
						"regions":
						{
						},
						"selection":
						[
							[
								918,
								1093
							]
						],
						"settings":
						{
							"SL.16.region_keys":
							[
							],
							"SL.17.region_keys":
							[
							],
							"git_gutter_is_enabled": false,
							"in_converting": true,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8-SIG",
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1112,
						"regions":
						{
						},
						"selection":
						[
							[
								1112,
								1112
							]
						],
						"settings":
						{
							"SL.17.region_keys":
							[
							],
							"SL.18.region_keys":
							[
							],
							"SL.22.region_keys":
							[
							],
							"auto_name": "GCRis2Order",
							"default_dir": "D:\\My Cloud\\My Corp Documents\\HCIS\\VueGateway",
							"git_gutter_is_enabled": false,
							"is_init_dirty_state": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/D/Temp/Logs/韩佩医生客户端/2018-06-07/2018-06-07-09.log",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39188,
						"regions":
						{
						},
						"selection":
						[
							[
								11293,
								11293
							]
						],
						"settings":
						{
							"SL.18.region_keys":
							[
							],
							"git_gutter_is_enabled": false,
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 975.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 160550,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										179,
										199
									],
									[
										434,
										454
									],
									[
										861,
										881
									],
									[
										1116,
										1136
									],
									[
										1536,
										1556
									],
									[
										1757,
										1777
									],
									[
										2040,
										2060
									],
									[
										2469,
										2489
									],
									[
										2869,
										2889
									],
									[
										3172,
										3192
									],
									[
										3644,
										3664
									],
									[
										3990,
										4010
									],
									[
										4439,
										4459
									],
									[
										4933,
										4953
									],
									[
										5431,
										5451
									],
									[
										5949,
										5969
									],
									[
										6077,
										6097
									],
									[
										6339,
										6359
									],
									[
										6708,
										6728
									],
									[
										7310,
										7330
									],
									[
										7510,
										7530
									],
									[
										7696,
										7716
									],
									[
										7996,
										8016
									],
									[
										8188,
										8208
									],
									[
										8385,
										8405
									],
									[
										8783,
										8803
									],
									[
										9244,
										9264
									],
									[
										9480,
										9500
									],
									[
										9781,
										9801
									],
									[
										10043,
										10063
									],
									[
										10343,
										10363
									],
									[
										10564,
										10584
									],
									[
										10847,
										10867
									],
									[
										11420,
										11440
									],
									[
										11633,
										11653
									],
									[
										11845,
										11865
									],
									[
										12303,
										12323
									],
									[
										12575,
										12595
									],
									[
										12830,
										12850
									],
									[
										13410,
										13430
									],
									[
										13905,
										13925
									],
									[
										14421,
										14441
									],
									[
										14549,
										14569
									],
									[
										14811,
										14831
									],
									[
										15220,
										15242
									],
									[
										15521,
										15543
									],
									[
										15832,
										15854
									],
									[
										16134,
										16156
									],
									[
										16435,
										16457
									],
									[
										16746,
										16768
									],
									[
										17087,
										17103
									],
									[
										17343,
										17359
									],
									[
										17569,
										17585
									],
									[
										17618,
										17634
									],
									[
										17924,
										17940
									],
									[
										18041,
										18057
									],
									[
										18100,
										18116
									],
									[
										18353,
										18369
									],
									[
										18446,
										18462
									],
									[
										18732,
										18748
									],
									[
										18920,
										18936
									],
									[
										18962,
										18978
									],
									[
										19187,
										19203
									],
									[
										19229,
										19245
									],
									[
										19495,
										19511
									],
									[
										19738,
										19754
									],
									[
										20030,
										20046
									],
									[
										20304,
										20320
									],
									[
										20534,
										20550
									],
									[
										20741,
										20757
									],
									[
										21042,
										21058
									],
									[
										21353,
										21369
									],
									[
										21549,
										21565
									],
									[
										21816,
										21832
									],
									[
										21981,
										21997
									],
									[
										22275,
										22291
									],
									[
										22509,
										22525
									],
									[
										22805,
										22821
									],
									[
										22854,
										22870
									],
									[
										23215,
										23231
									],
									[
										23548,
										23564
									],
									[
										23899,
										23915
									],
									[
										24326,
										24342
									],
									[
										24640,
										24656
									],
									[
										25018,
										25034
									],
									[
										25340,
										25356
									],
									[
										25795,
										25811
									],
									[
										26114,
										26130
									],
									[
										26447,
										26463
									],
									[
										26737,
										26753
									],
									[
										27083,
										27099
									],
									[
										27442,
										27458
									],
									[
										27836,
										27852
									],
									[
										28169,
										28185
									],
									[
										28528,
										28544
									],
									[
										28860,
										28876
									],
									[
										29072,
										29088
									],
									[
										29279,
										29295
									],
									[
										29580,
										29596
									],
									[
										29891,
										29907
									],
									[
										30523,
										30530
									],
									[
										30872,
										30879
									],
									[
										31294,
										31301
									],
									[
										31678,
										31685
									],
									[
										32177,
										32184
									],
									[
										32426,
										32433
									],
									[
										32903,
										32910
									],
									[
										33332,
										33339
									],
									[
										33585,
										33592
									],
									[
										33715,
										33722
									],
									[
										33781,
										33788
									],
									[
										33997,
										34004
									],
									[
										34081,
										34088
									],
									[
										34110,
										34117
									],
									[
										34408,
										34415
									],
									[
										34548,
										34555
									],
									[
										34645,
										34652
									],
									[
										34958,
										34965
									],
									[
										35009,
										35016
									],
									[
										35409,
										35416
									],
									[
										35658,
										35665
									],
									[
										35755,
										35762
									],
									[
										36129,
										36136
									],
									[
										36387,
										36394
									],
									[
										36553,
										36560
									],
									[
										36798,
										36805
									],
									[
										37081,
										37088
									],
									[
										37131,
										37138
									],
									[
										37450,
										37457
									],
									[
										37665,
										37672
									],
									[
										38028,
										38035
									],
									[
										38210,
										38217
									],
									[
										38273,
										38280
									],
									[
										38345,
										38352
									],
									[
										38410,
										38417
									],
									[
										38559,
										38566
									],
									[
										38675,
										38682
									],
									[
										38715,
										38722
									],
									[
										38923,
										38930
									],
									[
										39248,
										39255
									],
									[
										39616,
										39623
									],
									[
										40095,
										40102
									],
									[
										40495,
										40502
									],
									[
										40786,
										40793
									],
									[
										40846,
										40853
									],
									[
										40948,
										40955
									],
									[
										41051,
										41058
									],
									[
										41133,
										41140
									],
									[
										41154,
										41161
									],
									[
										41262,
										41269
									],
									[
										41382,
										41389
									],
									[
										41438,
										41445
									],
									[
										41516,
										41523
									],
									[
										41567,
										41574
									],
									[
										41621,
										41628
									],
									[
										41687,
										41694
									],
									[
										42031,
										42038
									],
									[
										42467,
										42474
									],
									[
										42788,
										42795
									],
									[
										43065,
										43072
									],
									[
										43366,
										43373
									],
									[
										43636,
										43643
									],
									[
										43852,
										43859
									],
									[
										44045,
										44052
									],
									[
										44301,
										44308
									],
									[
										44617,
										44624
									],
									[
										44736,
										44743
									],
									[
										45037,
										45044
									],
									[
										45342,
										45349
									],
									[
										45536,
										45543
									],
									[
										45601,
										45608
									],
									[
										45784,
										45791
									],
									[
										46228,
										46235
									],
									[
										46527,
										46534
									],
									[
										47064,
										47071
									],
									[
										47343,
										47350
									],
									[
										47709,
										47716
									],
									[
										48034,
										48041
									],
									[
										48077,
										48084
									],
									[
										48130,
										48137
									],
									[
										48551,
										48558
									],
									[
										49006,
										49013
									],
									[
										49545,
										49552
									],
									[
										49835,
										49842
									],
									[
										49893,
										49900
									],
									[
										50122,
										50129
									],
									[
										50223,
										50230
									],
									[
										50277,
										50284
									],
									[
										50340,
										50347
									],
									[
										50403,
										50410
									],
									[
										50504,
										50511
									],
									[
										50562,
										50569
									],
									[
										50642,
										50649
									],
									[
										50661,
										50668
									],
									[
										50767,
										50774
									],
									[
										50885,
										50892
									],
									[
										50937,
										50944
									],
									[
										51012,
										51019
									],
									[
										51061,
										51068
									],
									[
										51339,
										51346
									],
									[
										51738,
										51745
									],
									[
										52078,
										52085
									],
									[
										52236,
										52243
									],
									[
										52301,
										52308
									],
									[
										52454,
										52461
									],
									[
										52777,
										52784
									],
									[
										52966,
										52973
									],
									[
										53031,
										53038
									],
									[
										53214,
										53221
									],
									[
										53522,
										53529
									],
									[
										53678,
										53685
									],
									[
										53778,
										53785
									],
									[
										54026,
										54033
									],
									[
										54320,
										54327
									],
									[
										54648,
										54655
									],
									[
										54948,
										54955
									],
									[
										55267,
										55274
									],
									[
										55597,
										55604
									],
									[
										55923,
										55930
									],
									[
										56286,
										56293
									],
									[
										56359,
										56366
									],
									[
										56780,
										56787
									],
									[
										57053,
										57060
									],
									[
										57336,
										57343
									],
									[
										57576,
										57583
									],
									[
										57812,
										57819
									],
									[
										58014,
										58021
									],
									[
										58270,
										58277
									],
									[
										58349,
										58356
									],
									[
										58426,
										58433
									],
									[
										58509,
										58516
									],
									[
										58590,
										58597
									],
									[
										58940,
										58947
									],
									[
										59400,
										59407
									],
									[
										59599,
										59606
									],
									[
										59800,
										59807
									],
									[
										60312,
										60319
									],
									[
										60411,
										60418
									],
									[
										60511,
										60518
									],
									[
										60822,
										60829
									],
									[
										61019,
										61026
									],
									[
										61095,
										61102
									],
									[
										61189,
										61196
									],
									[
										61351,
										61358
									],
									[
										61544,
										61551
									],
									[
										61616,
										61623
									],
									[
										61706,
										61713
									],
									[
										62083,
										62090
									],
									[
										62145,
										62152
									],
									[
										62589,
										62596
									],
									[
										63142,
										63149
									],
									[
										63742,
										63749
									],
									[
										63964,
										63971
									],
									[
										64341,
										64348
									],
									[
										64774,
										64781
									],
									[
										64946,
										64953
									],
									[
										65613,
										65620
									],
									[
										66343,
										66350
									],
									[
										66545,
										66552
									],
									[
										66818,
										66825
									],
									[
										66977,
										66984
									],
									[
										67401,
										67408
									],
									[
										67552,
										67559
									],
									[
										68005,
										68012
									],
									[
										68763,
										68770
									],
									[
										68838,
										68845
									],
									[
										69279,
										69286
									],
									[
										69522,
										69529
									],
									[
										69855,
										69862
									],
									[
										70043,
										70050
									],
									[
										70425,
										70432
									],
									[
										70902,
										70909
									],
									[
										71326,
										71333
									],
									[
										71618,
										71625
									],
									[
										71882,
										71889
									],
									[
										72207,
										72214
									],
									[
										72541,
										72548
									],
									[
										72856,
										72863
									],
									[
										73147,
										73154
									],
									[
										73190,
										73197
									],
									[
										73939,
										73946
									],
									[
										74237,
										74244
									],
									[
										74344,
										74351
									],
									[
										74385,
										74392
									],
									[
										75128,
										75135
									],
									[
										75797,
										75804
									],
									[
										76069,
										76076
									],
									[
										76110,
										76117
									],
									[
										76841,
										76848
									],
									[
										77062,
										77069
									],
									[
										77334,
										77341
									],
									[
										77375,
										77382
									],
									[
										78106,
										78113
									],
									[
										78424,
										78431
									],
									[
										78546,
										78553
									],
									[
										78589,
										78596
									],
									[
										79323,
										79330
									],
									[
										79552,
										79559
									],
									[
										79681,
										79688
									],
									[
										79724,
										79731
									],
									[
										80458,
										80465
									],
									[
										80780,
										80787
									],
									[
										81224,
										81231
									],
									[
										81267,
										81274
									],
									[
										82001,
										82008
									],
									[
										82391,
										82398
									],
									[
										82673,
										82680
									],
									[
										82806,
										82813
									],
									[
										82849,
										82856
									],
									[
										83583,
										83590
									],
									[
										83904,
										83911
									],
									[
										84026,
										84033
									],
									[
										84069,
										84076
									],
									[
										84803,
										84810
									],
									[
										85032,
										85039
									],
									[
										85161,
										85168
									],
									[
										85204,
										85211
									],
									[
										85938,
										85945
									],
									[
										86167,
										86174
									],
									[
										86615,
										86622
									],
									[
										86658,
										86665
									],
									[
										87392,
										87399
									],
									[
										87713,
										87720
									],
									[
										87835,
										87842
									],
									[
										87878,
										87885
									],
									[
										88612,
										88619
									],
									[
										88841,
										88848
									],
									[
										88970,
										88977
									],
									[
										89013,
										89020
									],
									[
										89747,
										89754
									],
									[
										89976,
										89983
									],
									[
										90424,
										90431
									],
									[
										90467,
										90474
									],
									[
										91201,
										91208
									],
									[
										91522,
										91529
									],
									[
										91644,
										91651
									],
									[
										91687,
										91694
									],
									[
										92421,
										92428
									],
									[
										92650,
										92657
									],
									[
										92779,
										92786
									],
									[
										92822,
										92829
									],
									[
										93556,
										93563
									],
									[
										93785,
										93792
									],
									[
										94233,
										94240
									],
									[
										94276,
										94283
									],
									[
										95010,
										95017
									],
									[
										95331,
										95338
									],
									[
										95453,
										95460
									],
									[
										95496,
										95503
									],
									[
										96230,
										96237
									],
									[
										96459,
										96466
									],
									[
										96584,
										96591
									],
									[
										96627,
										96634
									],
									[
										97361,
										97368
									],
									[
										97590,
										97597
									],
									[
										98038,
										98045
									],
									[
										98081,
										98088
									],
									[
										98815,
										98822
									],
									[
										99136,
										99143
									],
									[
										99258,
										99265
									],
									[
										99301,
										99308
									],
									[
										100035,
										100042
									],
									[
										100264,
										100271
									],
									[
										100389,
										100396
									],
									[
										100432,
										100439
									],
									[
										101166,
										101173
									],
									[
										101395,
										101402
									],
									[
										101843,
										101850
									],
									[
										101886,
										101893
									],
									[
										102620,
										102627
									],
									[
										102943,
										102950
									],
									[
										103413,
										103420
									],
									[
										103456,
										103463
									],
									[
										104190,
										104197
									],
									[
										104419,
										104426
									],
									[
										104570,
										104577
									],
									[
										104613,
										104620
									],
									[
										105347,
										105354
									],
									[
										105576,
										105583
									],
									[
										105721,
										105728
									],
									[
										105764,
										105771
									],
									[
										106498,
										106505
									],
									[
										106862,
										106869
									],
									[
										106961,
										106968
									],
									[
										107206,
										107213
									],
									[
										107261,
										107268
									],
									[
										107352,
										107359
									],
									[
										107392,
										107399
									],
									[
										107562,
										107569
									],
									[
										107684,
										107691
									],
									[
										107770,
										107777
									],
									[
										107989,
										107996
									],
									[
										108183,
										108190
									],
									[
										108279,
										108286
									],
									[
										108584,
										108591
									],
									[
										108626,
										108633
									],
									[
										108886,
										108893
									],
									[
										109106,
										109113
									],
									[
										109300,
										109307
									],
									[
										109396,
										109403
									],
									[
										109671,
										109678
									],
									[
										109816,
										109823
									],
									[
										109859,
										109866
									],
									[
										110593,
										110600
									],
									[
										110822,
										110829
									],
									[
										110973,
										110980
									],
									[
										111016,
										111023
									],
									[
										111750,
										111757
									],
									[
										111979,
										111986
									],
									[
										112449,
										112456
									],
									[
										112492,
										112499
									],
									[
										113226,
										113233
									],
									[
										113515,
										113522
									],
									[
										113636,
										113643
									],
									[
										113879,
										113886
									],
									[
										114085,
										114092
									],
									[
										114312,
										114319
									],
									[
										114638,
										114645
									],
									[
										114864,
										114871
									],
									[
										115336,
										115343
									],
									[
										115458,
										115465
									],
									[
										115501,
										115508
									],
									[
										116235,
										116242
									],
									[
										116464,
										116471
									],
									[
										116593,
										116600
									],
									[
										116636,
										116643
									],
									[
										117370,
										117377
									],
									[
										117706,
										117713
									],
									[
										118150,
										118157
									],
									[
										118193,
										118200
									],
									[
										118927,
										118934
									],
									[
										119331,
										119338
									],
									[
										119627,
										119634
									],
									[
										119760,
										119767
									],
									[
										119803,
										119810
									],
									[
										120537,
										120544
									],
									[
										120872,
										120879
									],
									[
										120994,
										121001
									],
									[
										121037,
										121044
									],
									[
										121771,
										121778
									],
									[
										122000,
										122007
									],
									[
										122129,
										122136
									],
									[
										122172,
										122179
									],
									[
										122906,
										122913
									],
									[
										123135,
										123142
									],
									[
										123583,
										123590
									],
									[
										123626,
										123633
									],
									[
										124360,
										124367
									],
									[
										124695,
										124702
									],
									[
										124817,
										124824
									],
									[
										124860,
										124867
									],
									[
										125594,
										125601
									],
									[
										125823,
										125830
									],
									[
										125952,
										125959
									],
									[
										125995,
										126002
									],
									[
										126729,
										126736
									],
									[
										126958,
										126965
									],
									[
										127406,
										127413
									],
									[
										127449,
										127456
									],
									[
										128183,
										128190
									],
									[
										128518,
										128525
									],
									[
										128640,
										128647
									],
									[
										128683,
										128690
									],
									[
										129417,
										129424
									],
									[
										129646,
										129653
									],
									[
										129775,
										129782
									],
									[
										129818,
										129825
									],
									[
										130552,
										130559
									],
									[
										130781,
										130788
									],
									[
										131229,
										131236
									],
									[
										131272,
										131279
									],
									[
										132006,
										132013
									],
									[
										132341,
										132348
									],
									[
										132463,
										132470
									],
									[
										132506,
										132513
									],
									[
										133240,
										133247
									],
									[
										133469,
										133476
									],
									[
										133594,
										133601
									],
									[
										133637,
										133644
									],
									[
										134371,
										134378
									],
									[
										134600,
										134607
									],
									[
										135048,
										135055
									],
									[
										135091,
										135098
									],
									[
										135825,
										135832
									],
									[
										136160,
										136167
									],
									[
										136282,
										136289
									],
									[
										136325,
										136332
									],
									[
										137059,
										137066
									],
									[
										137288,
										137295
									],
									[
										137413,
										137420
									],
									[
										137456,
										137463
									],
									[
										138190,
										138197
									],
									[
										138419,
										138426
									],
									[
										138867,
										138874
									],
									[
										138910,
										138917
									],
									[
										139644,
										139651
									],
									[
										139981,
										139988
									],
									[
										140451,
										140458
									],
									[
										140494,
										140501
									],
									[
										141228,
										141235
									],
									[
										141457,
										141464
									],
									[
										141608,
										141615
									],
									[
										141651,
										141658
									],
									[
										142385,
										142392
									],
									[
										142614,
										142621
									],
									[
										142759,
										142766
									],
									[
										142802,
										142809
									],
									[
										143536,
										143543
									],
									[
										143914,
										143921
									],
									[
										144013,
										144020
									],
									[
										144258,
										144265
									],
									[
										144313,
										144320
									],
									[
										144404,
										144411
									],
									[
										144444,
										144451
									],
									[
										144614,
										144621
									],
									[
										144736,
										144743
									],
									[
										144822,
										144829
									],
									[
										145041,
										145048
									],
									[
										145235,
										145242
									],
									[
										145331,
										145338
									],
									[
										145650,
										145657
									],
									[
										145692,
										145699
									],
									[
										145952,
										145959
									],
									[
										146172,
										146179
									],
									[
										146366,
										146373
									],
									[
										146462,
										146469
									],
									[
										146751,
										146758
									],
									[
										146896,
										146903
									],
									[
										146939,
										146946
									],
									[
										147673,
										147680
									],
									[
										147902,
										147909
									],
									[
										148053,
										148060
									],
									[
										148096,
										148103
									],
									[
										148830,
										148837
									],
									[
										149059,
										149066
									],
									[
										149529,
										149536
									],
									[
										149572,
										149579
									],
									[
										150306,
										150313
									],
									[
										150636,
										150643
									],
									[
										150908,
										150915
									],
									[
										150949,
										150956
									],
									[
										151680,
										151687
									],
									[
										151901,
										151908
									],
									[
										152173,
										152180
									],
									[
										152214,
										152221
									],
									[
										152945,
										152952
									],
									[
										153537,
										153548
									],
									[
										153734,
										153745
									],
									[
										153810,
										153821
									],
									[
										153904,
										153915
									],
									[
										154195,
										154206
									],
									[
										154560,
										154571
									],
									[
										154971,
										154973
									],
									[
										154977,
										154979
									],
									[
										154986,
										154988
									],
									[
										155204,
										155206
									],
									[
										155422,
										155424
									],
									[
										155574,
										155576
									],
									[
										155725,
										155727
									],
									[
										155893,
										155895
									],
									[
										156173,
										156175
									],
									[
										156179,
										156181
									],
									[
										156188,
										156190
									],
									[
										156406,
										156408
									],
									[
										156624,
										156626
									],
									[
										156776,
										156778
									],
									[
										156927,
										156929
									],
									[
										157095,
										157097
									],
									[
										157366,
										157368
									],
									[
										157644,
										157646
									],
									[
										157650,
										157652
									],
									[
										157657,
										157659
									],
									[
										157873,
										157875
									],
									[
										158096,
										158098
									],
									[
										158247,
										158249
									],
									[
										158397,
										158399
									],
									[
										158565,
										158567
									],
									[
										158801,
										158803
									],
									[
										159193,
										159195
									],
									[
										159199,
										159201
									],
									[
										159206,
										159208
									],
									[
										159422,
										159424
									],
									[
										159645,
										159647
									],
									[
										159796,
										159798
									],
									[
										159946,
										159948
									],
									[
										160114,
										160116
									],
									[
										160364,
										160366
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								159650,
								159650
							]
						],
						"settings":
						{
							"SL.19.region_keys":
							[
							],
							"SL.20.region_keys":
							[
							],
							"default_dir": "\\\\shgwp1031\\CSHHCIS\\Temp\\Robin\\全景图文报告打印问题\\上海\\client log\\Log\\2018-06-08",
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"is_init_dirty_state": false,
							"line_numbers": false,
							"output_tag": 7,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 43455.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/D/Workshop/Corp/GCRIS/SRC/UpgradeTool/QuicklyUpgradeTool/src/QuicklyUpgradeTool/bin/Debug/script/3.0.1.0.sql",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 150357,
						"regions":
						{
						},
						"selection":
						[
							[
								57500,
								57500
							]
						],
						"settings":
						{
							"SL.20.region_keys":
							[
							],
							"SL.21.region_keys":
							[
							],
							"git_gutter_is_enabled": false,
							"is_init_dirty_state": false,
							"syntax": "Packages/SQL/SQL.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18289.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/Workshop/Corp/GCRIS/SRC/Client/Report/ReportListPanel/ReportPrintPanel.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 279994,
						"regions":
						{
						},
						"selection":
						[
							[
								113803,
								113823
							]
						],
						"settings":
						{
							"SL.21.region_keys":
							[
							],
							"SL.22.region_keys":
							[
							],
							"git_gutter_is_enabled": false,
							"in_converting": true,
							"is_init_dirty_state": false,
							"origin_encoding": "GB2312",
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 36834.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 102.0
	},
	"output.exec":
	{
		"height": 127.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "firstProj.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 139.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
